
RFID_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003764  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003820  08003820  00013820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080038c0  080038c0  000138c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080038c8  080038c8  000138c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080038cc  080038cc  000138cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000040  20000000  080038d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002a4  20000040  08003910  00020040  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002e4  08003910  000202e4  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013656  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002b21  00000000  00000000  000336be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a6d3  00000000  00000000  000361df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c60  00000000  00000000  000408b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001090  00000000  00000000  00041518  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000078d4  00000000  00000000  000425a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000043bd  00000000  00000000  00049e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004e239  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000025ec  00000000  00000000  0004e2b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000040 	.word	0x20000040
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003808 	.word	0x08003808

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000044 	.word	0x20000044
 8000100:	08003808 	.word	0x08003808

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_uldivmod>:
 8000428:	2b00      	cmp	r3, #0
 800042a:	d111      	bne.n	8000450 <__aeabi_uldivmod+0x28>
 800042c:	2a00      	cmp	r2, #0
 800042e:	d10f      	bne.n	8000450 <__aeabi_uldivmod+0x28>
 8000430:	2900      	cmp	r1, #0
 8000432:	d100      	bne.n	8000436 <__aeabi_uldivmod+0xe>
 8000434:	2800      	cmp	r0, #0
 8000436:	d002      	beq.n	800043e <__aeabi_uldivmod+0x16>
 8000438:	2100      	movs	r1, #0
 800043a:	43c9      	mvns	r1, r1
 800043c:	1c08      	adds	r0, r1, #0
 800043e:	b407      	push	{r0, r1, r2}
 8000440:	4802      	ldr	r0, [pc, #8]	; (800044c <__aeabi_uldivmod+0x24>)
 8000442:	a102      	add	r1, pc, #8	; (adr r1, 800044c <__aeabi_uldivmod+0x24>)
 8000444:	1840      	adds	r0, r0, r1
 8000446:	9002      	str	r0, [sp, #8]
 8000448:	bd03      	pop	{r0, r1, pc}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	ffffffd9 	.word	0xffffffd9
 8000450:	b403      	push	{r0, r1}
 8000452:	4668      	mov	r0, sp
 8000454:	b501      	push	{r0, lr}
 8000456:	9802      	ldr	r0, [sp, #8]
 8000458:	f000 f806 	bl	8000468 <__udivmoddi4>
 800045c:	9b01      	ldr	r3, [sp, #4]
 800045e:	469e      	mov	lr, r3
 8000460:	b002      	add	sp, #8
 8000462:	bc0c      	pop	{r2, r3}
 8000464:	4770      	bx	lr
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__udivmoddi4>:
 8000468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046a:	4657      	mov	r7, sl
 800046c:	464e      	mov	r6, r9
 800046e:	4645      	mov	r5, r8
 8000470:	46de      	mov	lr, fp
 8000472:	b5e0      	push	{r5, r6, r7, lr}
 8000474:	0004      	movs	r4, r0
 8000476:	b083      	sub	sp, #12
 8000478:	000d      	movs	r5, r1
 800047a:	4692      	mov	sl, r2
 800047c:	4699      	mov	r9, r3
 800047e:	428b      	cmp	r3, r1
 8000480:	d82f      	bhi.n	80004e2 <__udivmoddi4+0x7a>
 8000482:	d02c      	beq.n	80004de <__udivmoddi4+0x76>
 8000484:	4649      	mov	r1, r9
 8000486:	4650      	mov	r0, sl
 8000488:	f000 f8ae 	bl	80005e8 <__clzdi2>
 800048c:	0029      	movs	r1, r5
 800048e:	0006      	movs	r6, r0
 8000490:	0020      	movs	r0, r4
 8000492:	f000 f8a9 	bl	80005e8 <__clzdi2>
 8000496:	1a33      	subs	r3, r6, r0
 8000498:	4698      	mov	r8, r3
 800049a:	3b20      	subs	r3, #32
 800049c:	469b      	mov	fp, r3
 800049e:	d500      	bpl.n	80004a2 <__udivmoddi4+0x3a>
 80004a0:	e074      	b.n	800058c <__udivmoddi4+0x124>
 80004a2:	4653      	mov	r3, sl
 80004a4:	465a      	mov	r2, fp
 80004a6:	4093      	lsls	r3, r2
 80004a8:	001f      	movs	r7, r3
 80004aa:	4653      	mov	r3, sl
 80004ac:	4642      	mov	r2, r8
 80004ae:	4093      	lsls	r3, r2
 80004b0:	001e      	movs	r6, r3
 80004b2:	42af      	cmp	r7, r5
 80004b4:	d829      	bhi.n	800050a <__udivmoddi4+0xa2>
 80004b6:	d026      	beq.n	8000506 <__udivmoddi4+0x9e>
 80004b8:	465b      	mov	r3, fp
 80004ba:	1ba4      	subs	r4, r4, r6
 80004bc:	41bd      	sbcs	r5, r7
 80004be:	2b00      	cmp	r3, #0
 80004c0:	da00      	bge.n	80004c4 <__udivmoddi4+0x5c>
 80004c2:	e079      	b.n	80005b8 <__udivmoddi4+0x150>
 80004c4:	2200      	movs	r2, #0
 80004c6:	2300      	movs	r3, #0
 80004c8:	9200      	str	r2, [sp, #0]
 80004ca:	9301      	str	r3, [sp, #4]
 80004cc:	2301      	movs	r3, #1
 80004ce:	465a      	mov	r2, fp
 80004d0:	4093      	lsls	r3, r2
 80004d2:	9301      	str	r3, [sp, #4]
 80004d4:	2301      	movs	r3, #1
 80004d6:	4642      	mov	r2, r8
 80004d8:	4093      	lsls	r3, r2
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	e019      	b.n	8000512 <__udivmoddi4+0xaa>
 80004de:	4282      	cmp	r2, r0
 80004e0:	d9d0      	bls.n	8000484 <__udivmoddi4+0x1c>
 80004e2:	2200      	movs	r2, #0
 80004e4:	2300      	movs	r3, #0
 80004e6:	9200      	str	r2, [sp, #0]
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <__udivmoddi4+0x8c>
 80004f0:	601c      	str	r4, [r3, #0]
 80004f2:	605d      	str	r5, [r3, #4]
 80004f4:	9800      	ldr	r0, [sp, #0]
 80004f6:	9901      	ldr	r1, [sp, #4]
 80004f8:	b003      	add	sp, #12
 80004fa:	bc3c      	pop	{r2, r3, r4, r5}
 80004fc:	4690      	mov	r8, r2
 80004fe:	4699      	mov	r9, r3
 8000500:	46a2      	mov	sl, r4
 8000502:	46ab      	mov	fp, r5
 8000504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000506:	42a3      	cmp	r3, r4
 8000508:	d9d6      	bls.n	80004b8 <__udivmoddi4+0x50>
 800050a:	2200      	movs	r2, #0
 800050c:	2300      	movs	r3, #0
 800050e:	9200      	str	r2, [sp, #0]
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	4643      	mov	r3, r8
 8000514:	2b00      	cmp	r3, #0
 8000516:	d0e8      	beq.n	80004ea <__udivmoddi4+0x82>
 8000518:	07fb      	lsls	r3, r7, #31
 800051a:	0872      	lsrs	r2, r6, #1
 800051c:	431a      	orrs	r2, r3
 800051e:	4646      	mov	r6, r8
 8000520:	087b      	lsrs	r3, r7, #1
 8000522:	e00e      	b.n	8000542 <__udivmoddi4+0xda>
 8000524:	42ab      	cmp	r3, r5
 8000526:	d101      	bne.n	800052c <__udivmoddi4+0xc4>
 8000528:	42a2      	cmp	r2, r4
 800052a:	d80c      	bhi.n	8000546 <__udivmoddi4+0xde>
 800052c:	1aa4      	subs	r4, r4, r2
 800052e:	419d      	sbcs	r5, r3
 8000530:	2001      	movs	r0, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2100      	movs	r1, #0
 8000538:	3e01      	subs	r6, #1
 800053a:	1824      	adds	r4, r4, r0
 800053c:	414d      	adcs	r5, r1
 800053e:	2e00      	cmp	r6, #0
 8000540:	d006      	beq.n	8000550 <__udivmoddi4+0xe8>
 8000542:	42ab      	cmp	r3, r5
 8000544:	d9ee      	bls.n	8000524 <__udivmoddi4+0xbc>
 8000546:	3e01      	subs	r6, #1
 8000548:	1924      	adds	r4, r4, r4
 800054a:	416d      	adcs	r5, r5
 800054c:	2e00      	cmp	r6, #0
 800054e:	d1f8      	bne.n	8000542 <__udivmoddi4+0xda>
 8000550:	465b      	mov	r3, fp
 8000552:	9800      	ldr	r0, [sp, #0]
 8000554:	9901      	ldr	r1, [sp, #4]
 8000556:	1900      	adds	r0, r0, r4
 8000558:	4169      	adcs	r1, r5
 800055a:	2b00      	cmp	r3, #0
 800055c:	db22      	blt.n	80005a4 <__udivmoddi4+0x13c>
 800055e:	002b      	movs	r3, r5
 8000560:	465a      	mov	r2, fp
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	4644      	mov	r4, r8
 8000568:	40e2      	lsrs	r2, r4
 800056a:	001c      	movs	r4, r3
 800056c:	465b      	mov	r3, fp
 800056e:	0015      	movs	r5, r2
 8000570:	2b00      	cmp	r3, #0
 8000572:	db2c      	blt.n	80005ce <__udivmoddi4+0x166>
 8000574:	0026      	movs	r6, r4
 8000576:	409e      	lsls	r6, r3
 8000578:	0033      	movs	r3, r6
 800057a:	0026      	movs	r6, r4
 800057c:	4647      	mov	r7, r8
 800057e:	40be      	lsls	r6, r7
 8000580:	0032      	movs	r2, r6
 8000582:	1a80      	subs	r0, r0, r2
 8000584:	4199      	sbcs	r1, r3
 8000586:	9000      	str	r0, [sp, #0]
 8000588:	9101      	str	r1, [sp, #4]
 800058a:	e7ae      	b.n	80004ea <__udivmoddi4+0x82>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	1a9b      	subs	r3, r3, r2
 8000592:	4652      	mov	r2, sl
 8000594:	40da      	lsrs	r2, r3
 8000596:	4641      	mov	r1, r8
 8000598:	0013      	movs	r3, r2
 800059a:	464a      	mov	r2, r9
 800059c:	408a      	lsls	r2, r1
 800059e:	0017      	movs	r7, r2
 80005a0:	431f      	orrs	r7, r3
 80005a2:	e782      	b.n	80004aa <__udivmoddi4+0x42>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2320      	movs	r3, #32
 80005a8:	1a9b      	subs	r3, r3, r2
 80005aa:	002a      	movs	r2, r5
 80005ac:	4646      	mov	r6, r8
 80005ae:	409a      	lsls	r2, r3
 80005b0:	0023      	movs	r3, r4
 80005b2:	40f3      	lsrs	r3, r6
 80005b4:	4313      	orrs	r3, r2
 80005b6:	e7d5      	b.n	8000564 <__udivmoddi4+0xfc>
 80005b8:	4642      	mov	r2, r8
 80005ba:	2320      	movs	r3, #32
 80005bc:	2100      	movs	r1, #0
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	2200      	movs	r2, #0
 80005c2:	9100      	str	r1, [sp, #0]
 80005c4:	9201      	str	r2, [sp, #4]
 80005c6:	2201      	movs	r2, #1
 80005c8:	40da      	lsrs	r2, r3
 80005ca:	9201      	str	r2, [sp, #4]
 80005cc:	e782      	b.n	80004d4 <__udivmoddi4+0x6c>
 80005ce:	4642      	mov	r2, r8
 80005d0:	2320      	movs	r3, #32
 80005d2:	0026      	movs	r6, r4
 80005d4:	1a9b      	subs	r3, r3, r2
 80005d6:	40de      	lsrs	r6, r3
 80005d8:	002f      	movs	r7, r5
 80005da:	46b4      	mov	ip, r6
 80005dc:	4097      	lsls	r7, r2
 80005de:	4666      	mov	r6, ip
 80005e0:	003b      	movs	r3, r7
 80005e2:	4333      	orrs	r3, r6
 80005e4:	e7c9      	b.n	800057a <__udivmoddi4+0x112>
 80005e6:	46c0      	nop			; (mov r8, r8)

080005e8 <__clzdi2>:
 80005e8:	b510      	push	{r4, lr}
 80005ea:	2900      	cmp	r1, #0
 80005ec:	d103      	bne.n	80005f6 <__clzdi2+0xe>
 80005ee:	f000 f807 	bl	8000600 <__clzsi2>
 80005f2:	3020      	adds	r0, #32
 80005f4:	e002      	b.n	80005fc <__clzdi2+0x14>
 80005f6:	1c08      	adds	r0, r1, #0
 80005f8:	f000 f802 	bl	8000600 <__clzsi2>
 80005fc:	bd10      	pop	{r4, pc}
 80005fe:	46c0      	nop			; (mov r8, r8)

08000600 <__clzsi2>:
 8000600:	211c      	movs	r1, #28
 8000602:	2301      	movs	r3, #1
 8000604:	041b      	lsls	r3, r3, #16
 8000606:	4298      	cmp	r0, r3
 8000608:	d301      	bcc.n	800060e <__clzsi2+0xe>
 800060a:	0c00      	lsrs	r0, r0, #16
 800060c:	3910      	subs	r1, #16
 800060e:	0a1b      	lsrs	r3, r3, #8
 8000610:	4298      	cmp	r0, r3
 8000612:	d301      	bcc.n	8000618 <__clzsi2+0x18>
 8000614:	0a00      	lsrs	r0, r0, #8
 8000616:	3908      	subs	r1, #8
 8000618:	091b      	lsrs	r3, r3, #4
 800061a:	4298      	cmp	r0, r3
 800061c:	d301      	bcc.n	8000622 <__clzsi2+0x22>
 800061e:	0900      	lsrs	r0, r0, #4
 8000620:	3904      	subs	r1, #4
 8000622:	a202      	add	r2, pc, #8	; (adr r2, 800062c <__clzsi2+0x2c>)
 8000624:	5c10      	ldrb	r0, [r2, r0]
 8000626:	1840      	adds	r0, r0, r1
 8000628:	4770      	bx	lr
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	02020304 	.word	0x02020304
 8000630:	01010101 	.word	0x01010101
	...

0800063c <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800063c:	4b10      	ldr	r3, [pc, #64]	; (8000680 <HAL_InitTick+0x44>)
{
 800063e:	b570      	push	{r4, r5, r6, lr}
  if (uwTickFreq != 0U)
 8000640:	6819      	ldr	r1, [r3, #0]
{
 8000642:	0005      	movs	r5, r0
  if (uwTickFreq != 0U)
 8000644:	2900      	cmp	r1, #0
 8000646:	d101      	bne.n	800064c <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000648:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800064a:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 800064c:	20fa      	movs	r0, #250	; 0xfa
 800064e:	0080      	lsls	r0, r0, #2
 8000650:	f7ff fd74 	bl	800013c <__udivsi3>
 8000654:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <HAL_InitTick+0x48>)
 8000656:	0001      	movs	r1, r0
 8000658:	6818      	ldr	r0, [r3, #0]
 800065a:	f7ff fd6f 	bl	800013c <__udivsi3>
 800065e:	f000 f889 	bl	8000774 <HAL_SYSTICK_Config>
 8000662:	1e04      	subs	r4, r0, #0
 8000664:	d1f0      	bne.n	8000648 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000666:	2d03      	cmp	r5, #3
 8000668:	d8ee      	bhi.n	8000648 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800066a:	0002      	movs	r2, r0
 800066c:	2001      	movs	r0, #1
 800066e:	0029      	movs	r1, r5
 8000670:	4240      	negs	r0, r0
 8000672:	f000 f843 	bl	80006fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000676:	4b04      	ldr	r3, [pc, #16]	; (8000688 <HAL_InitTick+0x4c>)
 8000678:	0020      	movs	r0, r4
 800067a:	601d      	str	r5, [r3, #0]
 800067c:	e7e5      	b.n	800064a <HAL_InitTick+0xe>
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	20000000 	.word	0x20000000
 8000684:	2000003c 	.word	0x2000003c
 8000688:	20000004 	.word	0x20000004

0800068c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	4a08      	ldr	r2, [pc, #32]	; (80006b0 <HAL_Init+0x24>)
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	6811      	ldr	r1, [r2, #0]
{
 8000694:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000696:	430b      	orrs	r3, r1
 8000698:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800069a:	2000      	movs	r0, #0
 800069c:	f7ff ffce 	bl	800063c <HAL_InitTick>
 80006a0:	1e04      	subs	r4, r0, #0
 80006a2:	d103      	bne.n	80006ac <HAL_Init+0x20>
  HAL_MspInit();
 80006a4:	f002 ff3e 	bl	8003524 <HAL_MspInit>
}
 80006a8:	0020      	movs	r0, r4
 80006aa:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80006ac:	2401      	movs	r4, #1
 80006ae:	e7fb      	b.n	80006a8 <HAL_Init+0x1c>
 80006b0:	40022000 	.word	0x40022000

080006b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006b4:	4a03      	ldr	r2, [pc, #12]	; (80006c4 <HAL_IncTick+0x10>)
 80006b6:	4904      	ldr	r1, [pc, #16]	; (80006c8 <HAL_IncTick+0x14>)
 80006b8:	6813      	ldr	r3, [r2, #0]
 80006ba:	6809      	ldr	r1, [r1, #0]
 80006bc:	185b      	adds	r3, r3, r1
 80006be:	6013      	str	r3, [r2, #0]
}
 80006c0:	4770      	bx	lr
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	2000005c 	.word	0x2000005c
 80006c8:	20000000 	.word	0x20000000

080006cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006cc:	4b01      	ldr	r3, [pc, #4]	; (80006d4 <HAL_GetTick+0x8>)
 80006ce:	6818      	ldr	r0, [r3, #0]
}
 80006d0:	4770      	bx	lr
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	2000005c 	.word	0x2000005c

080006d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006dc:	f7ff fff6 	bl	80006cc <HAL_GetTick>
 80006e0:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006e2:	1c63      	adds	r3, r4, #1
 80006e4:	d002      	beq.n	80006ec <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80006e6:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <HAL_Delay+0x20>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006ec:	f7ff ffee 	bl	80006cc <HAL_GetTick>
 80006f0:	1b40      	subs	r0, r0, r5
 80006f2:	4284      	cmp	r4, r0
 80006f4:	d8fa      	bhi.n	80006ec <HAL_Delay+0x14>
  {
  }
}
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	20000000 	.word	0x20000000

080006fc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000700:	2800      	cmp	r0, #0
 8000702:	db12      	blt.n	800072a <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000704:	0883      	lsrs	r3, r0, #2
 8000706:	4a13      	ldr	r2, [pc, #76]	; (8000754 <HAL_NVIC_SetPriority+0x58>)
 8000708:	2403      	movs	r4, #3
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	189b      	adds	r3, r3, r2
 800070e:	22ff      	movs	r2, #255	; 0xff
 8000710:	4020      	ands	r0, r4
 8000712:	40a0      	lsls	r0, r4
 8000714:	0014      	movs	r4, r2
 8000716:	25c0      	movs	r5, #192	; 0xc0
 8000718:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800071a:	4011      	ands	r1, r2
 800071c:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800071e:	00ad      	lsls	r5, r5, #2
 8000720:	595e      	ldr	r6, [r3, r5]
 8000722:	43a6      	bics	r6, r4
 8000724:	4331      	orrs	r1, r6
 8000726:	5159      	str	r1, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000728:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800072a:	2403      	movs	r4, #3
 800072c:	230f      	movs	r3, #15
 800072e:	b2c0      	uxtb	r0, r0
 8000730:	4003      	ands	r3, r0
 8000732:	4020      	ands	r0, r4
 8000734:	40a0      	lsls	r0, r4
 8000736:	34fc      	adds	r4, #252	; 0xfc
 8000738:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800073a:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800073c:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800073e:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000740:	3b08      	subs	r3, #8
 8000742:	4a05      	ldr	r2, [pc, #20]	; (8000758 <HAL_NVIC_SetPriority+0x5c>)
 8000744:	089b      	lsrs	r3, r3, #2
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	189b      	adds	r3, r3, r2
 800074a:	69da      	ldr	r2, [r3, #28]
 800074c:	43aa      	bics	r2, r5
 800074e:	4311      	orrs	r1, r2
 8000750:	61d9      	str	r1, [r3, #28]
 8000752:	e7e9      	b.n	8000728 <HAL_NVIC_SetPriority+0x2c>
 8000754:	e000e100 	.word	0xe000e100
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800075c:	2800      	cmp	r0, #0
 800075e:	db05      	blt.n	800076c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000760:	231f      	movs	r3, #31
 8000762:	4018      	ands	r0, r3
 8000764:	3b1e      	subs	r3, #30
 8000766:	4083      	lsls	r3, r0
 8000768:	4a01      	ldr	r2, [pc, #4]	; (8000770 <HAL_NVIC_EnableIRQ+0x14>)
 800076a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800076c:	4770      	bx	lr
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	e000e100 	.word	0xe000e100

08000774 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000774:	4a09      	ldr	r2, [pc, #36]	; (800079c <HAL_SYSTICK_Config+0x28>)
 8000776:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000778:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800077a:	4293      	cmp	r3, r2
 800077c:	d80d      	bhi.n	800079a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800077e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000782:	4808      	ldr	r0, [pc, #32]	; (80007a4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000784:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000786:	6a03      	ldr	r3, [r0, #32]
 8000788:	0609      	lsls	r1, r1, #24
 800078a:	021b      	lsls	r3, r3, #8
 800078c:	0a1b      	lsrs	r3, r3, #8
 800078e:	430b      	orrs	r3, r1
 8000790:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000792:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000794:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000796:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000798:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 800079a:	4770      	bx	lr
 800079c:	00ffffff 	.word	0x00ffffff
 80007a0:	e000e010 	.word	0xe000e010
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80007a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
  __HAL_LOCK(hdma);
 80007aa:	2301      	movs	r3, #1
 80007ac:	1d41      	adds	r1, r0, #5
 80007ae:	77cb      	strb	r3, [r1, #31]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80007b0:	1d84      	adds	r4, r0, #6
 80007b2:	7fe2      	ldrb	r2, [r4, #31]
 80007b4:	2a02      	cmp	r2, #2
 80007b6:	d003      	beq.n	80007c0 <HAL_DMA_Abort_IT+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007b8:	2204      	movs	r2, #4
 80007ba:	63c2      	str	r2, [r0, #60]	; 0x3c
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 80007bc:	0018      	movs	r0, r3
 80007be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80007c0:	260e      	movs	r6, #14
 80007c2:	6802      	ldr	r2, [r0, #0]
 80007c4:	6815      	ldr	r5, [r2, #0]
 80007c6:	43b5      	bics	r5, r6
 80007c8:	6015      	str	r5, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80007ca:	6815      	ldr	r5, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80007cc:	6c46      	ldr	r6, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 80007ce:	439d      	bics	r5, r3
 80007d0:	6015      	str	r5, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80007d2:	6832      	ldr	r2, [r6, #0]
 80007d4:	4d11      	ldr	r5, [pc, #68]	; (800081c <HAL_DMA_Abort_IT+0x74>)
 80007d6:	402a      	ands	r2, r5
 80007d8:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80007da:	221c      	movs	r2, #28
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80007dc:	46ac      	mov	ip, r5
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80007de:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80007e0:	4e0f      	ldr	r6, [pc, #60]	; (8000820 <HAL_DMA_Abort_IT+0x78>)
 80007e2:	402a      	ands	r2, r5
 80007e4:	4093      	lsls	r3, r2
 80007e6:	6877      	ldr	r7, [r6, #4]
 80007e8:	433b      	orrs	r3, r7
 80007ea:	6073      	str	r3, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80007ec:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80007ee:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80007f0:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80007f2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d006      	beq.n	8000806 <HAL_DMA_Abort_IT+0x5e>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80007f8:	4665      	mov	r5, ip
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	402a      	ands	r2, r5
 80007fe:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000800:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000802:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8000804:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000806:	2301      	movs	r3, #1
 8000808:	77e3      	strb	r3, [r4, #31]
    __HAL_UNLOCK(hdma);
 800080a:	2400      	movs	r4, #0
    if (hdma->XferAbortCallback != NULL)
 800080c:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 800080e:	77cc      	strb	r4, [r1, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8000810:	0013      	movs	r3, r2
    if (hdma->XferAbortCallback != NULL)
 8000812:	42a2      	cmp	r2, r4
 8000814:	d0d2      	beq.n	80007bc <HAL_DMA_Abort_IT+0x14>
      hdma->XferAbortCallback(hdma);
 8000816:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8000818:	0023      	movs	r3, r4
 800081a:	e7cf      	b.n	80007bc <HAL_DMA_Abort_IT+0x14>
 800081c:	fffffeff 	.word	0xfffffeff
 8000820:	40020000 	.word	0x40020000

08000824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000824:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000826:	680b      	ldr	r3, [r1, #0]
{
 8000828:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800082a:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00u;
 800082c:	2300      	movs	r3, #0
{
 800082e:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000830:	9a02      	ldr	r2, [sp, #8]
 8000832:	40da      	lsrs	r2, r3
 8000834:	d101      	bne.n	800083a <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  }
}
 8000836:	b005      	add	sp, #20
 8000838:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800083a:	2201      	movs	r2, #1
 800083c:	409a      	lsls	r2, r3
 800083e:	9203      	str	r2, [sp, #12]
 8000840:	9903      	ldr	r1, [sp, #12]
 8000842:	9a02      	ldr	r2, [sp, #8]
 8000844:	400a      	ands	r2, r1
 8000846:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8000848:	d100      	bne.n	800084c <HAL_GPIO_Init+0x28>
 800084a:	e085      	b.n	8000958 <HAL_GPIO_Init+0x134>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800084c:	9a01      	ldr	r2, [sp, #4]
 800084e:	2110      	movs	r1, #16
 8000850:	6852      	ldr	r2, [r2, #4]
 8000852:	0016      	movs	r6, r2
 8000854:	438e      	bics	r6, r1
 8000856:	2e02      	cmp	r6, #2
 8000858:	d10e      	bne.n	8000878 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800085a:	2507      	movs	r5, #7
 800085c:	401d      	ands	r5, r3
 800085e:	00ad      	lsls	r5, r5, #2
 8000860:	3901      	subs	r1, #1
 8000862:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8000864:	08dc      	lsrs	r4, r3, #3
 8000866:	00a4      	lsls	r4, r4, #2
 8000868:	1904      	adds	r4, r0, r4
 800086a:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800086c:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800086e:	9901      	ldr	r1, [sp, #4]
 8000870:	6909      	ldr	r1, [r1, #16]
 8000872:	40a9      	lsls	r1, r5
 8000874:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8000876:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000878:	2403      	movs	r4, #3
 800087a:	005f      	lsls	r7, r3, #1
 800087c:	40bc      	lsls	r4, r7
 800087e:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8000880:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000882:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000884:	4025      	ands	r5, r4
 8000886:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000888:	2503      	movs	r5, #3
 800088a:	4015      	ands	r5, r2
 800088c:	40bd      	lsls	r5, r7
 800088e:	4661      	mov	r1, ip
 8000890:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8000892:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000894:	2e01      	cmp	r6, #1
 8000896:	d80f      	bhi.n	80008b8 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000898:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 800089a:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800089c:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800089e:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008a0:	40bd      	lsls	r5, r7
 80008a2:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80008a4:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80008a6:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008a8:	9903      	ldr	r1, [sp, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008aa:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008ac:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008ae:	2101      	movs	r1, #1
 80008b0:	400d      	ands	r5, r1
 80008b2:	409d      	lsls	r5, r3
 80008b4:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80008b6:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80008b8:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008ba:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80008bc:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008be:	688d      	ldr	r5, [r1, #8]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008c0:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008c2:	40bd      	lsls	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008c4:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008c6:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80008c8:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008ca:	420a      	tst	r2, r1
 80008cc:	d044      	beq.n	8000958 <HAL_GPIO_Init+0x134>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80008ce:	2603      	movs	r6, #3
 80008d0:	240f      	movs	r4, #15
 80008d2:	4922      	ldr	r1, [pc, #136]	; (800095c <HAL_GPIO_Init+0x138>)
        temp = EXTI->EXTICR[position >> 2u];
 80008d4:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80008d6:	401e      	ands	r6, r3
 80008d8:	00ad      	lsls	r5, r5, #2
 80008da:	00f6      	lsls	r6, r6, #3
 80008dc:	186d      	adds	r5, r5, r1
 80008de:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80008e0:	21a0      	movs	r1, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 80008e2:	6e2f      	ldr	r7, [r5, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80008e4:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80008e6:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80008e8:	2400      	movs	r4, #0
 80008ea:	4288      	cmp	r0, r1
 80008ec:	d00c      	beq.n	8000908 <HAL_GPIO_Init+0xe4>
 80008ee:	491c      	ldr	r1, [pc, #112]	; (8000960 <HAL_GPIO_Init+0x13c>)
 80008f0:	3401      	adds	r4, #1
 80008f2:	4288      	cmp	r0, r1
 80008f4:	d008      	beq.n	8000908 <HAL_GPIO_Init+0xe4>
 80008f6:	491b      	ldr	r1, [pc, #108]	; (8000964 <HAL_GPIO_Init+0x140>)
 80008f8:	3401      	adds	r4, #1
 80008fa:	4288      	cmp	r0, r1
 80008fc:	d004      	beq.n	8000908 <HAL_GPIO_Init+0xe4>
 80008fe:	491a      	ldr	r1, [pc, #104]	; (8000968 <HAL_GPIO_Init+0x144>)
 8000900:	3403      	adds	r4, #3
 8000902:	4288      	cmp	r0, r1
 8000904:	d100      	bne.n	8000908 <HAL_GPIO_Init+0xe4>
 8000906:	3c02      	subs	r4, #2
 8000908:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 800090a:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800090c:	433c      	orrs	r4, r7
          temp |= iocurrent;
 800090e:	000e      	movs	r6, r1
        EXTI->EXTICR[position >> 2u] = temp;
 8000910:	662c      	str	r4, [r5, #96]	; 0x60
        temp = EXTI->IMR1;
 8000912:	4c16      	ldr	r4, [pc, #88]	; (800096c <HAL_GPIO_Init+0x148>)
        temp &= ~(iocurrent);
 8000914:	43cd      	mvns	r5, r1
        temp = EXTI->IMR1;
 8000916:	6fe7      	ldr	r7, [r4, #124]	; 0x7c
          temp |= iocurrent;
 8000918:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800091a:	03d1      	lsls	r1, r2, #15
 800091c:	d401      	bmi.n	8000922 <HAL_GPIO_Init+0xfe>
        temp &= ~(iocurrent);
 800091e:	003e      	movs	r6, r7
 8000920:	402e      	ands	r6, r5
        EXTI->IMR1 = temp;
 8000922:	67e6      	str	r6, [r4, #124]	; 0x7c
        temp = EXTI->EMR1;
 8000924:	4e12      	ldr	r6, [pc, #72]	; (8000970 <HAL_GPIO_Init+0x14c>)
          temp |= iocurrent;
 8000926:	9f00      	ldr	r7, [sp, #0]
        temp = EXTI->EMR1;
 8000928:	6ff4      	ldr	r4, [r6, #124]	; 0x7c
          temp |= iocurrent;
 800092a:	4327      	orrs	r7, r4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800092c:	0391      	lsls	r1, r2, #14
 800092e:	d401      	bmi.n	8000934 <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 8000930:	402c      	ands	r4, r5
 8000932:	0027      	movs	r7, r4
        EXTI->EMR1 = temp;
 8000934:	4c09      	ldr	r4, [pc, #36]	; (800095c <HAL_GPIO_Init+0x138>)
 8000936:	67f7      	str	r7, [r6, #124]	; 0x7c
        temp = EXTI->RTSR1;
 8000938:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 800093a:	9e00      	ldr	r6, [sp, #0]
 800093c:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800093e:	02d1      	lsls	r1, r2, #11
 8000940:	d401      	bmi.n	8000946 <HAL_GPIO_Init+0x122>
        temp &= ~(iocurrent);
 8000942:	003e      	movs	r6, r7
 8000944:	402e      	ands	r6, r5
        EXTI->RTSR1 = temp;
 8000946:	6026      	str	r6, [r4, #0]
        temp = EXTI->FTSR1;
 8000948:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 800094a:	9f00      	ldr	r7, [sp, #0]
 800094c:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800094e:	0292      	lsls	r2, r2, #10
 8000950:	d401      	bmi.n	8000956 <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 8000952:	402e      	ands	r6, r5
 8000954:	0037      	movs	r7, r6
        EXTI->FTSR1 = temp;
 8000956:	6067      	str	r7, [r4, #4]
    position++;
 8000958:	3301      	adds	r3, #1
 800095a:	e769      	b.n	8000830 <HAL_GPIO_Init+0xc>
 800095c:	40021800 	.word	0x40021800
 8000960:	50000400 	.word	0x50000400
 8000964:	50000800 	.word	0x50000800
 8000968:	50000c00 	.word	0x50000c00
 800096c:	40021804 	.word	0x40021804
 8000970:	40021808 	.word	0x40021808

08000974 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000974:	2a00      	cmp	r2, #0
 8000976:	d001      	beq.n	800097c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000978:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800097a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800097c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800097e:	e7fc      	b.n	800097a <HAL_GPIO_WritePin+0x6>

08000980 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000980:	6803      	ldr	r3, [r0, #0]
 8000982:	699a      	ldr	r2, [r3, #24]
 8000984:	0792      	lsls	r2, r2, #30
 8000986:	d501      	bpl.n	800098c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000988:	2200      	movs	r2, #0
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800098c:	2201      	movs	r2, #1
 800098e:	6999      	ldr	r1, [r3, #24]
 8000990:	4211      	tst	r1, r2
 8000992:	d102      	bne.n	800099a <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000994:	6999      	ldr	r1, [r3, #24]
 8000996:	430a      	orrs	r2, r1
 8000998:	619a      	str	r2, [r3, #24]
  }
}
 800099a:	4770      	bx	lr

0800099c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800099c:	b510      	push	{r4, lr}
  uint32_t tmpisr = 0U;
 800099e:	2300      	movs	r3, #0

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80009a0:	07ca      	lsls	r2, r1, #31
 80009a2:	d508      	bpl.n	80009b6 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80009a4:	0003      	movs	r3, r0
 80009a6:	3341      	adds	r3, #65	; 0x41
 80009a8:	781a      	ldrb	r2, [r3, #0]
 80009aa:	2328      	movs	r3, #40	; 0x28
 80009ac:	401a      	ands	r2, r3
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80009ae:	331a      	adds	r3, #26
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80009b0:	2a28      	cmp	r2, #40	; 0x28
 80009b2:	d000      	beq.n	80009b6 <I2C_Disable_IRQ+0x1a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80009b4:	33b0      	adds	r3, #176	; 0xb0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80009b6:	078a      	lsls	r2, r1, #30
 80009b8:	d508      	bpl.n	80009cc <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80009ba:	0002      	movs	r2, r0
 80009bc:	2428      	movs	r4, #40	; 0x28
 80009be:	3241      	adds	r2, #65	; 0x41
 80009c0:	7812      	ldrb	r2, [r2, #0]
 80009c2:	4022      	ands	r2, r4
 80009c4:	42a2      	cmp	r2, r4
 80009c6:	d116      	bne.n	80009f6 <I2C_Disable_IRQ+0x5a>
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80009c8:	2244      	movs	r2, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80009ca:	4313      	orrs	r3, r2
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80009cc:	074a      	lsls	r2, r1, #29
 80009ce:	d501      	bpl.n	80009d4 <I2C_Disable_IRQ+0x38>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80009d0:	22b8      	movs	r2, #184	; 0xb8
 80009d2:	4313      	orrs	r3, r2
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80009d4:	2211      	movs	r2, #17
 80009d6:	400a      	ands	r2, r1
 80009d8:	2a11      	cmp	r2, #17
 80009da:	d101      	bne.n	80009e0 <I2C_Disable_IRQ+0x44>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80009dc:	327f      	adds	r2, #127	; 0x7f
 80009de:	4313      	orrs	r3, r2
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80009e0:	2212      	movs	r2, #18
 80009e2:	4011      	ands	r1, r2
 80009e4:	4291      	cmp	r1, r2
 80009e6:	d101      	bne.n	80009ec <I2C_Disable_IRQ+0x50>
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80009e8:	324e      	adds	r2, #78	; 0x4e
 80009ea:	4313      	orrs	r3, r2
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80009ec:	6801      	ldr	r1, [r0, #0]
 80009ee:	680a      	ldr	r2, [r1, #0]
 80009f0:	439a      	bics	r2, r3
 80009f2:	600a      	str	r2, [r1, #0]
}
 80009f4:	bd10      	pop	{r4, pc}
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80009f6:	22f4      	movs	r2, #244	; 0xf4
 80009f8:	e7e7      	b.n	80009ca <I2C_Disable_IRQ+0x2e>
	...

080009fc <HAL_I2C_Init>:
{
 80009fc:	b570      	push	{r4, r5, r6, lr}
 80009fe:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000a00:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8000a02:	2c00      	cmp	r4, #0
 8000a04:	d03f      	beq.n	8000a86 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000a06:	0025      	movs	r5, r4
 8000a08:	3541      	adds	r5, #65	; 0x41
 8000a0a:	782b      	ldrb	r3, [r5, #0]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d105      	bne.n	8000a1e <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8000a12:	0022      	movs	r2, r4
 8000a14:	3240      	adds	r2, #64	; 0x40
 8000a16:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 8000a18:	0020      	movs	r0, r4
 8000a1a:	f002 fda3 	bl	8003564 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000a1e:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000a20:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000a22:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8000a24:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a26:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	68a6      	ldr	r6, [r4, #8]
 8000a2c:	438a      	bics	r2, r1
 8000a2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000a30:	6861      	ldr	r1, [r4, #4]
 8000a32:	4a1a      	ldr	r2, [pc, #104]	; (8000a9c <HAL_I2C_Init+0xa0>)
 8000a34:	400a      	ands	r2, r1
 8000a36:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000a38:	6899      	ldr	r1, [r3, #8]
 8000a3a:	4a19      	ldr	r2, [pc, #100]	; (8000aa0 <HAL_I2C_Init+0xa4>)
 8000a3c:	4011      	ands	r1, r2
 8000a3e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a40:	2801      	cmp	r0, #1
 8000a42:	d121      	bne.n	8000a88 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000a44:	2180      	movs	r1, #128	; 0x80
 8000a46:	0209      	lsls	r1, r1, #8
 8000a48:	4331      	orrs	r1, r6
 8000a4a:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000a4c:	6858      	ldr	r0, [r3, #4]
 8000a4e:	4915      	ldr	r1, [pc, #84]	; (8000aa4 <HAL_I2C_Init+0xa8>)
 8000a50:	4301      	orrs	r1, r0
 8000a52:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000a54:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a56:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000a58:	400a      	ands	r2, r1
 8000a5a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000a5c:	6961      	ldr	r1, [r4, #20]
 8000a5e:	6922      	ldr	r2, [r4, #16]
 8000a60:	430a      	orrs	r2, r1
 8000a62:	69a1      	ldr	r1, [r4, #24]
 8000a64:	0209      	lsls	r1, r1, #8
 8000a66:	430a      	orrs	r2, r1
 8000a68:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000a6a:	6a21      	ldr	r1, [r4, #32]
 8000a6c:	69e2      	ldr	r2, [r4, #28]
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000a72:	2201      	movs	r2, #1
 8000a74:	6819      	ldr	r1, [r3, #0]
 8000a76:	430a      	orrs	r2, r1
 8000a78:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000a7a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a7c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000a7e:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000a80:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a82:	3442      	adds	r4, #66	; 0x42
 8000a84:	7020      	strb	r0, [r4, #0]
}
 8000a86:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000a88:	2184      	movs	r1, #132	; 0x84
 8000a8a:	0209      	lsls	r1, r1, #8
 8000a8c:	4331      	orrs	r1, r6
 8000a8e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000a90:	2802      	cmp	r0, #2
 8000a92:	d1db      	bne.n	8000a4c <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000a94:	2180      	movs	r1, #128	; 0x80
 8000a96:	0109      	lsls	r1, r1, #4
 8000a98:	6059      	str	r1, [r3, #4]
 8000a9a:	e7d7      	b.n	8000a4c <HAL_I2C_Init+0x50>
 8000a9c:	f0ffffff 	.word	0xf0ffffff
 8000aa0:	ffff7fff 	.word	0xffff7fff
 8000aa4:	02008000 	.word	0x02008000

08000aa8 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000aa8:	6803      	ldr	r3, [r0, #0]
{
 8000aaa:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000aac:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8000aae:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8000ab0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d000      	beq.n	8000ab8 <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 8000ab6:	4798      	blx	r3
}
 8000ab8:	bd10      	pop	{r4, pc}

08000aba <HAL_I2C_SlaveTxCpltCallback>:
 8000aba:	4770      	bx	lr

08000abc <HAL_I2C_SlaveRxCpltCallback>:
 8000abc:	4770      	bx	lr

08000abe <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000abe:	0003      	movs	r3, r0
{
 8000ac0:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ac2:	2500      	movs	r5, #0
 8000ac4:	3342      	adds	r3, #66	; 0x42
 8000ac6:	701d      	strb	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	781a      	ldrb	r2, [r3, #0]
{
 8000acc:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8000ace:	2a29      	cmp	r2, #41	; 0x29
 8000ad0:	d10d      	bne.n	8000aee <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000ad2:	3a01      	subs	r2, #1
 8000ad4:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8000ad6:	2321      	movs	r3, #33	; 0x21
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8000ad8:	2101      	movs	r1, #1
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8000ada:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8000adc:	f7ff ff5e 	bl	800099c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8000ae0:	0023      	movs	r3, r4
 8000ae2:	3340      	adds	r3, #64	; 0x40
 8000ae4:	701d      	strb	r5, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8000ae6:	0020      	movs	r0, r4
 8000ae8:	f7ff ffe7 	bl	8000aba <HAL_I2C_SlaveTxCpltCallback>
}
 8000aec:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8000aee:	781a      	ldrb	r2, [r3, #0]
 8000af0:	2a2a      	cmp	r2, #42	; 0x2a
 8000af2:	d1fb      	bne.n	8000aec <I2C_ITSlaveSeqCplt+0x2e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000af4:	3a02      	subs	r2, #2
 8000af6:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8000af8:	2322      	movs	r3, #34	; 0x22
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8000afa:	2102      	movs	r1, #2
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8000afc:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8000afe:	f7ff ff4d 	bl	800099c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8000b02:	0023      	movs	r3, r4
 8000b04:	3340      	adds	r3, #64	; 0x40
 8000b06:	701d      	strb	r5, [r3, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8000b08:	0020      	movs	r0, r4
 8000b0a:	f7ff ffd7 	bl	8000abc <HAL_I2C_SlaveRxCpltCallback>
}
 8000b0e:	e7ed      	b.n	8000aec <I2C_ITSlaveSeqCplt+0x2e>

08000b10 <HAL_I2C_AddrCallback>:
}
 8000b10:	4770      	bx	lr

08000b12 <I2C_ITAddrCplt.isra.8>:
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8000b12:	0003      	movs	r3, r0
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8000b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8000b16:	3341      	adds	r3, #65	; 0x41
 8000b18:	781a      	ldrb	r2, [r3, #0]
 8000b1a:	2328      	movs	r3, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8000b1c:	0004      	movs	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8000b1e:	401a      	ands	r2, r3
 8000b20:	6803      	ldr	r3, [r0, #0]
 8000b22:	2a28      	cmp	r2, #40	; 0x28
 8000b24:	d137      	bne.n	8000b96 <I2C_ITAddrCplt.isra.8+0x84>
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8000b26:	27fe      	movs	r7, #254	; 0xfe
    transferdirection = I2C_GET_DIR(hi2c);
 8000b28:	699d      	ldr	r5, [r3, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8000b2a:	699e      	ldr	r6, [r3, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8000b2c:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8000b2e:	68d9      	ldr	r1, [r3, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8000b30:	03ed      	lsls	r5, r5, #15
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8000b32:	9101      	str	r1, [sp, #4]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000b34:	68c1      	ldr	r1, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8000b36:	0c36      	lsrs	r6, r6, #16
    transferdirection = I2C_GET_DIR(hi2c);
 8000b38:	0fed      	lsrs	r5, r5, #31
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8000b3a:	403e      	ands	r6, r7
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000b3c:	2902      	cmp	r1, #2
 8000b3e:	d121      	bne.n	8000b84 <I2C_ITAddrCplt.isra.8+0x72>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8000b40:	0592      	lsls	r2, r2, #22
 8000b42:	0d92      	lsrs	r2, r2, #22
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8000b44:	09d1      	lsrs	r1, r2, #7
 8000b46:	404e      	eors	r6, r1
 8000b48:	2106      	movs	r1, #6
 8000b4a:	400e      	ands	r6, r1
 8000b4c:	d110      	bne.n	8000b70 <I2C_ITAddrCplt.isra.8+0x5e>
        hi2c->AddrEventCount++;
 8000b4e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000b50:	3101      	adds	r1, #1
 8000b52:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8000b54:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000b56:	2902      	cmp	r1, #2
 8000b58:	d109      	bne.n	8000b6e <I2C_ITAddrCplt.isra.8+0x5c>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000b5a:	3106      	adds	r1, #6
          hi2c->AddrEventCount = 0U;
 8000b5c:	6486      	str	r6, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000b5e:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8000b60:	0003      	movs	r3, r0
 8000b62:	3340      	adds	r3, #64	; 0x40
 8000b64:	701e      	strb	r6, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000b66:	0029      	movs	r1, r5
 8000b68:	0020      	movs	r0, r4
 8000b6a:	f7ff ffd1 	bl	8000b10 <HAL_I2C_AddrCallback>
}
 8000b6e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8000b70:	2104      	movs	r1, #4
 8000b72:	f7ff ff13 	bl	800099c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8000b76:	0023      	movs	r3, r4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	3340      	adds	r3, #64	; 0x40
 8000b7c:	701a      	strb	r2, [r3, #0]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000b7e:	9a01      	ldr	r2, [sp, #4]
 8000b80:	403a      	ands	r2, r7
 8000b82:	e7f0      	b.n	8000b66 <I2C_ITAddrCplt.isra.8+0x54>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8000b84:	2104      	movs	r1, #4
 8000b86:	f7ff ff09 	bl	800099c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8000b8a:	0023      	movs	r3, r4
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	3340      	adds	r3, #64	; 0x40
 8000b90:	701a      	strb	r2, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000b92:	0032      	movs	r2, r6
 8000b94:	e7e7      	b.n	8000b66 <I2C_ITAddrCplt.isra.8+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000b96:	2208      	movs	r2, #8
 8000b98:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	3440      	adds	r4, #64	; 0x40
 8000b9e:	7023      	strb	r3, [r4, #0]
 8000ba0:	e7e5      	b.n	8000b6e <I2C_ITAddrCplt.isra.8+0x5c>

08000ba2 <HAL_I2C_ListenCpltCallback>:
 8000ba2:	4770      	bx	lr

08000ba4 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000ba4:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <I2C_ITListenCplt+0x64>)
{
 8000ba6:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000ba8:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8000baa:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000bac:	0002      	movs	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 8000bae:	6303      	str	r3, [r0, #48]	; 0x30
{
 8000bb0:	0004      	movs	r4, r0
  hi2c->State = HAL_I2C_STATE_READY;
 8000bb2:	2020      	movs	r0, #32
 8000bb4:	3241      	adds	r2, #65	; 0x41
 8000bb6:	7010      	strb	r0, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000bb8:	7053      	strb	r3, [r2, #1]
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8000bba:	2204      	movs	r2, #4
  hi2c->XferISR = NULL;
 8000bbc:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8000bbe:	4211      	tst	r1, r2
 8000bc0:	d012      	beq.n	8000be8 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000bc2:	6823      	ldr	r3, [r4, #0]
 8000bc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc8:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8000bca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bcc:	3301      	adds	r3, #1
 8000bce:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8000bd0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d008      	beq.n	8000be8 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000bda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000be2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000be4:	431a      	orrs	r2, r3
 8000be6:	6462      	str	r2, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000be8:	2107      	movs	r1, #7
 8000bea:	0020      	movs	r0, r4
 8000bec:	f7ff fed6 	bl	800099c <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000bf0:	2210      	movs	r2, #16
 8000bf2:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8000bf4:	0020      	movs	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000bf6:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8000bf8:	0023      	movs	r3, r4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	3340      	adds	r3, #64	; 0x40
 8000bfe:	701a      	strb	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8000c00:	f7ff ffcf 	bl	8000ba2 <HAL_I2C_ListenCpltCallback>
}
 8000c04:	bd10      	pop	{r4, pc}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	ffff0000 	.word	0xffff0000

08000c0c <HAL_I2C_ErrorCallback>:
 8000c0c:	4770      	bx	lr

08000c0e <HAL_I2C_AbortCpltCallback>:
}
 8000c0e:	4770      	bx	lr

08000c10 <I2C_ITError>:
{
 8000c10:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000c12:	0002      	movs	r2, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8000c14:	0005      	movs	r5, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000c16:	2600      	movs	r6, #0
 8000c18:	3242      	adds	r2, #66	; 0x42
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8000c1a:	3541      	adds	r5, #65	; 0x41
 8000c1c:	782b      	ldrb	r3, [r5, #0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000c1e:	7016      	strb	r6, [r2, #0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8000c20:	4a2f      	ldr	r2, [pc, #188]	; (8000ce0 <I2C_ITError+0xd0>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8000c22:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8000c24:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8000c26:	8546      	strh	r6, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8000c28:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8000c2a:	0004      	movs	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 8000c2c:	4311      	orrs	r1, r2
 8000c2e:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d822      	bhi.n	8000c7a <I2C_ITError+0x6a>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000c34:	2103      	movs	r1, #3
 8000c36:	f7ff feb1 	bl	800099c <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000c3a:	2328      	movs	r3, #40	; 0x28
 8000c3c:	702b      	strb	r3, [r5, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8000c3e:	4b29      	ldr	r3, [pc, #164]	; (8000ce4 <I2C_ITError+0xd4>)
    hi2c->PreviousState = I2C_STATE_NONE;
 8000c40:	6326      	str	r6, [r4, #48]	; 0x30
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8000c42:	2280      	movs	r2, #128	; 0x80
    hi2c->XferISR       = NULL;
 8000c44:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8000c46:	6823      	ldr	r3, [r4, #0]
 8000c48:	01d2      	lsls	r2, r2, #7
 8000c4a:	6819      	ldr	r1, [r3, #0]
 8000c4c:	4011      	ands	r1, r2
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8000c4e:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8000c50:	d01e      	beq.n	8000c90 <I2C_ITError+0x80>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8000c52:	4925      	ldr	r1, [pc, #148]	; (8000ce8 <I2C_ITError+0xd8>)
    if (hi2c->hdmatx != NULL)
 8000c54:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8000c56:	400a      	ands	r2, r1
 8000c58:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	d00c      	beq.n	8000c78 <I2C_ITError+0x68>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8000c5e:	4b23      	ldr	r3, [pc, #140]	; (8000cec <I2C_ITError+0xdc>)
      __HAL_UNLOCK(hi2c);
 8000c60:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8000c62:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8000c64:	0023      	movs	r3, r4
 8000c66:	3340      	adds	r3, #64	; 0x40
 8000c68:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8000c6a:	f7ff fd9d 	bl	80007a8 <HAL_DMA_Abort_IT>
 8000c6e:	2800      	cmp	r0, #0
 8000c70:	d002      	beq.n	8000c78 <I2C_ITError+0x68>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8000c72:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000c74:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000c76:	4798      	blx	r3
}
 8000c78:	bd70      	pop	{r4, r5, r6, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000c7a:	2107      	movs	r1, #7
 8000c7c:	f7ff fe8e 	bl	800099c <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8000c80:	782b      	ldrb	r3, [r5, #0]
 8000c82:	2b60      	cmp	r3, #96	; 0x60
 8000c84:	d001      	beq.n	8000c8a <I2C_ITError+0x7a>
      hi2c->State         = HAL_I2C_STATE_READY;
 8000c86:	2320      	movs	r3, #32
 8000c88:	702b      	strb	r3, [r5, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	6323      	str	r3, [r4, #48]	; 0x30
 8000c8e:	e7d8      	b.n	8000c42 <I2C_ITError+0x32>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8000c90:	2080      	movs	r0, #128	; 0x80
 8000c92:	0200      	lsls	r0, r0, #8
 8000c94:	4002      	ands	r2, r0
 8000c96:	d011      	beq.n	8000cbc <I2C_ITError+0xac>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	4815      	ldr	r0, [pc, #84]	; (8000cf0 <I2C_ITError+0xe0>)
 8000c9c:	4002      	ands	r2, r0
    if (hi2c->hdmarx != NULL)
 8000c9e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8000ca0:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8000ca2:	2800      	cmp	r0, #0
 8000ca4:	d0e8      	beq.n	8000c78 <I2C_ITError+0x68>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <I2C_ITError+0xdc>)
 8000ca8:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8000caa:	0023      	movs	r3, r4
 8000cac:	3340      	adds	r3, #64	; 0x40
 8000cae:	7019      	strb	r1, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8000cb0:	f7ff fd7a 	bl	80007a8 <HAL_DMA_Abort_IT>
 8000cb4:	2800      	cmp	r0, #0
 8000cb6:	d0df      	beq.n	8000c78 <I2C_ITError+0x68>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000cb8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000cba:	e7db      	b.n	8000c74 <I2C_ITError+0x64>
 8000cbc:	0023      	movs	r3, r4
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8000cbe:	7829      	ldrb	r1, [r5, #0]
 8000cc0:	3340      	adds	r3, #64	; 0x40
 8000cc2:	2960      	cmp	r1, #96	; 0x60
 8000cc4:	d106      	bne.n	8000cd4 <I2C_ITError+0xc4>
    hi2c->State = HAL_I2C_STATE_READY;
 8000cc6:	3940      	subs	r1, #64	; 0x40
 8000cc8:	7029      	strb	r1, [r5, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8000cca:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8000ccc:	701a      	strb	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8000cce:	f7ff ff9e 	bl	8000c0e <HAL_I2C_AbortCpltCallback>
 8000cd2:	e7d1      	b.n	8000c78 <I2C_ITError+0x68>
    __HAL_UNLOCK(hi2c);
 8000cd4:	701a      	strb	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8000cd6:	0020      	movs	r0, r4
 8000cd8:	f7ff ff98 	bl	8000c0c <HAL_I2C_ErrorCallback>
}
 8000cdc:	e7cc      	b.n	8000c78 <I2C_ITError+0x68>
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	ffff0000 	.word	0xffff0000
 8000ce4:	08000de9 	.word	0x08000de9
 8000ce8:	ffffbfff 	.word	0xffffbfff
 8000cec:	08000f65 	.word	0x08000f65
 8000cf0:	ffff7fff 	.word	0xffff7fff

08000cf4 <I2C_ITSlaveCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000cf4:	2220      	movs	r2, #32
{
 8000cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf8:	0004      	movs	r4, r0
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000cfa:	2580      	movs	r5, #128	; 0x80
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8000cfc:	6803      	ldr	r3, [r0, #0]
{
 8000cfe:	000f      	movs	r7, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8000d00:	681e      	ldr	r6, [r3, #0]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8000d02:	2107      	movs	r1, #7
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000d04:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8000d06:	f7ff fe49 	bl	800099c <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000d0a:	6823      	ldr	r3, [r4, #0]
 8000d0c:	022d      	lsls	r5, r5, #8
 8000d0e:	685a      	ldr	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8000d10:	4933      	ldr	r1, [pc, #204]	; (8000de0 <I2C_ITSlaveCplt+0xec>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000d12:	432a      	orrs	r2, r5
 8000d14:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8000d16:	685a      	ldr	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8000d18:	0020      	movs	r0, r4
  I2C_RESET_CR2(hi2c);
 8000d1a:	400a      	ands	r2, r1
 8000d1c:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8000d1e:	f7ff fe2f 	bl	8000980 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8000d22:	0473      	lsls	r3, r6, #17
 8000d24:	d538      	bpl.n	8000d98 <I2C_ITSlaveCplt+0xa4>
    if (hi2c->hdmatx != NULL)
 8000d26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d003      	beq.n	8000d34 <I2C_ITSlaveCplt+0x40>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8000d34:	2304      	movs	r3, #4
 8000d36:	421f      	tst	r7, r3
 8000d38:	d010      	beq.n	8000d5c <I2C_ITSlaveCplt+0x68>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8000d3a:	439f      	bics	r7, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000d3c:	6823      	ldr	r3, [r4, #0]
 8000d3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d42:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8000d44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d46:	3301      	adds	r3, #1
 8000d48:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8000d4a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d005      	beq.n	8000d5c <I2C_ITSlaveCplt+0x68>
      hi2c->XferSize--;
 8000d50:	3b01      	subs	r3, #1
 8000d52:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000d54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d56:	3b01      	subs	r3, #1
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8000d5c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <I2C_ITSlaveCplt+0x76>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000d62:	2304      	movs	r3, #4
 8000d64:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000d66:	4313      	orrs	r3, r2
 8000d68:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d6a:	0022      	movs	r2, r4
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	0025      	movs	r5, r4
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d70:	3242      	adds	r2, #66	; 0x42
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d72:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d74:	7013      	strb	r3, [r2, #0]
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8000d76:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 8000d78:	6363      	str	r3, [r4, #52]	; 0x34
 8000d7a:	3541      	adds	r5, #65	; 0x41
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8000d7c:	429e      	cmp	r6, r3
 8000d7e:	d00f      	beq.n	8000da0 <I2C_ITSlaveCplt+0xac>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8000d80:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000d82:	0020      	movs	r0, r4
 8000d84:	f7ff ff44 	bl	8000c10 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8000d88:	782b      	ldrb	r3, [r5, #0]
 8000d8a:	2b28      	cmp	r3, #40	; 0x28
 8000d8c:	d103      	bne.n	8000d96 <I2C_ITSlaveCplt+0xa2>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8000d8e:	0039      	movs	r1, r7
 8000d90:	0020      	movs	r0, r4
 8000d92:	f7ff ff07 	bl	8000ba4 <I2C_ITListenCplt>
}
 8000d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8000d98:	422e      	tst	r6, r5
 8000d9a:	d0cb      	beq.n	8000d34 <I2C_ITSlaveCplt+0x40>
    if (hi2c->hdmarx != NULL)
 8000d9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000d9e:	e7c3      	b.n	8000d28 <I2C_ITSlaveCplt+0x34>
 8000da0:	0027      	movs	r7, r4
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8000da2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000da4:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <I2C_ITSlaveCplt+0xf0>)
 8000da6:	3740      	adds	r7, #64	; 0x40
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d00b      	beq.n	8000dc4 <I2C_ITSlaveCplt+0xd0>
    I2C_ITSlaveSeqCplt(hi2c);
 8000dac:	0020      	movs	r0, r4
 8000dae:	f7ff fe86 	bl	8000abe <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <I2C_ITSlaveCplt+0xf0>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8000db4:	0020      	movs	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000db6:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8000db8:	2320      	movs	r3, #32
 8000dba:	702b      	strb	r3, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000dbc:	703e      	strb	r6, [r7, #0]
    HAL_I2C_ListenCpltCallback(hi2c);
 8000dbe:	f7ff fef0 	bl	8000ba2 <HAL_I2C_ListenCpltCallback>
 8000dc2:	e7e8      	b.n	8000d96 <I2C_ITSlaveCplt+0xa2>
 8000dc4:	2320      	movs	r3, #32
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000dc6:	782a      	ldrb	r2, [r5, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8000dc8:	0020      	movs	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8000dca:	702b      	strb	r3, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000dcc:	703e      	strb	r6, [r7, #0]
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000dce:	2a22      	cmp	r2, #34	; 0x22
 8000dd0:	d102      	bne.n	8000dd8 <I2C_ITSlaveCplt+0xe4>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8000dd2:	f7ff fe73 	bl	8000abc <HAL_I2C_SlaveRxCpltCallback>
 8000dd6:	e7de      	b.n	8000d96 <I2C_ITSlaveCplt+0xa2>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8000dd8:	f7ff fe6f 	bl	8000aba <HAL_I2C_SlaveTxCpltCallback>
}
 8000ddc:	e7db      	b.n	8000d96 <I2C_ITSlaveCplt+0xa2>
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	fe00e800 	.word	0xfe00e800
 8000de4:	ffff0000 	.word	0xffff0000

08000de8 <I2C_Slave_ISR_IT>:
{
 8000de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8000dea:	0007      	movs	r7, r0
 8000dec:	3740      	adds	r7, #64	; 0x40
{
 8000dee:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 8000df0:	783a      	ldrb	r2, [r7, #0]
{
 8000df2:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 8000df4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 8000df6:	000d      	movs	r5, r1
  __HAL_LOCK(hi2c);
 8000df8:	2002      	movs	r0, #2
 8000dfa:	2a01      	cmp	r2, #1
 8000dfc:	d021      	beq.n	8000e42 <I2C_Slave_ISR_IT+0x5a>
 8000dfe:	2201      	movs	r2, #1
 8000e00:	703a      	strb	r2, [r7, #0]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8000e02:	320f      	adds	r2, #15
 8000e04:	4211      	tst	r1, r2
 8000e06:	d03b      	beq.n	8000e80 <I2C_Slave_ISR_IT+0x98>
 8000e08:	4216      	tst	r6, r2
 8000e0a:	d039      	beq.n	8000e80 <I2C_Slave_ISR_IT+0x98>
    if (hi2c->XferCount == 0U)
 8000e0c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8000e0e:	2900      	cmp	r1, #0
 8000e10:	d128      	bne.n	8000e64 <I2C_Slave_ISR_IT+0x7c>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8000e12:	0022      	movs	r2, r4
 8000e14:	3241      	adds	r2, #65	; 0x41
 8000e16:	7811      	ldrb	r1, [r2, #0]
 8000e18:	2928      	cmp	r1, #40	; 0x28
 8000e1a:	d113      	bne.n	8000e44 <I2C_Slave_ISR_IT+0x5c>
 8000e1c:	2180      	movs	r1, #128	; 0x80
 8000e1e:	0489      	lsls	r1, r1, #18
 8000e20:	428b      	cmp	r3, r1
 8000e22:	d10f      	bne.n	8000e44 <I2C_Slave_ISR_IT+0x5c>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8000e24:	0029      	movs	r1, r5
 8000e26:	0020      	movs	r0, r4
 8000e28:	f7ff febc 	bl	8000ba4 <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8000e2c:	2320      	movs	r3, #32
 8000e2e:	421d      	tst	r5, r3
 8000e30:	d005      	beq.n	8000e3e <I2C_Slave_ISR_IT+0x56>
 8000e32:	421e      	tst	r6, r3
 8000e34:	d003      	beq.n	8000e3e <I2C_Slave_ISR_IT+0x56>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8000e36:	0029      	movs	r1, r5
 8000e38:	0020      	movs	r0, r4
 8000e3a:	f7ff ff5b 	bl	8000cf4 <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8000e3e:	2000      	movs	r0, #0
 8000e40:	7038      	strb	r0, [r7, #0]
}
 8000e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e44:	2110      	movs	r1, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8000e46:	7810      	ldrb	r0, [r2, #0]
 8000e48:	6822      	ldr	r2, [r4, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e4a:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8000e4c:	2829      	cmp	r0, #41	; 0x29
 8000e4e:	d1ed      	bne.n	8000e2c <I2C_Slave_ISR_IT+0x44>
 8000e50:	482c      	ldr	r0, [pc, #176]	; (8000f04 <I2C_Slave_ISR_IT+0x11c>)
 8000e52:	4283      	cmp	r3, r0
 8000e54:	d0ea      	beq.n	8000e2c <I2C_Slave_ISR_IT+0x44>
        I2C_Flush_TXDR(hi2c);
 8000e56:	0020      	movs	r0, r4
 8000e58:	f7ff fd92 	bl	8000980 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8000e5c:	0020      	movs	r0, r4
 8000e5e:	f7ff fe2e 	bl	8000abe <I2C_ITSlaveSeqCplt>
 8000e62:	e7e3      	b.n	8000e2c <I2C_Slave_ISR_IT+0x44>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e64:	6821      	ldr	r1, [r4, #0]
 8000e66:	61ca      	str	r2, [r1, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000e68:	2204      	movs	r2, #4
 8000e6a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	6462      	str	r2, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8000e70:	4a25      	ldr	r2, [pc, #148]	; (8000f08 <I2C_Slave_ISR_IT+0x120>)
 8000e72:	4213      	tst	r3, r2
 8000e74:	d1da      	bne.n	8000e2c <I2C_Slave_ISR_IT+0x44>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8000e76:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000e78:	0020      	movs	r0, r4
 8000e7a:	f7ff fec9 	bl	8000c10 <I2C_ITError>
 8000e7e:	e7d5      	b.n	8000e2c <I2C_Slave_ISR_IT+0x44>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8000e80:	2204      	movs	r2, #4
 8000e82:	4215      	tst	r5, r2
 8000e84:	d01a      	beq.n	8000ebc <I2C_Slave_ISR_IT+0xd4>
 8000e86:	4216      	tst	r6, r2
 8000e88:	d018      	beq.n	8000ebc <I2C_Slave_ISR_IT+0xd4>
    if (hi2c->XferCount > 0U)
 8000e8a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8000e8c:	2900      	cmp	r1, #0
 8000e8e:	d00e      	beq.n	8000eae <I2C_Slave_ISR_IT+0xc6>
      tmpITFlags &= ~I2C_FLAG_RXNE;
 8000e90:	4395      	bics	r5, r2
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000e92:	6822      	ldr	r2, [r4, #0]
 8000e94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000e96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000e98:	700a      	strb	r2, [r1, #0]
      hi2c->pBuffPtr++;
 8000e9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e9c:	3201      	adds	r2, #1
 8000e9e:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8000ea0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000ea2:	3a01      	subs	r2, #1
 8000ea4:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000ea6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000ea8:	3a01      	subs	r2, #1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8000eae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	d1bb      	bne.n	8000e2c <I2C_Slave_ISR_IT+0x44>
 8000eb4:	4a13      	ldr	r2, [pc, #76]	; (8000f04 <I2C_Slave_ISR_IT+0x11c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d1d0      	bne.n	8000e5c <I2C_Slave_ISR_IT+0x74>
 8000eba:	e7b7      	b.n	8000e2c <I2C_Slave_ISR_IT+0x44>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8000ebc:	2208      	movs	r2, #8
 8000ebe:	4215      	tst	r5, r2
 8000ec0:	d005      	beq.n	8000ece <I2C_Slave_ISR_IT+0xe6>
 8000ec2:	4216      	tst	r6, r2
 8000ec4:	d003      	beq.n	8000ece <I2C_Slave_ISR_IT+0xe6>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8000ec6:	0020      	movs	r0, r4
 8000ec8:	f7ff fe23 	bl	8000b12 <I2C_ITAddrCplt.isra.8>
 8000ecc:	e7ae      	b.n	8000e2c <I2C_Slave_ISR_IT+0x44>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8000ece:	2202      	movs	r2, #2
 8000ed0:	4215      	tst	r5, r2
 8000ed2:	d0ab      	beq.n	8000e2c <I2C_Slave_ISR_IT+0x44>
 8000ed4:	4216      	tst	r6, r2
 8000ed6:	d0a9      	beq.n	8000e2c <I2C_Slave_ISR_IT+0x44>
    if (hi2c->XferCount > 0U)
 8000ed8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000eda:	2a00      	cmp	r2, #0
 8000edc:	d00d      	beq.n	8000efa <I2C_Slave_ISR_IT+0x112>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000ede:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ee0:	6822      	ldr	r2, [r4, #0]
 8000ee2:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8000ee4:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000ee6:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000ee8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000eea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000eec:	3b01      	subs	r3, #1
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000ef2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	8523      	strh	r3, [r4, #40]	; 0x28
 8000ef8:	e798      	b.n	8000e2c <I2C_Slave_ISR_IT+0x44>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8000efa:	4a03      	ldr	r2, [pc, #12]	; (8000f08 <I2C_Slave_ISR_IT+0x120>)
 8000efc:	4213      	tst	r3, r2
 8000efe:	d000      	beq.n	8000f02 <I2C_Slave_ISR_IT+0x11a>
 8000f00:	e794      	b.n	8000e2c <I2C_Slave_ISR_IT+0x44>
 8000f02:	e7ab      	b.n	8000e5c <I2C_Slave_ISR_IT+0x74>
 8000f04:	ffff0000 	.word	0xffff0000
 8000f08:	feffffff 	.word	0xfeffffff

08000f0c <HAL_I2C_ER_IRQHandler>:
{
 8000f0c:	b570      	push	{r4, r5, r6, lr}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8000f0e:	2580      	movs	r5, #128	; 0x80
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000f10:	6803      	ldr	r3, [r0, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8000f12:	006d      	lsls	r5, r5, #1
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000f14:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8000f16:	681a      	ldr	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8000f18:	4229      	tst	r1, r5
 8000f1a:	d006      	beq.n	8000f2a <HAL_I2C_ER_IRQHandler+0x1e>
 8000f1c:	0614      	lsls	r4, r2, #24
 8000f1e:	d504      	bpl.n	8000f2a <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8000f20:	2401      	movs	r4, #1
 8000f22:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8000f24:	4334      	orrs	r4, r6
 8000f26:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8000f28:	61dd      	str	r5, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8000f2a:	2580      	movs	r5, #128	; 0x80
 8000f2c:	00ed      	lsls	r5, r5, #3
 8000f2e:	4229      	tst	r1, r5
 8000f30:	d006      	beq.n	8000f40 <HAL_I2C_ER_IRQHandler+0x34>
 8000f32:	0614      	lsls	r4, r2, #24
 8000f34:	d504      	bpl.n	8000f40 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8000f36:	2408      	movs	r4, #8
 8000f38:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8000f3a:	4334      	orrs	r4, r6
 8000f3c:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8000f3e:	61dd      	str	r5, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8000f40:	2480      	movs	r4, #128	; 0x80
 8000f42:	00a4      	lsls	r4, r4, #2
 8000f44:	4221      	tst	r1, r4
 8000f46:	d006      	beq.n	8000f56 <HAL_I2C_ER_IRQHandler+0x4a>
 8000f48:	0612      	lsls	r2, r2, #24
 8000f4a:	d504      	bpl.n	8000f56 <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8000f50:	430a      	orrs	r2, r1
 8000f52:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8000f54:	61dc      	str	r4, [r3, #28]
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8000f56:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 8000f58:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8000f5a:	4219      	tst	r1, r3
 8000f5c:	d001      	beq.n	8000f62 <HAL_I2C_ER_IRQHandler+0x56>
    I2C_ITError(hi2c, tmperror);
 8000f5e:	f7ff fe57 	bl	8000c10 <I2C_ITError>
}
 8000f62:	bd70      	pop	{r4, r5, r6, pc}

08000f64 <I2C_DMAAbort>:
  hi2c->hdmatx->XferAbortCallback = NULL;
 8000f64:	2300      	movs	r3, #0
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8000f66:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8000f68:	b510      	push	{r4, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 8000f6a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000f6c:	6393      	str	r3, [r2, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8000f6e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000f70:	6393      	str	r3, [r2, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8000f72:	0003      	movs	r3, r0
 8000f74:	3341      	adds	r3, #65	; 0x41
 8000f76:	781a      	ldrb	r2, [r3, #0]
 8000f78:	2a60      	cmp	r2, #96	; 0x60
 8000f7a:	d104      	bne.n	8000f86 <I2C_DMAAbort+0x22>
    hi2c->State = HAL_I2C_STATE_READY;
 8000f7c:	3a40      	subs	r2, #64	; 0x40
 8000f7e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8000f80:	f7ff fe45 	bl	8000c0e <HAL_I2C_AbortCpltCallback>
}
 8000f84:	bd10      	pop	{r4, pc}
    HAL_I2C_ErrorCallback(hi2c);
 8000f86:	f7ff fe41 	bl	8000c0c <HAL_I2C_ErrorCallback>
}
 8000f8a:	e7fb      	b.n	8000f84 <I2C_DMAAbort+0x20>

08000f8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f8e:	0004      	movs	r4, r0
 8000f90:	3441      	adds	r4, #65	; 0x41
 8000f92:	7822      	ldrb	r2, [r4, #0]
{
 8000f94:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f96:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000f98:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f9a:	2a20      	cmp	r2, #32
 8000f9c:	d118      	bne.n	8000fd0 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8000f9e:	001d      	movs	r5, r3
 8000fa0:	3540      	adds	r5, #64	; 0x40
 8000fa2:	782e      	ldrb	r6, [r5, #0]
 8000fa4:	2e01      	cmp	r6, #1
 8000fa6:	d013      	beq.n	8000fd0 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8000fa8:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000faa:	3022      	adds	r0, #34	; 0x22
 8000fac:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000fae:	681e      	ldr	r6, [r3, #0]
 8000fb0:	3823      	subs	r0, #35	; 0x23
 8000fb2:	4386      	bics	r6, r0
 8000fb4:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000fb6:	681e      	ldr	r6, [r3, #0]
 8000fb8:	4f06      	ldr	r7, [pc, #24]	; (8000fd4 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8000fba:	403e      	ands	r6, r7
 8000fbc:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8000fbe:	681e      	ldr	r6, [r3, #0]
 8000fc0:	4331      	orrs	r1, r6
 8000fc2:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000fc4:	6819      	ldr	r1, [r3, #0]
 8000fc6:	4308      	orrs	r0, r1
 8000fc8:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000fca:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000fcc:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8000fce:	7028      	strb	r0, [r5, #0]
  }
}
 8000fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	ffffefff 	.word	0xffffefff

08000fd8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000fd8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fda:	0005      	movs	r5, r0
 8000fdc:	3541      	adds	r5, #65	; 0x41
 8000fde:	782a      	ldrb	r2, [r5, #0]
{
 8000fe0:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fe2:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000fe4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fe6:	2a20      	cmp	r2, #32
 8000fe8:	d117      	bne.n	800101a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8000fea:	001c      	movs	r4, r3
 8000fec:	3440      	adds	r4, #64	; 0x40
 8000fee:	7826      	ldrb	r6, [r4, #0]
 8000ff0:	2e01      	cmp	r6, #1
 8000ff2:	d012      	beq.n	800101a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8000ff4:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000ff6:	3022      	adds	r0, #34	; 0x22
 8000ff8:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000ffa:	681e      	ldr	r6, [r3, #0]
 8000ffc:	3823      	subs	r0, #35	; 0x23
 8000ffe:	4386      	bics	r6, r0
 8001000:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8001002:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8001004:	4f05      	ldr	r7, [pc, #20]	; (800101c <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8001006:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8001008:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 800100a:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 800100c:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800100e:	6819      	ldr	r1, [r3, #0]
 8001010:	4308      	orrs	r0, r1
 8001012:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001014:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001016:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8001018:	7020      	strb	r0, [r4, #0]
  }
}
 800101a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800101c:	fffff0ff 	.word	0xfffff0ff

08001020 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001020:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001022:	4c10      	ldr	r4, [pc, #64]	; (8001064 <HAL_PWREx_ControlVoltageScaling+0x44>)
 8001024:	4910      	ldr	r1, [pc, #64]	; (8001068 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8001026:	6823      	ldr	r3, [r4, #0]
{
 8001028:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800102a:	400b      	ands	r3, r1
 800102c:	4303      	orrs	r3, r0
 800102e:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001030:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001032:	2000      	movs	r0, #0
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	429a      	cmp	r2, r3
 8001038:	d10c      	bne.n	8001054 <HAL_PWREx_ControlVoltageScaling+0x34>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <HAL_PWREx_ControlVoltageScaling+0x4c>)
 800103c:	490c      	ldr	r1, [pc, #48]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0x50>)
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	2306      	movs	r3, #6
 8001042:	4358      	muls	r0, r3
 8001044:	f7ff f87a 	bl	800013c <__udivsi3>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001048:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800104a:	1c43      	adds	r3, r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800104c:	00d2      	lsls	r2, r2, #3
 800104e:	6960      	ldr	r0, [r4, #20]
 8001050:	4010      	ands	r0, r2
 8001052:	d100      	bne.n	8001056 <HAL_PWREx_ControlVoltageScaling+0x36>
}
 8001054:	bd10      	pop	{r4, pc}
      if(wait_loop_index != 0U)
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_PWREx_ControlVoltageScaling+0x3e>
        wait_loop_index--;
 800105a:	3b01      	subs	r3, #1
 800105c:	e7f7      	b.n	800104e <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 800105e:	2003      	movs	r0, #3
 8001060:	e7f8      	b.n	8001054 <HAL_PWREx_ControlVoltageScaling+0x34>
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	40007000 	.word	0x40007000
 8001068:	fffff9ff 	.word	0xfffff9ff
 800106c:	2000003c 	.word	0x2000003c
 8001070:	000f4240 	.word	0x000f4240

08001074 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001076:	0004      	movs	r4, r0
 8001078:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800107a:	2800      	cmp	r0, #0
 800107c:	d102      	bne.n	8001084 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800107e:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8001080:	b005      	add	sp, #20
 8001082:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001084:	6803      	ldr	r3, [r0, #0]
 8001086:	07db      	lsls	r3, r3, #31
 8001088:	d410      	bmi.n	80010ac <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800108a:	6823      	ldr	r3, [r4, #0]
 800108c:	079b      	lsls	r3, r3, #30
 800108e:	d45c      	bmi.n	800114a <HAL_RCC_OscConfig+0xd6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001090:	6823      	ldr	r3, [r4, #0]
 8001092:	071b      	lsls	r3, r3, #28
 8001094:	d500      	bpl.n	8001098 <HAL_RCC_OscConfig+0x24>
 8001096:	e0c2      	b.n	800121e <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001098:	6823      	ldr	r3, [r4, #0]
 800109a:	075b      	lsls	r3, r3, #29
 800109c:	d500      	bpl.n	80010a0 <HAL_RCC_OscConfig+0x2c>
 800109e:	e0f4      	b.n	800128a <HAL_RCC_OscConfig+0x216>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80010a0:	69e2      	ldr	r2, [r4, #28]
 80010a2:	2a00      	cmp	r2, #0
 80010a4:	d000      	beq.n	80010a8 <HAL_RCC_OscConfig+0x34>
 80010a6:	e173      	b.n	8001390 <HAL_RCC_OscConfig+0x31c>
  return HAL_OK;
 80010a8:	2000      	movs	r0, #0
 80010aa:	e7e9      	b.n	8001080 <HAL_RCC_OscConfig+0xc>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010ac:	2238      	movs	r2, #56	; 0x38
 80010ae:	4dac      	ldr	r5, [pc, #688]	; (8001360 <HAL_RCC_OscConfig+0x2ec>)
 80010b0:	68ab      	ldr	r3, [r5, #8]
 80010b2:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010b4:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80010b6:	2b10      	cmp	r3, #16
 80010b8:	d109      	bne.n	80010ce <HAL_RCC_OscConfig+0x5a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010ba:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80010bc:	0793      	lsls	r3, r2, #30
 80010be:	d108      	bne.n	80010d2 <HAL_RCC_OscConfig+0x5e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c0:	682b      	ldr	r3, [r5, #0]
 80010c2:	039b      	lsls	r3, r3, #14
 80010c4:	d5e1      	bpl.n	800108a <HAL_RCC_OscConfig+0x16>
 80010c6:	6863      	ldr	r3, [r4, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1de      	bne.n	800108a <HAL_RCC_OscConfig+0x16>
 80010cc:	e7d7      	b.n	800107e <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80010ce:	2b08      	cmp	r3, #8
 80010d0:	d0f6      	beq.n	80010c0 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d2:	2280      	movs	r2, #128	; 0x80
 80010d4:	6863      	ldr	r3, [r4, #4]
 80010d6:	0252      	lsls	r2, r2, #9
 80010d8:	4293      	cmp	r3, r2
 80010da:	d111      	bne.n	8001100 <HAL_RCC_OscConfig+0x8c>
 80010dc:	682a      	ldr	r2, [r5, #0]
 80010de:	4313      	orrs	r3, r2
 80010e0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010e2:	f7ff faf3 	bl	80006cc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010e6:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80010e8:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010ea:	02b6      	lsls	r6, r6, #10
 80010ec:	682b      	ldr	r3, [r5, #0]
 80010ee:	4233      	tst	r3, r6
 80010f0:	d1cb      	bne.n	800108a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f2:	f7ff faeb 	bl	80006cc <HAL_GetTick>
 80010f6:	1bc0      	subs	r0, r0, r7
 80010f8:	2864      	cmp	r0, #100	; 0x64
 80010fa:	d9f7      	bls.n	80010ec <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 80010fc:	2003      	movs	r0, #3
 80010fe:	e7bf      	b.n	8001080 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001100:	21a0      	movs	r1, #160	; 0xa0
 8001102:	02c9      	lsls	r1, r1, #11
 8001104:	428b      	cmp	r3, r1
 8001106:	d108      	bne.n	800111a <HAL_RCC_OscConfig+0xa6>
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	6829      	ldr	r1, [r5, #0]
 800110c:	02db      	lsls	r3, r3, #11
 800110e:	430b      	orrs	r3, r1
 8001110:	602b      	str	r3, [r5, #0]
 8001112:	682b      	ldr	r3, [r5, #0]
 8001114:	431a      	orrs	r2, r3
 8001116:	602a      	str	r2, [r5, #0]
 8001118:	e7e3      	b.n	80010e2 <HAL_RCC_OscConfig+0x6e>
 800111a:	682a      	ldr	r2, [r5, #0]
 800111c:	4991      	ldr	r1, [pc, #580]	; (8001364 <HAL_RCC_OscConfig+0x2f0>)
 800111e:	400a      	ands	r2, r1
 8001120:	602a      	str	r2, [r5, #0]
 8001122:	682a      	ldr	r2, [r5, #0]
 8001124:	4990      	ldr	r1, [pc, #576]	; (8001368 <HAL_RCC_OscConfig+0x2f4>)
 8001126:	400a      	ands	r2, r1
 8001128:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1d9      	bne.n	80010e2 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 800112e:	f7ff facd 	bl	80006cc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001132:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001134:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001136:	02b6      	lsls	r6, r6, #10
 8001138:	682b      	ldr	r3, [r5, #0]
 800113a:	4233      	tst	r3, r6
 800113c:	d0a5      	beq.n	800108a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800113e:	f7ff fac5 	bl	80006cc <HAL_GetTick>
 8001142:	1bc0      	subs	r0, r0, r7
 8001144:	2864      	cmp	r0, #100	; 0x64
 8001146:	d9f7      	bls.n	8001138 <HAL_RCC_OscConfig+0xc4>
 8001148:	e7d8      	b.n	80010fc <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800114a:	2338      	movs	r3, #56	; 0x38
 800114c:	4d84      	ldr	r5, [pc, #528]	; (8001360 <HAL_RCC_OscConfig+0x2ec>)
 800114e:	68aa      	ldr	r2, [r5, #8]
 8001150:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001152:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001154:	2b10      	cmp	r3, #16
 8001156:	d129      	bne.n	80011ac <HAL_RCC_OscConfig+0x138>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001158:	2103      	movs	r1, #3
 800115a:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800115c:	2a02      	cmp	r2, #2
 800115e:	d127      	bne.n	80011b0 <HAL_RCC_OscConfig+0x13c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001160:	682a      	ldr	r2, [r5, #0]
 8001162:	0552      	lsls	r2, r2, #21
 8001164:	d503      	bpl.n	800116e <HAL_RCC_OscConfig+0xfa>
 8001166:	68e2      	ldr	r2, [r4, #12]
 8001168:	2a00      	cmp	r2, #0
 800116a:	d100      	bne.n	800116e <HAL_RCC_OscConfig+0xfa>
 800116c:	e787      	b.n	800107e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800116e:	6869      	ldr	r1, [r5, #4]
 8001170:	6962      	ldr	r2, [r4, #20]
 8001172:	487e      	ldr	r0, [pc, #504]	; (800136c <HAL_RCC_OscConfig+0x2f8>)
 8001174:	0212      	lsls	r2, r2, #8
 8001176:	4001      	ands	r1, r0
 8001178:	430a      	orrs	r2, r1
 800117a:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10d      	bne.n	800119c <HAL_RCC_OscConfig+0x128>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001180:	682b      	ldr	r3, [r5, #0]
 8001182:	4a7b      	ldr	r2, [pc, #492]	; (8001370 <HAL_RCC_OscConfig+0x2fc>)
 8001184:	4013      	ands	r3, r2
 8001186:	6922      	ldr	r2, [r4, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800118c:	682b      	ldr	r3, [r5, #0]
 800118e:	4a79      	ldr	r2, [pc, #484]	; (8001374 <HAL_RCC_OscConfig+0x300>)
 8001190:	049b      	lsls	r3, r3, #18
 8001192:	0f5b      	lsrs	r3, r3, #29
 8001194:	40da      	lsrs	r2, r3
 8001196:	0013      	movs	r3, r2
 8001198:	4a77      	ldr	r2, [pc, #476]	; (8001378 <HAL_RCC_OscConfig+0x304>)
 800119a:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800119c:	4b77      	ldr	r3, [pc, #476]	; (800137c <HAL_RCC_OscConfig+0x308>)
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	f7ff fa4c 	bl	800063c <HAL_InitTick>
 80011a4:	2800      	cmp	r0, #0
 80011a6:	d100      	bne.n	80011aa <HAL_RCC_OscConfig+0x136>
 80011a8:	e772      	b.n	8001090 <HAL_RCC_OscConfig+0x1c>
 80011aa:	e768      	b.n	800107e <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0d7      	beq.n	8001160 <HAL_RCC_OscConfig+0xec>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011b0:	68e3      	ldr	r3, [r4, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d020      	beq.n	80011f8 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011b6:	682b      	ldr	r3, [r5, #0]
 80011b8:	4a6d      	ldr	r2, [pc, #436]	; (8001370 <HAL_RCC_OscConfig+0x2fc>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011ba:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011bc:	4013      	ands	r3, r2
 80011be:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011c0:	00f6      	lsls	r6, r6, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011c2:	4313      	orrs	r3, r2
 80011c4:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	682a      	ldr	r2, [r5, #0]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	4313      	orrs	r3, r2
 80011ce:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011d0:	f7ff fa7c 	bl	80006cc <HAL_GetTick>
 80011d4:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011d6:	682b      	ldr	r3, [r5, #0]
 80011d8:	4233      	tst	r3, r6
 80011da:	d007      	beq.n	80011ec <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011dc:	686a      	ldr	r2, [r5, #4]
 80011de:	6963      	ldr	r3, [r4, #20]
 80011e0:	4962      	ldr	r1, [pc, #392]	; (800136c <HAL_RCC_OscConfig+0x2f8>)
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	400a      	ands	r2, r1
 80011e6:	4313      	orrs	r3, r2
 80011e8:	606b      	str	r3, [r5, #4]
 80011ea:	e751      	b.n	8001090 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ec:	f7ff fa6e 	bl	80006cc <HAL_GetTick>
 80011f0:	1bc0      	subs	r0, r0, r7
 80011f2:	2802      	cmp	r0, #2
 80011f4:	d9ef      	bls.n	80011d6 <HAL_RCC_OscConfig+0x162>
 80011f6:	e781      	b.n	80010fc <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 80011f8:	682b      	ldr	r3, [r5, #0]
 80011fa:	4a61      	ldr	r2, [pc, #388]	; (8001380 <HAL_RCC_OscConfig+0x30c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011fc:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 80011fe:	4013      	ands	r3, r2
 8001200:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001202:	f7ff fa63 	bl	80006cc <HAL_GetTick>
 8001206:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001208:	00f6      	lsls	r6, r6, #3
 800120a:	682b      	ldr	r3, [r5, #0]
 800120c:	4233      	tst	r3, r6
 800120e:	d100      	bne.n	8001212 <HAL_RCC_OscConfig+0x19e>
 8001210:	e73e      	b.n	8001090 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001212:	f7ff fa5b 	bl	80006cc <HAL_GetTick>
 8001216:	1bc0      	subs	r0, r0, r7
 8001218:	2802      	cmp	r0, #2
 800121a:	d9f6      	bls.n	800120a <HAL_RCC_OscConfig+0x196>
 800121c:	e76e      	b.n	80010fc <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800121e:	2138      	movs	r1, #56	; 0x38
 8001220:	4b4f      	ldr	r3, [pc, #316]	; (8001360 <HAL_RCC_OscConfig+0x2ec>)
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	001d      	movs	r5, r3
 8001226:	400a      	ands	r2, r1
 8001228:	2a18      	cmp	r2, #24
 800122a:	d108      	bne.n	800123e <HAL_RCC_OscConfig+0x1ca>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800122c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800122e:	079b      	lsls	r3, r3, #30
 8001230:	d400      	bmi.n	8001234 <HAL_RCC_OscConfig+0x1c0>
 8001232:	e731      	b.n	8001098 <HAL_RCC_OscConfig+0x24>
 8001234:	69a3      	ldr	r3, [r4, #24]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d000      	beq.n	800123c <HAL_RCC_OscConfig+0x1c8>
 800123a:	e72d      	b.n	8001098 <HAL_RCC_OscConfig+0x24>
 800123c:	e71f      	b.n	800107e <HAL_RCC_OscConfig+0xa>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800123e:	69a2      	ldr	r2, [r4, #24]
 8001240:	2301      	movs	r3, #1
 8001242:	2a00      	cmp	r2, #0
 8001244:	d010      	beq.n	8001268 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_LSI_ENABLE();
 8001246:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001248:	2602      	movs	r6, #2
        __HAL_RCC_LSI_ENABLE();
 800124a:	4313      	orrs	r3, r2
 800124c:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 800124e:	f7ff fa3d 	bl	80006cc <HAL_GetTick>
 8001252:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001254:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001256:	4233      	tst	r3, r6
 8001258:	d000      	beq.n	800125c <HAL_RCC_OscConfig+0x1e8>
 800125a:	e71d      	b.n	8001098 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800125c:	f7ff fa36 	bl	80006cc <HAL_GetTick>
 8001260:	1bc0      	subs	r0, r0, r7
 8001262:	2802      	cmp	r0, #2
 8001264:	d9f6      	bls.n	8001254 <HAL_RCC_OscConfig+0x1e0>
 8001266:	e749      	b.n	80010fc <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_LSI_DISABLE();
 8001268:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800126a:	2602      	movs	r6, #2
        __HAL_RCC_LSI_DISABLE();
 800126c:	439a      	bics	r2, r3
 800126e:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001270:	f7ff fa2c 	bl	80006cc <HAL_GetTick>
 8001274:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001276:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001278:	4233      	tst	r3, r6
 800127a:	d100      	bne.n	800127e <HAL_RCC_OscConfig+0x20a>
 800127c:	e70c      	b.n	8001098 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800127e:	f7ff fa25 	bl	80006cc <HAL_GetTick>
 8001282:	1bc0      	subs	r0, r0, r7
 8001284:	2802      	cmp	r0, #2
 8001286:	d9f6      	bls.n	8001276 <HAL_RCC_OscConfig+0x202>
 8001288:	e738      	b.n	80010fc <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800128a:	2138      	movs	r1, #56	; 0x38
 800128c:	4b34      	ldr	r3, [pc, #208]	; (8001360 <HAL_RCC_OscConfig+0x2ec>)
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	001d      	movs	r5, r3
 8001292:	400a      	ands	r2, r1
 8001294:	2a20      	cmp	r2, #32
 8001296:	d108      	bne.n	80012aa <HAL_RCC_OscConfig+0x236>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800129a:	079b      	lsls	r3, r3, #30
 800129c:	d400      	bmi.n	80012a0 <HAL_RCC_OscConfig+0x22c>
 800129e:	e6ff      	b.n	80010a0 <HAL_RCC_OscConfig+0x2c>
 80012a0:	68a3      	ldr	r3, [r4, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d000      	beq.n	80012a8 <HAL_RCC_OscConfig+0x234>
 80012a6:	e6fb      	b.n	80010a0 <HAL_RCC_OscConfig+0x2c>
 80012a8:	e6e9      	b.n	800107e <HAL_RCC_OscConfig+0xa>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80012aa:	2280      	movs	r2, #128	; 0x80
 80012ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ae:	0552      	lsls	r2, r2, #21
 80012b0:	4213      	tst	r3, r2
 80012b2:	d100      	bne.n	80012b6 <HAL_RCC_OscConfig+0x242>
 80012b4:	e0f6      	b.n	80014a4 <HAL_RCC_OscConfig+0x430>
    FlagStatus       pwrclkchanged = RESET;
 80012b6:	2300      	movs	r3, #0
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012b8:	2780      	movs	r7, #128	; 0x80
 80012ba:	4e32      	ldr	r6, [pc, #200]	; (8001384 <HAL_RCC_OscConfig+0x310>)
    FlagStatus       pwrclkchanged = RESET;
 80012bc:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012be:	6833      	ldr	r3, [r6, #0]
 80012c0:	007f      	lsls	r7, r7, #1
 80012c2:	423b      	tst	r3, r7
 80012c4:	d015      	beq.n	80012f2 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c6:	68a3      	ldr	r3, [r4, #8]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d122      	bne.n	8001312 <HAL_RCC_OscConfig+0x29e>
 80012cc:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80012ce:	4313      	orrs	r3, r2
 80012d0:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 80012d2:	f7ff f9fb 	bl	80006cc <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012d6:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80012d8:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012da:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80012dc:	423b      	tst	r3, r7
 80012de:	d038      	beq.n	8001352 <HAL_RCC_OscConfig+0x2de>
      if (pwrclkchanged == SET)
 80012e0:	9b00      	ldr	r3, [sp, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d000      	beq.n	80012e8 <HAL_RCC_OscConfig+0x274>
 80012e6:	e6db      	b.n	80010a0 <HAL_RCC_OscConfig+0x2c>
        __HAL_RCC_PWR_CLK_DISABLE();
 80012e8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80012ea:	4a27      	ldr	r2, [pc, #156]	; (8001388 <HAL_RCC_OscConfig+0x314>)
 80012ec:	4013      	ands	r3, r2
 80012ee:	63eb      	str	r3, [r5, #60]	; 0x3c
 80012f0:	e6d6      	b.n	80010a0 <HAL_RCC_OscConfig+0x2c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012f2:	6833      	ldr	r3, [r6, #0]
 80012f4:	433b      	orrs	r3, r7
 80012f6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80012f8:	f7ff f9e8 	bl	80006cc <HAL_GetTick>
 80012fc:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012fe:	6833      	ldr	r3, [r6, #0]
 8001300:	423b      	tst	r3, r7
 8001302:	d1e0      	bne.n	80012c6 <HAL_RCC_OscConfig+0x252>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001304:	f7ff f9e2 	bl	80006cc <HAL_GetTick>
 8001308:	9b01      	ldr	r3, [sp, #4]
 800130a:	1ac0      	subs	r0, r0, r3
 800130c:	2802      	cmp	r0, #2
 800130e:	d9f6      	bls.n	80012fe <HAL_RCC_OscConfig+0x28a>
 8001310:	e6f4      	b.n	80010fc <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001312:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001314:	2b05      	cmp	r3, #5
 8001316:	d105      	bne.n	8001324 <HAL_RCC_OscConfig+0x2b0>
 8001318:	3b01      	subs	r3, #1
 800131a:	4313      	orrs	r3, r2
 800131c:	65eb      	str	r3, [r5, #92]	; 0x5c
 800131e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001320:	2301      	movs	r3, #1
 8001322:	e7d4      	b.n	80012ce <HAL_RCC_OscConfig+0x25a>
 8001324:	2101      	movs	r1, #1
 8001326:	438a      	bics	r2, r1
 8001328:	65ea      	str	r2, [r5, #92]	; 0x5c
 800132a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800132c:	3103      	adds	r1, #3
 800132e:	438a      	bics	r2, r1
 8001330:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1cd      	bne.n	80012d2 <HAL_RCC_OscConfig+0x25e>
        tickstart = HAL_GetTick();
 8001336:	f7ff f9c9 	bl	80006cc <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800133a:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 800133c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800133e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001340:	423b      	tst	r3, r7
 8001342:	d0cd      	beq.n	80012e0 <HAL_RCC_OscConfig+0x26c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001344:	f7ff f9c2 	bl	80006cc <HAL_GetTick>
 8001348:	4b10      	ldr	r3, [pc, #64]	; (800138c <HAL_RCC_OscConfig+0x318>)
 800134a:	1b80      	subs	r0, r0, r6
 800134c:	4298      	cmp	r0, r3
 800134e:	d9f6      	bls.n	800133e <HAL_RCC_OscConfig+0x2ca>
 8001350:	e6d4      	b.n	80010fc <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001352:	f7ff f9bb 	bl	80006cc <HAL_GetTick>
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <HAL_RCC_OscConfig+0x318>)
 8001358:	1b80      	subs	r0, r0, r6
 800135a:	4298      	cmp	r0, r3
 800135c:	d9bd      	bls.n	80012da <HAL_RCC_OscConfig+0x266>
 800135e:	e6cd      	b.n	80010fc <HAL_RCC_OscConfig+0x88>
 8001360:	40021000 	.word	0x40021000
 8001364:	fffeffff 	.word	0xfffeffff
 8001368:	fffbffff 	.word	0xfffbffff
 800136c:	ffff80ff 	.word	0xffff80ff
 8001370:	ffffc7ff 	.word	0xffffc7ff
 8001374:	00f42400 	.word	0x00f42400
 8001378:	2000003c 	.word	0x2000003c
 800137c:	20000004 	.word	0x20000004
 8001380:	fffffeff 	.word	0xfffffeff
 8001384:	40007000 	.word	0x40007000
 8001388:	efffffff 	.word	0xefffffff
 800138c:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001390:	2038      	movs	r0, #56	; 0x38
 8001392:	4b49      	ldr	r3, [pc, #292]	; (80014b8 <HAL_RCC_OscConfig+0x444>)
 8001394:	6899      	ldr	r1, [r3, #8]
 8001396:	001d      	movs	r5, r3
 8001398:	4001      	ands	r1, r0
 800139a:	2910      	cmp	r1, #16
 800139c:	d054      	beq.n	8001448 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_PLL_DISABLE();
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4946      	ldr	r1, [pc, #280]	; (80014bc <HAL_RCC_OscConfig+0x448>)
 80013a2:	400b      	ands	r3, r1
 80013a4:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013a6:	2a02      	cmp	r2, #2
 80013a8:	d137      	bne.n	800141a <HAL_RCC_OscConfig+0x3a6>
        tickstart = HAL_GetTick();
 80013aa:	f7ff f98f 	bl	80006cc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013ae:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80013b0:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013b2:	04b6      	lsls	r6, r6, #18
 80013b4:	682b      	ldr	r3, [r5, #0]
 80013b6:	4233      	tst	r3, r6
 80013b8:	d129      	bne.n	800140e <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80013bc:	6a23      	ldr	r3, [r4, #32]
 80013be:	68ea      	ldr	r2, [r5, #12]
 80013c0:	430b      	orrs	r3, r1
 80013c2:	493f      	ldr	r1, [pc, #252]	; (80014c0 <HAL_RCC_OscConfig+0x44c>)
 80013c4:	400a      	ands	r2, r1
 80013c6:	4313      	orrs	r3, r2
 80013c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013ca:	4313      	orrs	r3, r2
 80013cc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80013ce:	4313      	orrs	r3, r2
 80013d0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80013d2:	4313      	orrs	r3, r2
 80013d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013d6:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013d8:	0212      	lsls	r2, r2, #8
 80013da:	4313      	orrs	r3, r2
 80013dc:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80013de:	2380      	movs	r3, #128	; 0x80
 80013e0:	682a      	ldr	r2, [r5, #0]
 80013e2:	045b      	lsls	r3, r3, #17
 80013e4:	4313      	orrs	r3, r2
 80013e6:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	68ea      	ldr	r2, [r5, #12]
 80013ec:	055b      	lsls	r3, r3, #21
 80013ee:	4313      	orrs	r3, r2
 80013f0:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80013f2:	f7ff f96b 	bl	80006cc <HAL_GetTick>
 80013f6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013f8:	04a4      	lsls	r4, r4, #18
 80013fa:	682b      	ldr	r3, [r5, #0]
 80013fc:	4223      	tst	r3, r4
 80013fe:	d000      	beq.n	8001402 <HAL_RCC_OscConfig+0x38e>
 8001400:	e652      	b.n	80010a8 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001402:	f7ff f963 	bl	80006cc <HAL_GetTick>
 8001406:	1b80      	subs	r0, r0, r6
 8001408:	2802      	cmp	r0, #2
 800140a:	d9f6      	bls.n	80013fa <HAL_RCC_OscConfig+0x386>
 800140c:	e676      	b.n	80010fc <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800140e:	f7ff f95d 	bl	80006cc <HAL_GetTick>
 8001412:	1bc0      	subs	r0, r0, r7
 8001414:	2802      	cmp	r0, #2
 8001416:	d9cd      	bls.n	80013b4 <HAL_RCC_OscConfig+0x340>
 8001418:	e670      	b.n	80010fc <HAL_RCC_OscConfig+0x88>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800141a:	2203      	movs	r2, #3
 800141c:	68eb      	ldr	r3, [r5, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800141e:	2480      	movs	r4, #128	; 0x80
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001420:	4393      	bics	r3, r2
 8001422:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001424:	68eb      	ldr	r3, [r5, #12]
 8001426:	4a27      	ldr	r2, [pc, #156]	; (80014c4 <HAL_RCC_OscConfig+0x450>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001428:	04a4      	lsls	r4, r4, #18
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800142a:	4013      	ands	r3, r2
 800142c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800142e:	f7ff f94d 	bl	80006cc <HAL_GetTick>
 8001432:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001434:	682b      	ldr	r3, [r5, #0]
 8001436:	4223      	tst	r3, r4
 8001438:	d100      	bne.n	800143c <HAL_RCC_OscConfig+0x3c8>
 800143a:	e635      	b.n	80010a8 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800143c:	f7ff f946 	bl	80006cc <HAL_GetTick>
 8001440:	1b80      	subs	r0, r0, r6
 8001442:	2802      	cmp	r0, #2
 8001444:	d9f6      	bls.n	8001434 <HAL_RCC_OscConfig+0x3c0>
 8001446:	e659      	b.n	80010fc <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001448:	2a01      	cmp	r2, #1
 800144a:	d100      	bne.n	800144e <HAL_RCC_OscConfig+0x3da>
 800144c:	e617      	b.n	800107e <HAL_RCC_OscConfig+0xa>
        temp_pllckcfg = RCC->PLLCFGR;
 800144e:	68d8      	ldr	r0, [r3, #12]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001450:	2303      	movs	r3, #3
 8001452:	6a22      	ldr	r2, [r4, #32]
 8001454:	4003      	ands	r3, r0
 8001456:	4293      	cmp	r3, r2
 8001458:	d000      	beq.n	800145c <HAL_RCC_OscConfig+0x3e8>
 800145a:	e610      	b.n	800107e <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800145c:	2370      	movs	r3, #112	; 0x70
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800145e:	6a62      	ldr	r2, [r4, #36]	; 0x24
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001460:	4003      	ands	r3, r0
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001462:	4293      	cmp	r3, r2
 8001464:	d000      	beq.n	8001468 <HAL_RCC_OscConfig+0x3f4>
 8001466:	e60a      	b.n	800107e <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001468:	22fe      	movs	r2, #254	; 0xfe
 800146a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800146c:	01d2      	lsls	r2, r2, #7
 800146e:	4002      	ands	r2, r0
 8001470:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001472:	429a      	cmp	r2, r3
 8001474:	d000      	beq.n	8001478 <HAL_RCC_OscConfig+0x404>
 8001476:	e602      	b.n	800107e <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001478:	23f8      	movs	r3, #248	; 0xf8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800147a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800147c:	039b      	lsls	r3, r3, #14
 800147e:	4003      	ands	r3, r0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001480:	4293      	cmp	r3, r2
 8001482:	d000      	beq.n	8001486 <HAL_RCC_OscConfig+0x412>
 8001484:	e5fb      	b.n	800107e <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001486:	23e0      	movs	r3, #224	; 0xe0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001488:	6b22      	ldr	r2, [r4, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800148a:	051b      	lsls	r3, r3, #20
 800148c:	4003      	ands	r3, r0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800148e:	4293      	cmp	r3, r2
 8001490:	d000      	beq.n	8001494 <HAL_RCC_OscConfig+0x420>
 8001492:	e5f4      	b.n	800107e <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001494:	6b63      	ldr	r3, [r4, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001496:	0f40      	lsrs	r0, r0, #29
 8001498:	0740      	lsls	r0, r0, #29
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800149a:	1ac0      	subs	r0, r0, r3
 800149c:	1e43      	subs	r3, r0, #1
 800149e:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80014a0:	b2c0      	uxtb	r0, r0
 80014a2:	e5ed      	b.n	8001080 <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_PWR_CLK_ENABLE();
 80014a4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80014a6:	4313      	orrs	r3, r2
 80014a8:	63eb      	str	r3, [r5, #60]	; 0x3c
 80014aa:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80014ac:	4013      	ands	r3, r2
 80014ae:	9303      	str	r3, [sp, #12]
 80014b0:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e700      	b.n	80012b8 <HAL_RCC_OscConfig+0x244>
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	40021000 	.word	0x40021000
 80014bc:	feffffff 	.word	0xfeffffff
 80014c0:	11c1808c 	.word	0x11c1808c
 80014c4:	eefeffff 	.word	0xeefeffff

080014c8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80014c8:	2338      	movs	r3, #56	; 0x38
 80014ca:	4a1f      	ldr	r2, [pc, #124]	; (8001548 <HAL_RCC_GetSysClockFreq+0x80>)
{
 80014cc:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80014ce:	6891      	ldr	r1, [r2, #8]
 80014d0:	0014      	movs	r4, r2
 80014d2:	4219      	tst	r1, r3
 80014d4:	d108      	bne.n	80014e8 <HAL_RCC_GetSysClockFreq+0x20>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80014d6:	2101      	movs	r1, #1
 80014d8:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80014da:	481c      	ldr	r0, [pc, #112]	; (800154c <HAL_RCC_GetSysClockFreq+0x84>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80014dc:	049b      	lsls	r3, r3, #18
 80014de:	0f5b      	lsrs	r3, r3, #29
 80014e0:	4099      	lsls	r1, r3
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
        break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
    sysclockfreq = pllvco / pllr;
 80014e2:	f7fe fe2b 	bl	800013c <__udivsi3>
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80014e6:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80014e8:	6891      	ldr	r1, [r2, #8]
 80014ea:	4019      	ands	r1, r3
 80014ec:	2908      	cmp	r1, #8
 80014ee:	d025      	beq.n	800153c <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80014f0:	6891      	ldr	r1, [r2, #8]
 80014f2:	4019      	ands	r1, r3
 80014f4:	2910      	cmp	r1, #16
 80014f6:	d115      	bne.n	8001524 <HAL_RCC_GetSysClockFreq+0x5c>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80014f8:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014fa:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80014fc:	43db      	mvns	r3, r3
 80014fe:	227f      	movs	r2, #127	; 0x7f
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001500:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001502:	0649      	lsls	r1, r1, #25
 8001504:	0f49      	lsrs	r1, r1, #29
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001506:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001508:	3101      	adds	r1, #1
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800150a:	4015      	ands	r5, r2
    switch (pllsource)
 800150c:	079b      	lsls	r3, r3, #30
 800150e:	d107      	bne.n	8001520 <HAL_RCC_GetSysClockFreq+0x58>
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001510:	480f      	ldr	r0, [pc, #60]	; (8001550 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001512:	f7fe fe13 	bl	800013c <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001516:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001518:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800151a:	0f49      	lsrs	r1, r1, #29
 800151c:	3101      	adds	r1, #1
 800151e:	e7e0      	b.n	80014e2 <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001520:	480a      	ldr	r0, [pc, #40]	; (800154c <HAL_RCC_GetSysClockFreq+0x84>)
 8001522:	e7f6      	b.n	8001512 <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001524:	6891      	ldr	r1, [r2, #8]
 8001526:	4019      	ands	r1, r3
 8001528:	2920      	cmp	r1, #32
 800152a:	d009      	beq.n	8001540 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800152c:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 800152e:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001530:	4013      	ands	r3, r2
 8001532:	2b18      	cmp	r3, #24
 8001534:	d1d7      	bne.n	80014e6 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSI_VALUE;
 8001536:	20fa      	movs	r0, #250	; 0xfa
 8001538:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 800153a:	e7d4      	b.n	80014e6 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = HSE_VALUE;
 800153c:	4804      	ldr	r0, [pc, #16]	; (8001550 <HAL_RCC_GetSysClockFreq+0x88>)
 800153e:	e7d2      	b.n	80014e6 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSE_VALUE;
 8001540:	2080      	movs	r0, #128	; 0x80
 8001542:	0200      	lsls	r0, r0, #8
 8001544:	e7cf      	b.n	80014e6 <HAL_RCC_GetSysClockFreq+0x1e>
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	40021000 	.word	0x40021000
 800154c:	00f42400 	.word	0x00f42400
 8001550:	007a1200 	.word	0x007a1200

08001554 <HAL_RCC_ClockConfig>:
{
 8001554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001556:	0005      	movs	r5, r0
 8001558:	000e      	movs	r6, r1
  if (RCC_ClkInitStruct == NULL)
 800155a:	2800      	cmp	r0, #0
 800155c:	d101      	bne.n	8001562 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800155e:	2001      	movs	r0, #1
}
 8001560:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001562:	2707      	movs	r7, #7
 8001564:	4c4a      	ldr	r4, [pc, #296]	; (8001690 <HAL_RCC_ClockConfig+0x13c>)
 8001566:	6823      	ldr	r3, [r4, #0]
 8001568:	403b      	ands	r3, r7
 800156a:	428b      	cmp	r3, r1
 800156c:	d32a      	bcc.n	80015c4 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800156e:	6829      	ldr	r1, [r5, #0]
 8001570:	078b      	lsls	r3, r1, #30
 8001572:	d43b      	bmi.n	80015ec <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001574:	07cb      	lsls	r3, r1, #31
 8001576:	d448      	bmi.n	800160a <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001578:	2707      	movs	r7, #7
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	403b      	ands	r3, r7
 800157e:	429e      	cmp	r6, r3
 8001580:	d20a      	bcs.n	8001598 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001582:	6823      	ldr	r3, [r4, #0]
 8001584:	43bb      	bics	r3, r7
 8001586:	4333      	orrs	r3, r6
 8001588:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800158a:	f7ff f89f 	bl	80006cc <HAL_GetTick>
 800158e:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001590:	6823      	ldr	r3, [r4, #0]
 8001592:	403b      	ands	r3, r7
 8001594:	429e      	cmp	r6, r3
 8001596:	d16b      	bne.n	8001670 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001598:	682b      	ldr	r3, [r5, #0]
 800159a:	4c3e      	ldr	r4, [pc, #248]	; (8001694 <HAL_RCC_ClockConfig+0x140>)
 800159c:	075b      	lsls	r3, r3, #29
 800159e:	d46f      	bmi.n	8001680 <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80015a0:	f7ff ff92 	bl	80014c8 <HAL_RCC_GetSysClockFreq>
 80015a4:	68a3      	ldr	r3, [r4, #8]
 80015a6:	4a3c      	ldr	r2, [pc, #240]	; (8001698 <HAL_RCC_ClockConfig+0x144>)
 80015a8:	051b      	lsls	r3, r3, #20
 80015aa:	0f1b      	lsrs	r3, r3, #28
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	589b      	ldr	r3, [r3, r2]
 80015b0:	221f      	movs	r2, #31
 80015b2:	4013      	ands	r3, r2
 80015b4:	40d8      	lsrs	r0, r3
 80015b6:	4b39      	ldr	r3, [pc, #228]	; (800169c <HAL_RCC_ClockConfig+0x148>)
 80015b8:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80015ba:	4b39      	ldr	r3, [pc, #228]	; (80016a0 <HAL_RCC_ClockConfig+0x14c>)
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	f7ff f83d 	bl	800063c <HAL_InitTick>
 80015c2:	e7cd      	b.n	8001560 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c4:	6823      	ldr	r3, [r4, #0]
 80015c6:	43bb      	bics	r3, r7
 80015c8:	430b      	orrs	r3, r1
 80015ca:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80015cc:	f7ff f87e 	bl	80006cc <HAL_GetTick>
 80015d0:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015d2:	6823      	ldr	r3, [r4, #0]
 80015d4:	403b      	ands	r3, r7
 80015d6:	429e      	cmp	r6, r3
 80015d8:	d0c9      	beq.n	800156e <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015da:	f7ff f877 	bl	80006cc <HAL_GetTick>
 80015de:	9b01      	ldr	r3, [sp, #4]
 80015e0:	1ac0      	subs	r0, r0, r3
 80015e2:	4b30      	ldr	r3, [pc, #192]	; (80016a4 <HAL_RCC_ClockConfig+0x150>)
 80015e4:	4298      	cmp	r0, r3
 80015e6:	d9f4      	bls.n	80015d2 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 80015e8:	2003      	movs	r0, #3
 80015ea:	e7b9      	b.n	8001560 <HAL_RCC_ClockConfig+0xc>
 80015ec:	4a29      	ldr	r2, [pc, #164]	; (8001694 <HAL_RCC_ClockConfig+0x140>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ee:	074b      	lsls	r3, r1, #29
 80015f0:	d504      	bpl.n	80015fc <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015f2:	23e0      	movs	r3, #224	; 0xe0
 80015f4:	6890      	ldr	r0, [r2, #8]
 80015f6:	01db      	lsls	r3, r3, #7
 80015f8:	4303      	orrs	r3, r0
 80015fa:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015fc:	6893      	ldr	r3, [r2, #8]
 80015fe:	482a      	ldr	r0, [pc, #168]	; (80016a8 <HAL_RCC_ClockConfig+0x154>)
 8001600:	4003      	ands	r3, r0
 8001602:	68a8      	ldr	r0, [r5, #8]
 8001604:	4303      	orrs	r3, r0
 8001606:	6093      	str	r3, [r2, #8]
 8001608:	e7b4      	b.n	8001574 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800160a:	686a      	ldr	r2, [r5, #4]
 800160c:	4f21      	ldr	r7, [pc, #132]	; (8001694 <HAL_RCC_ClockConfig+0x140>)
 800160e:	2a01      	cmp	r2, #1
 8001610:	d119      	bne.n	8001646 <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	039b      	lsls	r3, r3, #14
 8001616:	d5a2      	bpl.n	800155e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001618:	2107      	movs	r1, #7
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	438b      	bics	r3, r1
 800161e:	4313      	orrs	r3, r2
 8001620:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8001622:	f7ff f853 	bl	80006cc <HAL_GetTick>
 8001626:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001628:	2338      	movs	r3, #56	; 0x38
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	401a      	ands	r2, r3
 800162e:	686b      	ldr	r3, [r5, #4]
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	429a      	cmp	r2, r3
 8001634:	d0a0      	beq.n	8001578 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001636:	f7ff f849 	bl	80006cc <HAL_GetTick>
 800163a:	9b01      	ldr	r3, [sp, #4]
 800163c:	1ac0      	subs	r0, r0, r3
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <HAL_RCC_ClockConfig+0x150>)
 8001640:	4298      	cmp	r0, r3
 8001642:	d9f1      	bls.n	8001628 <HAL_RCC_ClockConfig+0xd4>
 8001644:	e7d0      	b.n	80015e8 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001646:	2a02      	cmp	r2, #2
 8001648:	d103      	bne.n	8001652 <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	019b      	lsls	r3, r3, #6
 800164e:	d4e3      	bmi.n	8001618 <HAL_RCC_ClockConfig+0xc4>
 8001650:	e785      	b.n	800155e <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001652:	2a00      	cmp	r2, #0
 8001654:	d103      	bne.n	800165e <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	055b      	lsls	r3, r3, #21
 800165a:	d4dd      	bmi.n	8001618 <HAL_RCC_ClockConfig+0xc4>
 800165c:	e77f      	b.n	800155e <HAL_RCC_ClockConfig+0xa>
 800165e:	2302      	movs	r3, #2
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001660:	2a03      	cmp	r2, #3
 8001662:	d103      	bne.n	800166c <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001664:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001666:	4219      	tst	r1, r3
 8001668:	d1d6      	bne.n	8001618 <HAL_RCC_ClockConfig+0xc4>
 800166a:	e778      	b.n	800155e <HAL_RCC_ClockConfig+0xa>
 800166c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800166e:	e7fa      	b.n	8001666 <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001670:	f7ff f82c 	bl	80006cc <HAL_GetTick>
 8001674:	9b01      	ldr	r3, [sp, #4]
 8001676:	1ac0      	subs	r0, r0, r3
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <HAL_RCC_ClockConfig+0x150>)
 800167a:	4298      	cmp	r0, r3
 800167c:	d988      	bls.n	8001590 <HAL_RCC_ClockConfig+0x3c>
 800167e:	e7b3      	b.n	80015e8 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001680:	68a3      	ldr	r3, [r4, #8]
 8001682:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <HAL_RCC_ClockConfig+0x158>)
 8001684:	4013      	ands	r3, r2
 8001686:	68ea      	ldr	r2, [r5, #12]
 8001688:	4313      	orrs	r3, r2
 800168a:	60a3      	str	r3, [r4, #8]
 800168c:	e788      	b.n	80015a0 <HAL_RCC_ClockConfig+0x4c>
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	40022000 	.word	0x40022000
 8001694:	40021000 	.word	0x40021000
 8001698:	08003860 	.word	0x08003860
 800169c:	2000003c 	.word	0x2000003c
 80016a0:	20000004 	.word	0x20000004
 80016a4:	00001388 	.word	0x00001388
 80016a8:	fffff0ff 	.word	0xfffff0ff
 80016ac:	ffff8fff 	.word	0xffff8fff

080016b0 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80016b2:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	045b      	lsls	r3, r3, #17
 80016b8:	0f5b      	lsrs	r3, r3, #29
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	589b      	ldr	r3, [r3, r2]
 80016be:	221f      	movs	r2, #31
 80016c0:	4013      	ands	r3, r2
 80016c2:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016c4:	6810      	ldr	r0, [r2, #0]
 80016c6:	40d8      	lsrs	r0, r3
}
 80016c8:	4770      	bx	lr
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	40021000 	.word	0x40021000
 80016d0:	080038a0 	.word	0x080038a0
 80016d4:	2000003c 	.word	0x2000003c

080016d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80016d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016da:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80016dc:	682b      	ldr	r3, [r5, #0]
{
 80016de:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80016e0:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80016e2:	039b      	lsls	r3, r3, #14
 80016e4:	d550      	bpl.n	8001788 <HAL_RCCEx_PeriphCLKConfig+0xb0>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016e6:	2280      	movs	r2, #128	; 0x80
 80016e8:	4c6f      	ldr	r4, [pc, #444]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016ea:	0552      	lsls	r2, r2, #21
 80016ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80016ee:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016f0:	4213      	tst	r3, r2
 80016f2:	d108      	bne.n	8001706 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016f6:	4313      	orrs	r3, r2
 80016f8:	63e3      	str	r3, [r4, #60]	; 0x3c
 80016fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016fc:	4013      	ands	r3, r2
 80016fe:	9303      	str	r3, [sp, #12]
 8001700:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001702:	2301      	movs	r3, #1
 8001704:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001706:	2780      	movs	r7, #128	; 0x80
 8001708:	4e68      	ldr	r6, [pc, #416]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800170a:	007f      	lsls	r7, r7, #1
 800170c:	6833      	ldr	r3, [r6, #0]
 800170e:	433b      	orrs	r3, r7
 8001710:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001712:	f7fe ffdb 	bl	80006cc <HAL_GetTick>
 8001716:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001718:	6833      	ldr	r3, [r6, #0]
 800171a:	423b      	tst	r3, r7
 800171c:	d026      	beq.n	800176c <HAL_RCCEx_PeriphCLKConfig+0x94>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800171e:	23c0      	movs	r3, #192	; 0xc0
 8001720:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001726:	d00f      	beq.n	8001748 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001728:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800172a:	4293      	cmp	r3, r2
 800172c:	d00c      	beq.n	8001748 <HAL_RCCEx_PeriphCLKConfig+0x70>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800172e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001730:	4b5f      	ldr	r3, [pc, #380]	; (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001732:	6de1      	ldr	r1, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001734:	4013      	ands	r3, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 8001736:	2280      	movs	r2, #128	; 0x80
 8001738:	0252      	lsls	r2, r2, #9
 800173a:	430a      	orrs	r2, r1
 800173c:	65e2      	str	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800173e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001740:	495c      	ldr	r1, [pc, #368]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001742:	400a      	ands	r2, r1
 8001744:	65e2      	str	r2, [r4, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001746:	65e3      	str	r3, [r4, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001748:	07db      	lsls	r3, r3, #31
 800174a:	d507      	bpl.n	800175c <HAL_RCCEx_PeriphCLKConfig+0x84>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7fe ffbe 	bl	80006cc <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001750:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8001752:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001754:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001756:	423b      	tst	r3, r7
 8001758:	d100      	bne.n	800175c <HAL_RCCEx_PeriphCLKConfig+0x84>
 800175a:	e09d      	b.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800175c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800175e:	4a54      	ldr	r2, [pc, #336]	; (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001760:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001762:	4013      	ands	r3, r2
 8001764:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001766:	4313      	orrs	r3, r2
 8001768:	65e3      	str	r3, [r4, #92]	; 0x5c
 800176a:	e006      	b.n	800177a <HAL_RCCEx_PeriphCLKConfig+0xa2>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800176c:	f7fe ffae 	bl	80006cc <HAL_GetTick>
 8001770:	9b01      	ldr	r3, [sp, #4]
 8001772:	1ac0      	subs	r0, r0, r3
 8001774:	2802      	cmp	r0, #2
 8001776:	d9cf      	bls.n	8001718 <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 8001778:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800177a:	9b00      	ldr	r3, [sp, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d103      	bne.n	8001788 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001780:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001782:	4a4d      	ldr	r2, [pc, #308]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001784:	4013      	ands	r3, r2
 8001786:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001788:	682b      	ldr	r3, [r5, #0]
 800178a:	07da      	lsls	r2, r3, #31
 800178c:	d506      	bpl.n	800179c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800178e:	2403      	movs	r4, #3
 8001790:	4945      	ldr	r1, [pc, #276]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001792:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001794:	43a2      	bics	r2, r4
 8001796:	686c      	ldr	r4, [r5, #4]
 8001798:	4322      	orrs	r2, r4
 800179a:	654a      	str	r2, [r1, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800179c:	079a      	lsls	r2, r3, #30
 800179e:	d506      	bpl.n	80017ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80017a0:	240c      	movs	r4, #12
 80017a2:	4941      	ldr	r1, [pc, #260]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017a4:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80017a6:	43a2      	bics	r2, r4
 80017a8:	68ac      	ldr	r4, [r5, #8]
 80017aa:	4322      	orrs	r2, r4
 80017ac:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80017ae:	069a      	lsls	r2, r3, #26
 80017b0:	d506      	bpl.n	80017c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80017b2:	493d      	ldr	r1, [pc, #244]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017b4:	4c41      	ldr	r4, [pc, #260]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80017b6:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80017b8:	4022      	ands	r2, r4
 80017ba:	68ec      	ldr	r4, [r5, #12]
 80017bc:	4322      	orrs	r2, r4
 80017be:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80017c0:	059a      	lsls	r2, r3, #22
 80017c2:	d506      	bpl.n	80017d2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80017c4:	4938      	ldr	r1, [pc, #224]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017c6:	4c3e      	ldr	r4, [pc, #248]	; (80018c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80017c8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80017ca:	4022      	ands	r2, r4
 80017cc:	69ac      	ldr	r4, [r5, #24]
 80017ce:	4322      	orrs	r2, r4
 80017d0:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80017d2:	055a      	lsls	r2, r3, #21
 80017d4:	d506      	bpl.n	80017e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80017d6:	4934      	ldr	r1, [pc, #208]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017d8:	4c3a      	ldr	r4, [pc, #232]	; (80018c4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80017da:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80017dc:	4022      	ands	r2, r4
 80017de:	69ec      	ldr	r4, [r5, #28]
 80017e0:	4322      	orrs	r2, r4
 80017e2:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017e4:	065a      	lsls	r2, r3, #25
 80017e6:	d506      	bpl.n	80017f6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017e8:	492f      	ldr	r1, [pc, #188]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017ea:	4c37      	ldr	r4, [pc, #220]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80017ec:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80017ee:	4022      	ands	r2, r4
 80017f0:	692c      	ldr	r4, [r5, #16]
 80017f2:	4322      	orrs	r2, r4
 80017f4:	654a      	str	r2, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80017f6:	045a      	lsls	r2, r3, #17
 80017f8:	d50f      	bpl.n	800181a <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80017fa:	492b      	ldr	r1, [pc, #172]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017fc:	6a2c      	ldr	r4, [r5, #32]
 80017fe:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001800:	0092      	lsls	r2, r2, #2
 8001802:	0892      	lsrs	r2, r2, #2
 8001804:	4322      	orrs	r2, r4
 8001806:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001808:	2280      	movs	r2, #128	; 0x80
 800180a:	05d2      	lsls	r2, r2, #23
 800180c:	4294      	cmp	r4, r2
 800180e:	d104      	bne.n	800181a <HAL_RCCEx_PeriphCLKConfig+0x142>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001810:	2280      	movs	r2, #128	; 0x80
 8001812:	68cc      	ldr	r4, [r1, #12]
 8001814:	0252      	lsls	r2, r2, #9
 8001816:	4322      	orrs	r2, r4
 8001818:	60ca      	str	r2, [r1, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800181a:	031a      	lsls	r2, r3, #12
 800181c:	d506      	bpl.n	800182c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800181e:	2440      	movs	r4, #64	; 0x40
 8001820:	4921      	ldr	r1, [pc, #132]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001822:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001824:	43a2      	bics	r2, r4
 8001826:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8001828:	4322      	orrs	r2, r4
 800182a:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800182c:	029a      	lsls	r2, r3, #10
 800182e:	d50f      	bpl.n	8001850 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001830:	491d      	ldr	r1, [pc, #116]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001832:	4e26      	ldr	r6, [pc, #152]	; (80018cc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001834:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8001836:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8001838:	4032      	ands	r2, r6
 800183a:	4322      	orrs	r2, r4
 800183c:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800183e:	2280      	movs	r2, #128	; 0x80
 8001840:	03d2      	lsls	r2, r2, #15
 8001842:	4294      	cmp	r4, r2
 8001844:	d104      	bne.n	8001850 <HAL_RCCEx_PeriphCLKConfig+0x178>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001846:	2280      	movs	r2, #128	; 0x80
 8001848:	68cc      	ldr	r4, [r1, #12]
 800184a:	0452      	lsls	r2, r2, #17
 800184c:	4322      	orrs	r2, r4
 800184e:	60ca      	str	r2, [r1, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001850:	025a      	lsls	r2, r3, #9
 8001852:	d50d      	bpl.n	8001870 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001854:	4c14      	ldr	r4, [pc, #80]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001856:	4e1e      	ldr	r6, [pc, #120]	; (80018d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001858:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800185a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800185c:	4031      	ands	r1, r6
 800185e:	4311      	orrs	r1, r2
 8001860:	6561      	str	r1, [r4, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001862:	2180      	movs	r1, #128	; 0x80
 8001864:	0449      	lsls	r1, r1, #17
 8001866:	428a      	cmp	r2, r1
 8001868:	d102      	bne.n	8001870 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800186a:	68e1      	ldr	r1, [r4, #12]
 800186c:	430a      	orrs	r2, r1
 800186e:	60e2      	str	r2, [r4, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001870:	051b      	lsls	r3, r3, #20
 8001872:	d50f      	bpl.n	8001894 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001874:	490c      	ldr	r1, [pc, #48]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001876:	4c17      	ldr	r4, [pc, #92]	; (80018d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001878:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800187a:	696a      	ldr	r2, [r5, #20]
 800187c:	4023      	ands	r3, r4
 800187e:	4313      	orrs	r3, r2
 8001880:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	01db      	lsls	r3, r3, #7
 8001886:	429a      	cmp	r2, r3
 8001888:	d104      	bne.n	8001894 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	68ca      	ldr	r2, [r1, #12]
 800188e:	025b      	lsls	r3, r3, #9
 8001890:	4313      	orrs	r3, r2
 8001892:	60cb      	str	r3, [r1, #12]
    }
  }

  return status;
}
 8001894:	b005      	add	sp, #20
 8001896:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001898:	f7fe ff18 	bl	80006cc <HAL_GetTick>
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800189e:	1b80      	subs	r0, r0, r6
 80018a0:	4298      	cmp	r0, r3
 80018a2:	d800      	bhi.n	80018a6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80018a4:	e756      	b.n	8001754 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80018a6:	e767      	b.n	8001778 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40007000 	.word	0x40007000
 80018b0:	fffffcff 	.word	0xfffffcff
 80018b4:	fffeffff 	.word	0xfffeffff
 80018b8:	efffffff 	.word	0xefffffff
 80018bc:	fffff3ff 	.word	0xfffff3ff
 80018c0:	fff3ffff 	.word	0xfff3ffff
 80018c4:	ffcfffff 	.word	0xffcfffff
 80018c8:	ffffcfff 	.word	0xffffcfff
 80018cc:	ffbfffff 	.word	0xffbfffff
 80018d0:	feffffff 	.word	0xfeffffff
 80018d4:	ffff3fff 	.word	0xffff3fff
 80018d8:	00001388 	.word	0x00001388

080018dc <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80018dc:	21e0      	movs	r1, #224	; 0xe0
 80018de:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80018e0:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	438a      	bics	r2, r1
 80018e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80018e8:	2282      	movs	r2, #130	; 0x82
 80018ea:	6841      	ldr	r1, [r0, #4]
 80018ec:	0052      	lsls	r2, r2, #1
 80018ee:	4291      	cmp	r1, r2
 80018f0:	d10c      	bne.n	800190c <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
 80018f2:	2180      	movs	r1, #128	; 0x80
 80018f4:	6882      	ldr	r2, [r0, #8]
 80018f6:	0209      	lsls	r1, r1, #8
 80018f8:	428a      	cmp	r2, r1
 80018fa:	d003      	beq.n	8001904 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80018fc:	2180      	movs	r1, #128	; 0x80
 80018fe:	00c9      	lsls	r1, r1, #3
 8001900:	428a      	cmp	r2, r1
 8001902:	d103      	bne.n	800190c <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001904:	2140      	movs	r1, #64	; 0x40
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	438a      	bics	r2, r1
 800190a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001910:	0189      	lsls	r1, r1, #6
 8001912:	428a      	cmp	r2, r1
 8001914:	d106      	bne.n	8001924 <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
        {
          SPI_RESET_CRC(hspi);
 8001916:	6819      	ldr	r1, [r3, #0]
 8001918:	4c07      	ldr	r4, [pc, #28]	; (8001938 <SPI_WaitFifoStateUntilTimeout.part.1+0x5c>)
 800191a:	4021      	ands	r1, r4
 800191c:	6019      	str	r1, [r3, #0]
 800191e:	6819      	ldr	r1, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001924:	0003      	movs	r3, r0
 8001926:	2201      	movs	r2, #1
 8001928:	335d      	adds	r3, #93	; 0x5d
 800192a:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800192c:	2300      	movs	r3, #0
 800192e:	305c      	adds	r0, #92	; 0x5c
 8001930:	7003      	strb	r3, [r0, #0]
      }
    }
  }

  return HAL_OK;
}
 8001932:	2003      	movs	r0, #3
 8001934:	bd10      	pop	{r4, pc}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	ffffdfff 	.word	0xffffdfff

0800193c <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800193c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800193e:	0004      	movs	r4, r0
 8001940:	000d      	movs	r5, r1
 8001942:	0017      	movs	r7, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001944:	2680      	movs	r6, #128	; 0x80
 8001946:	6823      	ldr	r3, [r4, #0]
 8001948:	6898      	ldr	r0, [r3, #8]
 800194a:	4030      	ands	r0, r6
 800194c:	d009      	beq.n	8001962 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x26>
    if (Timeout != HAL_MAX_DELAY)
 800194e:	1c6a      	adds	r2, r5, #1
 8001950:	d0fa      	beq.n	8001948 <SPI_WaitFlagStateUntilTimeout.constprop.10+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001952:	f7fe febb 	bl	80006cc <HAL_GetTick>
 8001956:	1bc0      	subs	r0, r0, r7
 8001958:	4285      	cmp	r5, r0
 800195a:	d8f4      	bhi.n	8001946 <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
 800195c:	0020      	movs	r0, r4
 800195e:	f7ff ffbd 	bl	80018dc <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8001962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001964 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001966:	27c0      	movs	r7, #192	; 0xc0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001968:	0005      	movs	r5, r0
 800196a:	000c      	movs	r4, r1
 800196c:	0016      	movs	r6, r2
 800196e:	9301      	str	r3, [sp, #4]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001970:	00ff      	lsls	r7, r7, #3
  while ((hspi->Instance->SR & Fifo) != State)
 8001972:	682b      	ldr	r3, [r5, #0]
 8001974:	6898      	ldr	r0, [r3, #8]
 8001976:	4020      	ands	r0, r4
 8001978:	d00d      	beq.n	8001996 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x32>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800197a:	42bc      	cmp	r4, r7
 800197c:	d100      	bne.n	8001980 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x1c>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800197e:	7b1a      	ldrb	r2, [r3, #12]
    if (Timeout != HAL_MAX_DELAY)
 8001980:	1c72      	adds	r2, r6, #1
 8001982:	d0f7      	beq.n	8001974 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x10>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001984:	f7fe fea2 	bl	80006cc <HAL_GetTick>
 8001988:	9b01      	ldr	r3, [sp, #4]
 800198a:	1ac0      	subs	r0, r0, r3
 800198c:	4286      	cmp	r6, r0
 800198e:	d8f0      	bhi.n	8001972 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xe>
 8001990:	0028      	movs	r0, r5
 8001992:	f7ff ffa3 	bl	80018dc <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8001996:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001998 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001998:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800199a:	0013      	movs	r3, r2
{
 800199c:	000d      	movs	r5, r1
 800199e:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80019a0:	000a      	movs	r2, r1
 80019a2:	21c0      	movs	r1, #192	; 0xc0
 80019a4:	0149      	lsls	r1, r1, #5
{
 80019a6:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80019a8:	f7ff ffdc 	bl	8001964 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 80019ac:	2800      	cmp	r0, #0
 80019ae:	d005      	beq.n	80019bc <SPI_EndRxTxTransaction+0x24>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80019b0:	2320      	movs	r3, #32
 80019b2:	6e22      	ldr	r2, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 80019b4:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80019b6:	4313      	orrs	r3, r2
 80019b8:	6623      	str	r3, [r4, #96]	; 0x60
 80019ba:	e00f      	b.n	80019dc <SPI_EndRxTxTransaction+0x44>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80019bc:	0032      	movs	r2, r6
 80019be:	0029      	movs	r1, r5
 80019c0:	0020      	movs	r0, r4
 80019c2:	f7ff ffbb 	bl	800193c <SPI_WaitFlagStateUntilTimeout.constprop.10>
 80019c6:	2800      	cmp	r0, #0
 80019c8:	d1f2      	bne.n	80019b0 <SPI_EndRxTxTransaction+0x18>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80019ca:	21c0      	movs	r1, #192	; 0xc0
 80019cc:	0033      	movs	r3, r6
 80019ce:	002a      	movs	r2, r5
 80019d0:	00c9      	lsls	r1, r1, #3
 80019d2:	0020      	movs	r0, r4
 80019d4:	f7ff ffc6 	bl	8001964 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 80019d8:	2800      	cmp	r0, #0
 80019da:	d1e9      	bne.n	80019b0 <SPI_EndRxTxTransaction+0x18>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80019dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080019e0 <HAL_SPI_Init>:
{
 80019e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019e2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80019e4:	2001      	movs	r0, #1
  if (hspi == NULL)
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d04b      	beq.n	8001a82 <HAL_SPI_Init+0xa2>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019ea:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80019ec:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019ee:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80019f0:	355d      	adds	r5, #93	; 0x5d
 80019f2:	782b      	ldrb	r3, [r5, #0]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d105      	bne.n	8001a06 <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 80019fa:	0022      	movs	r2, r4
 80019fc:	325c      	adds	r2, #92	; 0x5c
 80019fe:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8001a00:	0020      	movs	r0, r4
 8001a02:	f001 fdeb 	bl	80035dc <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001a06:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001a08:	2240      	movs	r2, #64	; 0x40
 8001a0a:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001a0c:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8001a0e:	680b      	ldr	r3, [r1, #0]
 8001a10:	2000      	movs	r0, #0
 8001a12:	4393      	bics	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]
 8001a16:	23e0      	movs	r3, #224	; 0xe0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a18:	68e2      	ldr	r2, [r4, #12]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d931      	bls.n	8001a84 <HAL_SPI_Init+0xa4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a20:	26f0      	movs	r6, #240	; 0xf0
 8001a22:	0136      	lsls	r6, r6, #4
 8001a24:	42b2      	cmp	r2, r6
 8001a26:	d133      	bne.n	8001a90 <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a28:	0006      	movs	r6, r0
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001a2a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001a2c:	2800      	cmp	r0, #0
 8001a2e:	d103      	bne.n	8001a38 <HAL_SPI_Init+0x58>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d92f      	bls.n	8001a94 <HAL_SPI_Init+0xb4>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001a34:	2302      	movs	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001a36:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001a38:	68a7      	ldr	r7, [r4, #8]
 8001a3a:	6863      	ldr	r3, [r4, #4]
 8001a3c:	69a0      	ldr	r0, [r4, #24]
 8001a3e:	433b      	orrs	r3, r7
 8001a40:	6927      	ldr	r7, [r4, #16]
 8001a42:	433b      	orrs	r3, r7
 8001a44:	6967      	ldr	r7, [r4, #20]
 8001a46:	433b      	orrs	r3, r7
 8001a48:	69e7      	ldr	r7, [r4, #28]
 8001a4a:	433b      	orrs	r3, r7
 8001a4c:	6a27      	ldr	r7, [r4, #32]
 8001a4e:	433b      	orrs	r3, r7
 8001a50:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001a52:	433b      	orrs	r3, r7
 8001a54:	2780      	movs	r7, #128	; 0x80
 8001a56:	00bf      	lsls	r7, r7, #2
 8001a58:	4007      	ands	r7, r0
 8001a5a:	433b      	orrs	r3, r7
 8001a5c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001a5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a60:	0c00      	lsrs	r0, r0, #16
 8001a62:	431a      	orrs	r2, r3
 8001a64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a66:	431a      	orrs	r2, r3
 8001a68:	2304      	movs	r3, #4
 8001a6a:	4018      	ands	r0, r3
 8001a6c:	4310      	orrs	r0, r2
 8001a6e:	4306      	orrs	r6, r0
 8001a70:	604e      	str	r6, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a72:	69cb      	ldr	r3, [r1, #28]
 8001a74:	4a08      	ldr	r2, [pc, #32]	; (8001a98 <HAL_SPI_Init+0xb8>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a76:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001a7c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a7e:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001a80:	702b      	strb	r3, [r5, #0]
}
 8001a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001a84:	2680      	movs	r6, #128	; 0x80
 8001a86:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d0ce      	beq.n	8001a2a <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a8c:	62a0      	str	r0, [r4, #40]	; 0x28
 8001a8e:	e7cc      	b.n	8001a2a <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a90:	0006      	movs	r6, r0
 8001a92:	e7fb      	b.n	8001a8c <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e7ce      	b.n	8001a36 <HAL_SPI_Init+0x56>
 8001a98:	fffff7ff 	.word	0xfffff7ff

08001a9c <HAL_SPI_TransmitReceive>:
{
 8001a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a9e:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8001aa0:	0003      	movs	r3, r0
{
 8001aa2:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hspi);
 8001aa4:	335c      	adds	r3, #92	; 0x5c
 8001aa6:	781a      	ldrb	r2, [r3, #0]
{
 8001aa8:	0004      	movs	r4, r0
 8001aaa:	000f      	movs	r7, r1
  __HAL_LOCK(hspi);
 8001aac:	2502      	movs	r5, #2
 8001aae:	2a01      	cmp	r2, #1
 8001ab0:	d100      	bne.n	8001ab4 <HAL_SPI_TransmitReceive+0x18>
 8001ab2:	e0ac      	b.n	8001c0e <HAL_SPI_TransmitReceive+0x172>
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001ab8:	f7fe fe08 	bl	80006cc <HAL_GetTick>
  tmp_state           = hspi->State;
 8001abc:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8001abe:	9000      	str	r0, [sp, #0]
  tmp_state           = hspi->State;
 8001ac0:	335d      	adds	r3, #93	; 0x5d
 8001ac2:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001ac4:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8001ac6:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d00b      	beq.n	8001ae4 <HAL_SPI_TransmitReceive+0x48>
 8001acc:	2282      	movs	r2, #130	; 0x82
 8001ace:	0052      	lsls	r2, r2, #1
 8001ad0:	4291      	cmp	r1, r2
 8001ad2:	d000      	beq.n	8001ad6 <HAL_SPI_TransmitReceive+0x3a>
 8001ad4:	e094      	b.n	8001c00 <HAL_SPI_TransmitReceive+0x164>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001ad6:	68a2      	ldr	r2, [r4, #8]
 8001ad8:	2a00      	cmp	r2, #0
 8001ada:	d000      	beq.n	8001ade <HAL_SPI_TransmitReceive+0x42>
 8001adc:	e090      	b.n	8001c00 <HAL_SPI_TransmitReceive+0x164>
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d000      	beq.n	8001ae4 <HAL_SPI_TransmitReceive+0x48>
 8001ae2:	e08d      	b.n	8001c00 <HAL_SPI_TransmitReceive+0x164>
    errorcode = HAL_ERROR;
 8001ae4:	2501      	movs	r5, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ae6:	2f00      	cmp	r7, #0
 8001ae8:	d100      	bne.n	8001aec <HAL_SPI_TransmitReceive+0x50>
 8001aea:	e089      	b.n	8001c00 <HAL_SPI_TransmitReceive+0x164>
 8001aec:	9b01      	ldr	r3, [sp, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d100      	bne.n	8001af4 <HAL_SPI_TransmitReceive+0x58>
 8001af2:	e085      	b.n	8001c00 <HAL_SPI_TransmitReceive+0x164>
 8001af4:	2e00      	cmp	r6, #0
 8001af6:	d100      	bne.n	8001afa <HAL_SPI_TransmitReceive+0x5e>
 8001af8:	e082      	b.n	8001c00 <HAL_SPI_TransmitReceive+0x164>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001afa:	0023      	movs	r3, r4
 8001afc:	335d      	adds	r3, #93	; 0x5d
 8001afe:	781a      	ldrb	r2, [r3, #0]
 8001b00:	2a04      	cmp	r2, #4
 8001b02:	d001      	beq.n	8001b08 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001b04:	2205      	movs	r2, #5
 8001b06:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001b08:	9a01      	ldr	r2, [sp, #4]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b0a:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001b0c:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001b0e:	0022      	movs	r2, r4
 8001b10:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b12:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8001b14:	87d6      	strh	r6, [r2, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001b16:	1da2      	adds	r2, r4, #6
 8001b18:	87d6      	strh	r6, [r2, #62]	; 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8001b1a:	22e0      	movs	r2, #224	; 0xe0
 8001b1c:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 8001b1e:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001b20:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001b22:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001b24:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001b26:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8001b28:	00d2      	lsls	r2, r2, #3
 8001b2a:	6823      	ldr	r3, [r4, #0]
 8001b2c:	4290      	cmp	r0, r2
 8001b2e:	d801      	bhi.n	8001b34 <HAL_SPI_TransmitReceive+0x98>
 8001b30:	2e01      	cmp	r6, #1
 8001b32:	d931      	bls.n	8001b98 <HAL_SPI_TransmitReceive+0xfc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	4d71      	ldr	r5, [pc, #452]	; (8001cfc <HAL_SPI_TransmitReceive+0x260>)
 8001b38:	402a      	ands	r2, r5
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001b3a:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b3c:	2240      	movs	r2, #64	; 0x40
 8001b3e:	6823      	ldr	r3, [r4, #0]
 8001b40:	681d      	ldr	r5, [r3, #0]
 8001b42:	4215      	tst	r5, r2
 8001b44:	d102      	bne.n	8001b4c <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8001b46:	681d      	ldr	r5, [r3, #0]
 8001b48:	432a      	orrs	r2, r5
 8001b4a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b4c:	22e0      	movs	r2, #224	; 0xe0
 8001b4e:	00d2      	lsls	r2, r2, #3
 8001b50:	4290      	cmp	r0, r2
 8001b52:	d95e      	bls.n	8001c12 <HAL_SPI_TransmitReceive+0x176>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b54:	2900      	cmp	r1, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_SPI_TransmitReceive+0xc0>
 8001b58:	2e01      	cmp	r6, #1
 8001b5a:	d107      	bne.n	8001b6c <HAL_SPI_TransmitReceive+0xd0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b5c:	883a      	ldrh	r2, [r7, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b5e:	3702      	adds	r7, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b60:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001b62:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b64:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8001b66:	3b01      	subs	r3, #1
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001b6c:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001b6e:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b70:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b72:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d114      	bne.n	8001ba2 <HAL_SPI_TransmitReceive+0x106>
 8001b78:	0023      	movs	r3, r4
 8001b7a:	3308      	adds	r3, #8
 8001b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10f      	bne.n	8001ba2 <HAL_SPI_TransmitReceive+0x106>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b82:	9a00      	ldr	r2, [sp, #0]
 8001b84:	9908      	ldr	r1, [sp, #32]
 8001b86:	0020      	movs	r0, r4
 8001b88:	f7ff ff06 	bl	8001998 <SPI_EndRxTxTransaction>
 8001b8c:	1e05      	subs	r5, r0, #0
 8001b8e:	d037      	beq.n	8001c00 <HAL_SPI_TransmitReceive+0x164>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b90:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8001b92:	2501      	movs	r5, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b94:	6623      	str	r3, [r4, #96]	; 0x60
 8001b96:	e033      	b.n	8001c00 <HAL_SPI_TransmitReceive+0x164>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001b98:	2280      	movs	r2, #128	; 0x80
 8001b9a:	685d      	ldr	r5, [r3, #4]
 8001b9c:	0152      	lsls	r2, r2, #5
 8001b9e:	432a      	orrs	r2, r5
 8001ba0:	e7cb      	b.n	8001b3a <HAL_SPI_TransmitReceive+0x9e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ba2:	6822      	ldr	r2, [r4, #0]
 8001ba4:	6893      	ldr	r3, [r2, #8]
 8001ba6:	423b      	tst	r3, r7
 8001ba8:	d00e      	beq.n	8001bc8 <HAL_SPI_TransmitReceive+0x12c>
 8001baa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00b      	beq.n	8001bc8 <HAL_SPI_TransmitReceive+0x12c>
 8001bb0:	2d01      	cmp	r5, #1
 8001bb2:	d109      	bne.n	8001bc8 <HAL_SPI_TransmitReceive+0x12c>
        txallowed = 0U;
 8001bb4:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bb8:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bba:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bbc:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bbe:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001bc0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001bc8:	6893      	ldr	r3, [r2, #8]
 8001bca:	4233      	tst	r3, r6
 8001bcc:	d00e      	beq.n	8001bec <HAL_SPI_TransmitReceive+0x150>
 8001bce:	0021      	movs	r1, r4
 8001bd0:	3108      	adds	r1, #8
 8001bd2:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d009      	beq.n	8001bec <HAL_SPI_TransmitReceive+0x150>
        txallowed = 1U;
 8001bd8:	0035      	movs	r5, r6
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001bda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bdc:	68d2      	ldr	r2, [r2, #12]
 8001bde:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001be0:	3302      	adds	r3, #2
 8001be2:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8001be4:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 8001be6:	3b01      	subs	r3, #1
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	87cb      	strh	r3, [r1, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001bec:	f7fe fd6e 	bl	80006cc <HAL_GetTick>
 8001bf0:	9b00      	ldr	r3, [sp, #0]
 8001bf2:	1ac0      	subs	r0, r0, r3
 8001bf4:	9b08      	ldr	r3, [sp, #32]
 8001bf6:	4283      	cmp	r3, r0
 8001bf8:	d8bb      	bhi.n	8001b72 <HAL_SPI_TransmitReceive+0xd6>
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	d0b9      	beq.n	8001b72 <HAL_SPI_TransmitReceive+0xd6>
        errorcode = HAL_TIMEOUT;
 8001bfe:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001c00:	0023      	movs	r3, r4
 8001c02:	2201      	movs	r2, #1
 8001c04:	335d      	adds	r3, #93	; 0x5d
 8001c06:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8001c08:	2300      	movs	r3, #0
 8001c0a:	345c      	adds	r4, #92	; 0x5c
 8001c0c:	7023      	strb	r3, [r4, #0]
}
 8001c0e:	0028      	movs	r0, r5
 8001c10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c12:	2900      	cmp	r1, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_SPI_TransmitReceive+0x17e>
 8001c16:	2e01      	cmp	r6, #1
 8001c18:	d10a      	bne.n	8001c30 <HAL_SPI_TransmitReceive+0x194>
      if (hspi->TxXferCount > 1U)
 8001c1a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001c1c:	2a01      	cmp	r2, #1
 8001c1e:	d951      	bls.n	8001cc4 <HAL_SPI_TransmitReceive+0x228>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c20:	883a      	ldrh	r2, [r7, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c22:	3702      	adds	r7, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c24:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8001c26:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c28:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001c2a:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001c30:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c32:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c34:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c36:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d105      	bne.n	8001c48 <HAL_SPI_TransmitReceive+0x1ac>
 8001c3c:	0023      	movs	r3, r4
 8001c3e:	3308      	adds	r3, #8
 8001c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d100      	bne.n	8001c48 <HAL_SPI_TransmitReceive+0x1ac>
 8001c46:	e79c      	b.n	8001b82 <HAL_SPI_TransmitReceive+0xe6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c48:	6822      	ldr	r2, [r4, #0]
 8001c4a:	6893      	ldr	r3, [r2, #8]
 8001c4c:	423b      	tst	r3, r7
 8001c4e:	d011      	beq.n	8001c74 <HAL_SPI_TransmitReceive+0x1d8>
 8001c50:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00e      	beq.n	8001c74 <HAL_SPI_TransmitReceive+0x1d8>
 8001c56:	2d01      	cmp	r5, #1
 8001c58:	d10c      	bne.n	8001c74 <HAL_SPI_TransmitReceive+0x1d8>
        if (hspi->TxXferCount > 1U)
 8001c5a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8001c5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c5e:	2901      	cmp	r1, #1
 8001c60:	d938      	bls.n	8001cd4 <HAL_SPI_TransmitReceive+0x238>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c62:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c64:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c66:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c68:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001c6a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001c6c:	3b02      	subs	r3, #2
        txallowed = 0U;
 8001c6e:	2500      	movs	r5, #0
          hspi->TxXferCount--;
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c74:	6821      	ldr	r1, [r4, #0]
 8001c76:	688b      	ldr	r3, [r1, #8]
 8001c78:	4233      	tst	r3, r6
 8001c7a:	d019      	beq.n	8001cb0 <HAL_SPI_TransmitReceive+0x214>
 8001c7c:	0023      	movs	r3, r4
 8001c7e:	3308      	adds	r3, #8
 8001c80:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001c82:	2a00      	cmp	r2, #0
 8001c84:	d014      	beq.n	8001cb0 <HAL_SPI_TransmitReceive+0x214>
        if (hspi->RxXferCount > 1U)
 8001c86:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 8001c88:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001c8a:	2801      	cmp	r0, #1
 8001c8c:	d92a      	bls.n	8001ce4 <HAL_SPI_TransmitReceive+0x248>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001c8e:	68c8      	ldr	r0, [r1, #12]
        txallowed = 1U;
 8001c90:	0035      	movs	r5, r6
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001c92:	8010      	strh	r0, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8001c94:	3202      	adds	r2, #2
 8001c96:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8001c98:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001c9a:	3a02      	subs	r2, #2
 8001c9c:	b292      	uxth	r2, r2
 8001c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
          if (hspi->RxXferCount <= 1U)
 8001ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d804      	bhi.n	8001cb0 <HAL_SPI_TransmitReceive+0x214>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	684a      	ldr	r2, [r1, #4]
 8001caa:	015b      	lsls	r3, r3, #5
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001cb0:	f7fe fd0c 	bl	80006cc <HAL_GetTick>
 8001cb4:	9b00      	ldr	r3, [sp, #0]
 8001cb6:	1ac0      	subs	r0, r0, r3
 8001cb8:	9b08      	ldr	r3, [sp, #32]
 8001cba:	4283      	cmp	r3, r0
 8001cbc:	d8bb      	bhi.n	8001c36 <HAL_SPI_TransmitReceive+0x19a>
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	d0b9      	beq.n	8001c36 <HAL_SPI_TransmitReceive+0x19a>
 8001cc2:	e79c      	b.n	8001bfe <HAL_SPI_TransmitReceive+0x162>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001cc4:	783a      	ldrb	r2, [r7, #0]
 8001cc6:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8001cc8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cca:	3301      	adds	r3, #1
 8001ccc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001cce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	e7ab      	b.n	8001c2c <HAL_SPI_TransmitReceive+0x190>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8001cd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cda:	3301      	adds	r3, #1
 8001cdc:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8001cde:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	e7c4      	b.n	8001c6e <HAL_SPI_TransmitReceive+0x1d2>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001ce4:	7b09      	ldrb	r1, [r1, #12]
        txallowed = 1U;
 8001ce6:	0035      	movs	r5, r6
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001ce8:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 8001cea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001cec:	3201      	adds	r2, #1
 8001cee:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8001cf0:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001cf2:	3a01      	subs	r2, #1
 8001cf4:	b292      	uxth	r2, r2
 8001cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001cf8:	e7da      	b.n	8001cb0 <HAL_SPI_TransmitReceive+0x214>
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	ffffefff 	.word	0xffffefff

08001d00 <HAL_SPI_ErrorCallback>:
 8001d00:	4770      	bx	lr
	...

08001d04 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8001d04:	6803      	ldr	r3, [r0, #0]
{
 8001d06:	b530      	push	{r4, r5, lr}
 8001d08:	0004      	movs	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001d0a:	2041      	movs	r0, #65	; 0x41
  uint32_t itsource = hspi->Instance->CR2;
 8001d0c:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8001d0e:	689a      	ldr	r2, [r3, #8]
{
 8001d10:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001d12:	4010      	ands	r0, r2
 8001d14:	2801      	cmp	r0, #1
 8001d16:	d106      	bne.n	8001d26 <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001d18:	0648      	lsls	r0, r1, #25
 8001d1a:	d504      	bpl.n	8001d26 <HAL_SPI_IRQHandler+0x22>
    hspi->RxISR(hspi);
 8001d1c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    hspi->TxISR(hspi);
 8001d1e:	0020      	movs	r0, r4
 8001d20:	4798      	blx	r3
}
 8001d22:	b005      	add	sp, #20
 8001d24:	bd30      	pop	{r4, r5, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001d26:	0790      	lsls	r0, r2, #30
 8001d28:	d503      	bpl.n	8001d32 <HAL_SPI_IRQHandler+0x2e>
 8001d2a:	0608      	lsls	r0, r1, #24
 8001d2c:	d501      	bpl.n	8001d32 <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 8001d2e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001d30:	e7f5      	b.n	8001d1e <HAL_SPI_IRQHandler+0x1a>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001d32:	20b0      	movs	r0, #176	; 0xb0
 8001d34:	0040      	lsls	r0, r0, #1
 8001d36:	4202      	tst	r2, r0
 8001d38:	d0f3      	beq.n	8001d22 <HAL_SPI_IRQHandler+0x1e>
 8001d3a:	0688      	lsls	r0, r1, #26
 8001d3c:	d5f1      	bpl.n	8001d22 <HAL_SPI_IRQHandler+0x1e>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001d3e:	0650      	lsls	r0, r2, #25
 8001d40:	d50f      	bpl.n	8001d62 <HAL_SPI_IRQHandler+0x5e>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001d42:	0020      	movs	r0, r4
 8001d44:	305d      	adds	r0, #93	; 0x5d
 8001d46:	7800      	ldrb	r0, [r0, #0]
 8001d48:	2803      	cmp	r0, #3
 8001d4a:	d050      	beq.n	8001dee <HAL_SPI_IRQHandler+0xea>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001d4c:	2004      	movs	r0, #4
 8001d4e:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8001d50:	4328      	orrs	r0, r5
 8001d52:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d54:	2000      	movs	r0, #0
 8001d56:	9000      	str	r0, [sp, #0]
 8001d58:	68d8      	ldr	r0, [r3, #12]
 8001d5a:	9000      	str	r0, [sp, #0]
 8001d5c:	6898      	ldr	r0, [r3, #8]
 8001d5e:	9000      	str	r0, [sp, #0]
 8001d60:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001d62:	0690      	lsls	r0, r2, #26
 8001d64:	d50c      	bpl.n	8001d80 <HAL_SPI_IRQHandler+0x7c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001d66:	2001      	movs	r0, #1
 8001d68:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8001d6a:	4328      	orrs	r0, r5
 8001d6c:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001d6e:	2000      	movs	r0, #0
 8001d70:	2540      	movs	r5, #64	; 0x40
 8001d72:	9002      	str	r0, [sp, #8]
 8001d74:	6898      	ldr	r0, [r3, #8]
 8001d76:	9002      	str	r0, [sp, #8]
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	43a8      	bics	r0, r5
 8001d7c:	6018      	str	r0, [r3, #0]
 8001d7e:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001d80:	05d2      	lsls	r2, r2, #23
 8001d82:	d508      	bpl.n	8001d96 <HAL_SPI_IRQHandler+0x92>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001d84:	2208      	movs	r2, #8
 8001d86:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001d88:	4302      	orrs	r2, r0
 8001d8a:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	9203      	str	r2, [sp, #12]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	9203      	str	r2, [sp, #12]
 8001d94:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d96:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001d98:	2a00      	cmp	r2, #0
 8001d9a:	d0c2      	beq.n	8001d22 <HAL_SPI_IRQHandler+0x1e>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001d9c:	20e0      	movs	r0, #224	; 0xe0
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	4382      	bics	r2, r0
 8001da2:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8001da4:	0022      	movs	r2, r4
 8001da6:	38df      	subs	r0, #223	; 0xdf
 8001da8:	325d      	adds	r2, #93	; 0x5d
 8001daa:	7010      	strb	r0, [r2, #0]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001dac:	3002      	adds	r0, #2
 8001dae:	4201      	tst	r1, r0
 8001db0:	d025      	beq.n	8001dfe <HAL_SPI_IRQHandler+0xfa>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	4382      	bics	r2, r0
        if (hspi->hdmarx != NULL)
 8001db6:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001db8:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8001dba:	2800      	cmp	r0, #0
 8001dbc:	d009      	beq.n	8001dd2 <HAL_SPI_IRQHandler+0xce>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001dbe:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_SPI_IRQHandler+0x104>)
 8001dc0:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001dc2:	f7fe fcf1 	bl	80007a8 <HAL_DMA_Abort_IT>
 8001dc6:	2800      	cmp	r0, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_SPI_IRQHandler+0xce>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001dca:	2340      	movs	r3, #64	; 0x40
 8001dcc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8001dd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001dd4:	2800      	cmp	r0, #0
 8001dd6:	d0a4      	beq.n	8001d22 <HAL_SPI_IRQHandler+0x1e>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_SPI_IRQHandler+0x104>)
 8001dda:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001ddc:	f7fe fce4 	bl	80007a8 <HAL_DMA_Abort_IT>
 8001de0:	2800      	cmp	r0, #0
 8001de2:	d09e      	beq.n	8001d22 <HAL_SPI_IRQHandler+0x1e>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001de4:	2340      	movs	r3, #64	; 0x40
 8001de6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001de8:	4313      	orrs	r3, r2
 8001dea:	6623      	str	r3, [r4, #96]	; 0x60
 8001dec:	e799      	b.n	8001d22 <HAL_SPI_IRQHandler+0x1e>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dee:	2200      	movs	r2, #0
 8001df0:	9201      	str	r2, [sp, #4]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	9201      	str	r2, [sp, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	9301      	str	r3, [sp, #4]
 8001dfa:	9b01      	ldr	r3, [sp, #4]
        return;
 8001dfc:	e791      	b.n	8001d22 <HAL_SPI_IRQHandler+0x1e>
        HAL_SPI_ErrorCallback(hspi);
 8001dfe:	0020      	movs	r0, r4
 8001e00:	f7ff ff7e 	bl	8001d00 <HAL_SPI_ErrorCallback>
 8001e04:	e78d      	b.n	8001d22 <HAL_SPI_IRQHandler+0x1e>
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	08001e0d 	.word	0x08001e0d

08001e0c <SPI_DMAAbortOnError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001e0c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	0002      	movs	r2, r0
{
 8001e12:	b510      	push	{r4, lr}
  hspi->RxXferCount = 0U;
 8001e14:	3208      	adds	r2, #8
 8001e16:	87d3      	strh	r3, [r2, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001e18:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8001e1a:	f7ff ff71 	bl	8001d00 <HAL_SPI_ErrorCallback>
}
 8001e1e:	bd10      	pop	{r4, pc}

08001e20 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e20:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e22:	0006      	movs	r6, r0
 8001e24:	3608      	adds	r6, #8
 8001e26:	6ff4      	ldr	r4, [r6, #124]	; 0x7c
{
 8001e28:	0003      	movs	r3, r0

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001e2a:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e2c:	2c20      	cmp	r4, #32
 8001e2e:	d151      	bne.n	8001ed4 <HAL_UART_Receive_IT+0xb4>
      return HAL_ERROR;
 8001e30:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8001e32:	2900      	cmp	r1, #0
 8001e34:	d04e      	beq.n	8001ed4 <HAL_UART_Receive_IT+0xb4>
 8001e36:	2a00      	cmp	r2, #0
 8001e38:	d04c      	beq.n	8001ed4 <HAL_UART_Receive_IT+0xb4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e3a:	2580      	movs	r5, #128	; 0x80
 8001e3c:	689c      	ldr	r4, [r3, #8]
 8001e3e:	016d      	lsls	r5, r5, #5
 8001e40:	42ac      	cmp	r4, r5
 8001e42:	d104      	bne.n	8001e4e <HAL_UART_Receive_IT+0x2e>
 8001e44:	691d      	ldr	r5, [r3, #16]
 8001e46:	2d00      	cmp	r5, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_UART_Receive_IT+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e4a:	4201      	tst	r1, r0
 8001e4c:	d142      	bne.n	8001ed4 <HAL_UART_Receive_IT+0xb4>
    __HAL_LOCK(huart);
 8001e4e:	001d      	movs	r5, r3
 8001e50:	357c      	adds	r5, #124	; 0x7c
 8001e52:	782f      	ldrb	r7, [r5, #0]
    return HAL_BUSY;
 8001e54:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001e56:	2f01      	cmp	r7, #1
 8001e58:	d03c      	beq.n	8001ed4 <HAL_UART_Receive_IT+0xb4>
 8001e5a:	3801      	subs	r0, #1
 8001e5c:	7028      	strb	r0, [r5, #0]
    huart->pRxBuffPtr  = pData;
 8001e5e:	6599      	str	r1, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8001e60:	0019      	movs	r1, r3
    huart->RxISR       = NULL;
 8001e62:	2000      	movs	r0, #0
    UART_MASK_COMPUTATION(huart);
 8001e64:	2780      	movs	r7, #128	; 0x80
    huart->RxXferSize  = Size;
 8001e66:	315c      	adds	r1, #92	; 0x5c
 8001e68:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 8001e6a:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 8001e6c:	017f      	lsls	r7, r7, #5
    huart->RxISR       = NULL;
 8001e6e:	66d8      	str	r0, [r3, #108]	; 0x6c
 8001e70:	3104      	adds	r1, #4
    UART_MASK_COMPUTATION(huart);
 8001e72:	42bc      	cmp	r4, r7
 8001e74:	d131      	bne.n	8001eda <HAL_UART_Receive_IT+0xba>
 8001e76:	6918      	ldr	r0, [r3, #16]
 8001e78:	2800      	cmp	r0, #0
 8001e7a:	d12c      	bne.n	8001ed6 <HAL_UART_Receive_IT+0xb6>
 8001e7c:	4828      	ldr	r0, [pc, #160]	; (8001f20 <HAL_UART_Receive_IT+0x100>)
 8001e7e:	8008      	strh	r0, [r1, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e80:	0019      	movs	r1, r3
 8001e82:	2000      	movs	r0, #0
 8001e84:	3188      	adds	r1, #136	; 0x88
 8001e86:	6008      	str	r0, [r1, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e88:	2122      	movs	r1, #34	; 0x22
 8001e8a:	67f1      	str	r1, [r6, #124]	; 0x7c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e8c:	6819      	ldr	r1, [r3, #0]
 8001e8e:	3001      	adds	r0, #1
 8001e90:	688e      	ldr	r6, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8001e92:	6e5f      	ldr	r7, [r3, #100]	; 0x64
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e94:	4330      	orrs	r0, r6
 8001e96:	6088      	str	r0, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8001e98:	2680      	movs	r6, #128	; 0x80
 8001e9a:	2080      	movs	r0, #128	; 0x80
 8001e9c:	05b6      	lsls	r6, r6, #22
 8001e9e:	0140      	lsls	r0, r0, #5
 8001ea0:	42b7      	cmp	r7, r6
 8001ea2:	d12c      	bne.n	8001efe <HAL_UART_Receive_IT+0xde>
 8001ea4:	001e      	movs	r6, r3
 8001ea6:	3668      	adds	r6, #104	; 0x68
 8001ea8:	8836      	ldrh	r6, [r6, #0]
 8001eaa:	4296      	cmp	r6, r2
 8001eac:	d827      	bhi.n	8001efe <HAL_UART_Receive_IT+0xde>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001eae:	4284      	cmp	r4, r0
 8001eb0:	d123      	bne.n	8001efa <HAL_UART_Receive_IT+0xda>
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	2a00      	cmp	r2, #0
 8001eb6:	d120      	bne.n	8001efa <HAL_UART_Receive_IT+0xda>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8001eb8:	4a1a      	ldr	r2, [pc, #104]	; (8001f24 <HAL_UART_Receive_IT+0x104>)
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8001eba:	66da      	str	r2, [r3, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001ebc:	2380      	movs	r3, #128	; 0x80
      __HAL_UNLOCK(huart);
 8001ebe:	2000      	movs	r0, #0
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001ec0:	680a      	ldr	r2, [r1, #0]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4313      	orrs	r3, r2
      __HAL_UNLOCK(huart);
 8001ec6:	7028      	strb	r0, [r5, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001ec8:	600b      	str	r3, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	688a      	ldr	r2, [r1, #8]
 8001ece:	055b      	lsls	r3, r3, #21
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	608b      	str	r3, [r1, #8]
  }
}
 8001ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 8001ed6:	20ff      	movs	r0, #255	; 0xff
 8001ed8:	e7d1      	b.n	8001e7e <HAL_UART_Receive_IT+0x5e>
 8001eda:	2c00      	cmp	r4, #0
 8001edc:	d104      	bne.n	8001ee8 <HAL_UART_Receive_IT+0xc8>
 8001ede:	6918      	ldr	r0, [r3, #16]
 8001ee0:	2800      	cmp	r0, #0
 8001ee2:	d0f8      	beq.n	8001ed6 <HAL_UART_Receive_IT+0xb6>
 8001ee4:	207f      	movs	r0, #127	; 0x7f
 8001ee6:	e7ca      	b.n	8001e7e <HAL_UART_Receive_IT+0x5e>
 8001ee8:	2780      	movs	r7, #128	; 0x80
 8001eea:	057f      	lsls	r7, r7, #21
 8001eec:	42bc      	cmp	r4, r7
 8001eee:	d1c6      	bne.n	8001e7e <HAL_UART_Receive_IT+0x5e>
 8001ef0:	6918      	ldr	r0, [r3, #16]
 8001ef2:	2800      	cmp	r0, #0
 8001ef4:	d0f6      	beq.n	8001ee4 <HAL_UART_Receive_IT+0xc4>
 8001ef6:	203f      	movs	r0, #63	; 0x3f
 8001ef8:	e7c1      	b.n	8001e7e <HAL_UART_Receive_IT+0x5e>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8001efa:	4a0b      	ldr	r2, [pc, #44]	; (8001f28 <HAL_UART_Receive_IT+0x108>)
 8001efc:	e7dd      	b.n	8001eba <HAL_UART_Receive_IT+0x9a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001efe:	4284      	cmp	r4, r0
 8001f00:	d10c      	bne.n	8001f1c <HAL_UART_Receive_IT+0xfc>
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	2a00      	cmp	r2, #0
 8001f06:	d109      	bne.n	8001f1c <HAL_UART_Receive_IT+0xfc>
        huart->RxISR = UART_RxISR_16BIT;
 8001f08:	4a08      	ldr	r2, [pc, #32]	; (8001f2c <HAL_UART_Receive_IT+0x10c>)
        huart->RxISR = UART_RxISR_8BIT;
 8001f0a:	66da      	str	r2, [r3, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8001f0c:	2390      	movs	r3, #144	; 0x90
      __HAL_UNLOCK(huart);
 8001f0e:	2000      	movs	r0, #0
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8001f10:	680a      	ldr	r2, [r1, #0]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4313      	orrs	r3, r2
      __HAL_UNLOCK(huart);
 8001f16:	7028      	strb	r0, [r5, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8001f18:	600b      	str	r3, [r1, #0]
 8001f1a:	e7db      	b.n	8001ed4 <HAL_UART_Receive_IT+0xb4>
        huart->RxISR = UART_RxISR_8BIT;
 8001f1c:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <HAL_UART_Receive_IT+0x110>)
 8001f1e:	e7f4      	b.n	8001f0a <HAL_UART_Receive_IT+0xea>
 8001f20:	000001ff 	.word	0x000001ff
 8001f24:	080020a9 	.word	0x080020a9
 8001f28:	08001ffd 	.word	0x08001ffd
 8001f2c:	08001f9d 	.word	0x08001f9d
 8001f30:	08001f39 	.word	0x08001f39

08001f34 <HAL_UART_RxCpltCallback>:
 8001f34:	4770      	bx	lr
	...

08001f38 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8001f38:	b570      	push	{r4, r5, r6, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f3a:	0004      	movs	r4, r0
 8001f3c:	3408      	adds	r4, #8
 8001f3e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8001f40:	6803      	ldr	r3, [r0, #0]
 8001f42:	2a22      	cmp	r2, #34	; 0x22
 8001f44:	d123      	bne.n	8001f8e <UART_RxISR_8BIT+0x56>
  uint16_t uhMask = huart->Mask;
 8001f46:	0002      	movs	r2, r0
 8001f48:	3260      	adds	r2, #96	; 0x60
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001f4c:	8812      	ldrh	r2, [r2, #0]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001f52:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 8001f54:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 8001f56:	6d83      	ldr	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8001f58:	325e      	adds	r2, #94	; 0x5e
    huart->pRxBuffPtr++;
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8001f5e:	8813      	ldrh	r3, [r2, #0]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8001f66:	8813      	ldrh	r3, [r2, #0]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10e      	bne.n	8001f8c <UART_RxISR_8BIT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001f6e:	6802      	ldr	r2, [r0, #0]
 8001f70:	4d09      	ldr	r5, [pc, #36]	; (8001f98 <UART_RxISR_8BIT+0x60>)
 8001f72:	6811      	ldr	r1, [r2, #0]
 8001f74:	4029      	ands	r1, r5
 8001f76:	6011      	str	r1, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f78:	6891      	ldr	r1, [r2, #8]
 8001f7a:	3523      	adds	r5, #35	; 0x23
 8001f7c:	35ff      	adds	r5, #255	; 0xff
 8001f7e:	43a9      	bics	r1, r5
 8001f80:	6091      	str	r1, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001f82:	2220      	movs	r2, #32
 8001f84:	67e2      	str	r2, [r4, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8001f86:	66c3      	str	r3, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001f88:	f7ff ffd4 	bl	8001f34 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8001f8c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001f8e:	2208      	movs	r2, #8
 8001f90:	6999      	ldr	r1, [r3, #24]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	619a      	str	r2, [r3, #24]
}
 8001f96:	e7f9      	b.n	8001f8c <UART_RxISR_8BIT+0x54>
 8001f98:	fffffedf 	.word	0xfffffedf

08001f9c <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f9c:	0001      	movs	r1, r0
 8001f9e:	3108      	adds	r1, #8
 8001fa0:	6fca      	ldr	r2, [r1, #124]	; 0x7c
{
 8001fa2:	b570      	push	{r4, r5, r6, lr}
 8001fa4:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001fa6:	2a22      	cmp	r2, #34	; 0x22
 8001fa8:	d121      	bne.n	8001fee <UART_RxISR_16BIT+0x52>
  uint16_t uhMask = huart->Mask;
 8001faa:	0005      	movs	r5, r0
 8001fac:	3560      	adds	r5, #96	; 0x60
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001fae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8001fb0:	882d      	ldrh	r5, [r5, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8001fb2:	6d82      	ldr	r2, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8001fb4:	402c      	ands	r4, r5
 8001fb6:	8014      	strh	r4, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8001fb8:	0004      	movs	r4, r0
    huart->pRxBuffPtr += 2U;
 8001fba:	3202      	adds	r2, #2
 8001fbc:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8001fbe:	345e      	adds	r4, #94	; 0x5e
 8001fc0:	8822      	ldrh	r2, [r4, #0]
 8001fc2:	3a01      	subs	r2, #1
 8001fc4:	b292      	uxth	r2, r2
 8001fc6:	8022      	strh	r2, [r4, #0]

    if (huart->RxXferCount == 0U)
 8001fc8:	8822      	ldrh	r2, [r4, #0]
 8001fca:	b292      	uxth	r2, r2
 8001fcc:	2a00      	cmp	r2, #0
 8001fce:	d10d      	bne.n	8001fec <UART_RxISR_16BIT+0x50>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001fd0:	681c      	ldr	r4, [r3, #0]
 8001fd2:	4d09      	ldr	r5, [pc, #36]	; (8001ff8 <UART_RxISR_16BIT+0x5c>)
 8001fd4:	402c      	ands	r4, r5
 8001fd6:	601c      	str	r4, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fd8:	689c      	ldr	r4, [r3, #8]
 8001fda:	3523      	adds	r5, #35	; 0x23
 8001fdc:	35ff      	adds	r5, #255	; 0xff
 8001fde:	43ac      	bics	r4, r5
 8001fe0:	609c      	str	r4, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001fe2:	2320      	movs	r3, #32
 8001fe4:	67cb      	str	r3, [r1, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8001fe6:	66c2      	str	r2, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001fe8:	f7ff ffa4 	bl	8001f34 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8001fec:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001fee:	2208      	movs	r2, #8
 8001ff0:	6999      	ldr	r1, [r3, #24]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	619a      	str	r2, [r3, #24]
}
 8001ff6:	e7f9      	b.n	8001fec <UART_RxISR_16BIT+0x50>
 8001ff8:	fffffedf 	.word	0xfffffedf

08001ffc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8001ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001ffe:	0007      	movs	r7, r0
 8002000:	3708      	adds	r7, #8
 8002002:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
{
 8002004:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002006:	2b22      	cmp	r3, #34	; 0x22
 8002008:	d140      	bne.n	800208c <UART_RxISR_8BIT_FIFOEN+0x90>
  uint16_t  uhMask = huart->Mask;
 800200a:	0003      	movs	r3, r0
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800200c:	0006      	movs	r6, r0
  uint16_t  uhMask = huart->Mask;
 800200e:	3360      	adds	r3, #96	; 0x60
 8002010:	881b      	ldrh	r3, [r3, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8002012:	3668      	adds	r6, #104	; 0x68
  uint16_t  uhMask = huart->Mask;
 8002014:	9301      	str	r3, [sp, #4]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8002016:	8835      	ldrh	r5, [r6, #0]
 8002018:	0022      	movs	r2, r4
 800201a:	325e      	adds	r2, #94	; 0x5e
 800201c:	2d00      	cmp	r5, #0
 800201e:	d112      	bne.n	8002046 <UART_RxISR_8BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8002020:	8813      	ldrh	r3, [r2, #0]
 8002022:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00d      	beq.n	8002044 <UART_RxISR_8BIT_FIFOEN+0x48>
 8002028:	8832      	ldrh	r2, [r6, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d90a      	bls.n	8002044 <UART_RxISR_8BIT_FIFOEN+0x48>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800202e:	6823      	ldr	r3, [r4, #0]
 8002030:	4919      	ldr	r1, [pc, #100]	; (8002098 <UART_RxISR_8BIT_FIFOEN+0x9c>)
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	400a      	ands	r2, r1
 8002036:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8002038:	4a18      	ldr	r2, [pc, #96]	; (800209c <UART_RxISR_8BIT_FIFOEN+0xa0>)

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800203a:	6819      	ldr	r1, [r3, #0]
      huart->RxISR = UART_RxISR_8BIT;
 800203c:	66e2      	str	r2, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800203e:	2220      	movs	r2, #32
 8002040:	430a      	orrs	r2, r1
 8002042:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002044:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002046:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002048:	9901      	ldr	r1, [sp, #4]
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800204c:	400b      	ands	r3, r1
 800204e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002050:	700b      	strb	r3, [r1, #0]
      huart->pRxBuffPtr++;
 8002052:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002054:	3301      	adds	r3, #1
 8002056:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8002058:	8813      	ldrh	r3, [r2, #0]
 800205a:	3b01      	subs	r3, #1
 800205c:	b29b      	uxth	r3, r3
 800205e:	8013      	strh	r3, [r2, #0]
      if (huart->RxXferCount == 0U)
 8002060:	8813      	ldrh	r3, [r2, #0]
 8002062:	b29b      	uxth	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10e      	bne.n	8002086 <UART_RxISR_8BIT_FIFOEN+0x8a>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002068:	6822      	ldr	r2, [r4, #0]
 800206a:	480d      	ldr	r0, [pc, #52]	; (80020a0 <UART_RxISR_8BIT_FIFOEN+0xa4>)
 800206c:	6811      	ldr	r1, [r2, #0]
 800206e:	4001      	ands	r1, r0
 8002070:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002072:	6891      	ldr	r1, [r2, #8]
 8002074:	480b      	ldr	r0, [pc, #44]	; (80020a4 <UART_RxISR_8BIT_FIFOEN+0xa8>)
 8002076:	4001      	ands	r1, r0
 8002078:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800207a:	2220      	movs	r2, #32
        HAL_UART_RxCpltCallback(huart);
 800207c:	0020      	movs	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 800207e:	67fa      	str	r2, [r7, #124]	; 0x7c
        huart->RxISR = NULL;
 8002080:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 8002082:	f7ff ff57 	bl	8001f34 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8002086:	3d01      	subs	r5, #1
 8002088:	b2ad      	uxth	r5, r5
 800208a:	e7c5      	b.n	8002018 <UART_RxISR_8BIT_FIFOEN+0x1c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800208c:	2308      	movs	r3, #8
 800208e:	6802      	ldr	r2, [r0, #0]
 8002090:	6991      	ldr	r1, [r2, #24]
 8002092:	430b      	orrs	r3, r1
 8002094:	6193      	str	r3, [r2, #24]
}
 8002096:	e7d5      	b.n	8002044 <UART_RxISR_8BIT_FIFOEN+0x48>
 8002098:	efffffff 	.word	0xefffffff
 800209c:	08001f39 	.word	0x08001f39
 80020a0:	fffffeff 	.word	0xfffffeff
 80020a4:	effffffe 	.word	0xeffffffe

080020a8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80020a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80020aa:	0007      	movs	r7, r0
 80020ac:	3708      	adds	r7, #8
 80020ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
{
 80020b0:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80020b2:	2b22      	cmp	r3, #34	; 0x22
 80020b4:	d140      	bne.n	8002138 <UART_RxISR_16BIT_FIFOEN+0x90>
  uint16_t  uhMask = huart->Mask;
 80020b6:	0003      	movs	r3, r0
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80020b8:	0006      	movs	r6, r0
  uint16_t  uhMask = huart->Mask;
 80020ba:	3360      	adds	r3, #96	; 0x60
 80020bc:	881b      	ldrh	r3, [r3, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80020be:	3668      	adds	r6, #104	; 0x68
  uint16_t  uhMask = huart->Mask;
 80020c0:	9301      	str	r3, [sp, #4]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80020c2:	8835      	ldrh	r5, [r6, #0]
 80020c4:	0021      	movs	r1, r4
 80020c6:	315e      	adds	r1, #94	; 0x5e
 80020c8:	2d00      	cmp	r5, #0
 80020ca:	d112      	bne.n	80020f2 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80020cc:	880b      	ldrh	r3, [r1, #0]
 80020ce:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00d      	beq.n	80020f0 <UART_RxISR_16BIT_FIFOEN+0x48>
 80020d4:	8832      	ldrh	r2, [r6, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d90a      	bls.n	80020f0 <UART_RxISR_16BIT_FIFOEN+0x48>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80020da:	6823      	ldr	r3, [r4, #0]
 80020dc:	4919      	ldr	r1, [pc, #100]	; (8002144 <UART_RxISR_16BIT_FIFOEN+0x9c>)
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	400a      	ands	r2, r1
 80020e2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80020e4:	4a18      	ldr	r2, [pc, #96]	; (8002148 <UART_RxISR_16BIT_FIFOEN+0xa0>)

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80020e6:	6819      	ldr	r1, [r3, #0]
      huart->RxISR = UART_RxISR_16BIT;
 80020e8:	66e2      	str	r2, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80020ea:	2220      	movs	r2, #32
 80020ec:	430a      	orrs	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80020f0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80020f2:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80020f4:	6823      	ldr	r3, [r4, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80020f6:	4694      	mov	ip, r2
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80020f8:	6a58      	ldr	r0, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 80020fa:	9a01      	ldr	r2, [sp, #4]
 80020fc:	4010      	ands	r0, r2
 80020fe:	4662      	mov	r2, ip
 8002100:	8010      	strh	r0, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8002102:	3202      	adds	r2, #2
 8002104:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8002106:	880a      	ldrh	r2, [r1, #0]
 8002108:	3a01      	subs	r2, #1
 800210a:	b292      	uxth	r2, r2
 800210c:	800a      	strh	r2, [r1, #0]
      if (huart->RxXferCount == 0U)
 800210e:	880a      	ldrh	r2, [r1, #0]
 8002110:	b292      	uxth	r2, r2
 8002112:	2a00      	cmp	r2, #0
 8002114:	d10d      	bne.n	8002132 <UART_RxISR_16BIT_FIFOEN+0x8a>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002116:	6819      	ldr	r1, [r3, #0]
 8002118:	480c      	ldr	r0, [pc, #48]	; (800214c <UART_RxISR_16BIT_FIFOEN+0xa4>)
 800211a:	4001      	ands	r1, r0
 800211c:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800211e:	6899      	ldr	r1, [r3, #8]
 8002120:	480b      	ldr	r0, [pc, #44]	; (8002150 <UART_RxISR_16BIT_FIFOEN+0xa8>)
 8002122:	4001      	ands	r1, r0
 8002124:	6099      	str	r1, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8002126:	2320      	movs	r3, #32
        HAL_UART_RxCpltCallback(huart);
 8002128:	0020      	movs	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 800212a:	67fb      	str	r3, [r7, #124]	; 0x7c
        huart->RxISR = NULL;
 800212c:	66e2      	str	r2, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800212e:	f7ff ff01 	bl	8001f34 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8002132:	3d01      	subs	r5, #1
 8002134:	b2ad      	uxth	r5, r5
 8002136:	e7c5      	b.n	80020c4 <UART_RxISR_16BIT_FIFOEN+0x1c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002138:	2308      	movs	r3, #8
 800213a:	6802      	ldr	r2, [r0, #0]
 800213c:	6991      	ldr	r1, [r2, #24]
 800213e:	430b      	orrs	r3, r1
 8002140:	6193      	str	r3, [r2, #24]
}
 8002142:	e7d5      	b.n	80020f0 <UART_RxISR_16BIT_FIFOEN+0x48>
 8002144:	efffffff 	.word	0xefffffff
 8002148:	08001f9d 	.word	0x08001f9d
 800214c:	fffffeff 	.word	0xfffffeff
 8002150:	effffffe 	.word	0xeffffffe

08002154 <UART_SetConfig>:
{
 8002154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002156:	0004      	movs	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8002158:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800215a:	69c1      	ldr	r1, [r0, #28]
 800215c:	6883      	ldr	r3, [r0, #8]
 800215e:	6900      	ldr	r0, [r0, #16]
  tmpreg |= (uint32_t)huart->FifoMode;
 8002160:	6e65      	ldr	r5, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002162:	4303      	orrs	r3, r0
 8002164:	6960      	ldr	r0, [r4, #20]
 8002166:	4303      	orrs	r3, r0
 8002168:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800216a:	6810      	ldr	r0, [r2, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 800216c:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800216e:	4da4      	ldr	r5, [pc, #656]	; (8002400 <UART_SetConfig+0x2ac>)
 8002170:	4028      	ands	r0, r5
 8002172:	4303      	orrs	r3, r0
 8002174:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002176:	6853      	ldr	r3, [r2, #4]
 8002178:	48a2      	ldr	r0, [pc, #648]	; (8002404 <UART_SetConfig+0x2b0>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800217a:	4da3      	ldr	r5, [pc, #652]	; (8002408 <UART_SetConfig+0x2b4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800217c:	4003      	ands	r3, r0
 800217e:	68e0      	ldr	r0, [r4, #12]
 8002180:	4303      	orrs	r3, r0
 8002182:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002184:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002186:	42aa      	cmp	r2, r5
 8002188:	d001      	beq.n	800218e <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800218a:	6a23      	ldr	r3, [r4, #32]
 800218c:	4318      	orrs	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800218e:	6893      	ldr	r3, [r2, #8]
 8002190:	4e9e      	ldr	r6, [pc, #632]	; (800240c <UART_SetConfig+0x2b8>)
 8002192:	4033      	ands	r3, r6
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002194:	260f      	movs	r6, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002196:	4303      	orrs	r3, r0
 8002198:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800219a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800219c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800219e:	43b0      	bics	r0, r6
 80021a0:	4318      	orrs	r0, r3
 80021a2:	62d0      	str	r0, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021a4:	489a      	ldr	r0, [pc, #616]	; (8002410 <UART_SetConfig+0x2bc>)
 80021a6:	4282      	cmp	r2, r0
 80021a8:	d117      	bne.n	80021da <UART_SetConfig+0x86>
 80021aa:	2003      	movs	r0, #3
 80021ac:	4a99      	ldr	r2, [pc, #612]	; (8002414 <UART_SetConfig+0x2c0>)
 80021ae:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80021b0:	4002      	ands	r2, r0
 80021b2:	4899      	ldr	r0, [pc, #612]	; (8002418 <UART_SetConfig+0x2c4>)
 80021b4:	5c80      	ldrb	r0, [r0, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021b6:	2280      	movs	r2, #128	; 0x80
 80021b8:	0212      	lsls	r2, r2, #8
 80021ba:	4291      	cmp	r1, r2
 80021bc:	d000      	beq.n	80021c0 <UART_SetConfig+0x6c>
 80021be:	e289      	b.n	80026d4 <UART_SetConfig+0x580>
    switch (clocksource)
 80021c0:	2808      	cmp	r0, #8
 80021c2:	d82b      	bhi.n	800221c <UART_SetConfig+0xc8>
 80021c4:	f7fd ffb0 	bl	8000128 <__gnu_thumb1_case_uhi>
 80021c8:	002a037d 	.word	0x002a037d
 80021cc:	002a021a 	.word	0x002a021a
 80021d0:	002a024e 	.word	0x002a024e
 80021d4:	002a002a 	.word	0x002a002a
 80021d8:	0251      	.short	0x0251
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021da:	4890      	ldr	r0, [pc, #576]	; (800241c <UART_SetConfig+0x2c8>)
 80021dc:	4282      	cmp	r2, r0
 80021de:	d105      	bne.n	80021ec <UART_SetConfig+0x98>
 80021e0:	200c      	movs	r0, #12
 80021e2:	4a8c      	ldr	r2, [pc, #560]	; (8002414 <UART_SetConfig+0x2c0>)
 80021e4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80021e6:	4002      	ands	r2, r0
 80021e8:	488d      	ldr	r0, [pc, #564]	; (8002420 <UART_SetConfig+0x2cc>)
 80021ea:	e7e3      	b.n	80021b4 <UART_SetConfig+0x60>
 80021ec:	488d      	ldr	r0, [pc, #564]	; (8002424 <UART_SetConfig+0x2d0>)
 80021ee:	4282      	cmp	r2, r0
 80021f0:	d100      	bne.n	80021f4 <UART_SetConfig+0xa0>
 80021f2:	e361      	b.n	80028b8 <UART_SetConfig+0x764>
 80021f4:	488c      	ldr	r0, [pc, #560]	; (8002428 <UART_SetConfig+0x2d4>)
 80021f6:	4282      	cmp	r2, r0
 80021f8:	d100      	bne.n	80021fc <UART_SetConfig+0xa8>
 80021fa:	e35d      	b.n	80028b8 <UART_SetConfig+0x764>
 80021fc:	2010      	movs	r0, #16
 80021fe:	42aa      	cmp	r2, r5
 8002200:	d1d9      	bne.n	80021b6 <UART_SetConfig+0x62>
 8002202:	21c0      	movs	r1, #192	; 0xc0
 8002204:	2080      	movs	r0, #128	; 0x80
 8002206:	4a83      	ldr	r2, [pc, #524]	; (8002414 <UART_SetConfig+0x2c0>)
 8002208:	0109      	lsls	r1, r1, #4
 800220a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800220c:	00c0      	lsls	r0, r0, #3
 800220e:	400a      	ands	r2, r1
 8002210:	4282      	cmp	r2, r0
 8002212:	d100      	bne.n	8002216 <UART_SetConfig+0xc2>
 8002214:	e09c      	b.n	8002350 <UART_SetConfig+0x1fc>
 8002216:	d80d      	bhi.n	8002234 <UART_SetConfig+0xe0>
 8002218:	2a00      	cmp	r2, #0
 800221a:	d04e      	beq.n	80022ba <UART_SetConfig+0x166>
        ret = HAL_ERROR;
 800221c:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
 800221e:	0021      	movs	r1, r4
 8002220:	2301      	movs	r3, #1
 8002222:	316a      	adds	r1, #106	; 0x6a
 8002224:	800b      	strh	r3, [r1, #0]
  huart->NbRxDataToProcess = 1;
 8002226:	3902      	subs	r1, #2
 8002228:	800b      	strh	r3, [r1, #0]
  huart->RxISR = NULL;
 800222a:	2300      	movs	r3, #0
}
 800222c:	0010      	movs	r0, r2
  huart->RxISR = NULL;
 800222e:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 8002230:	6723      	str	r3, [r4, #112]	; 0x70
}
 8002232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002234:	2080      	movs	r0, #128	; 0x80
 8002236:	0100      	lsls	r0, r0, #4
 8002238:	4282      	cmp	r2, r0
 800223a:	d06e      	beq.n	800231a <UART_SetConfig+0x1c6>
 800223c:	428a      	cmp	r2, r1
 800223e:	d1ed      	bne.n	800221c <UART_SetConfig+0xc8>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002240:	2b00      	cmp	r3, #0
 8002242:	d100      	bne.n	8002246 <UART_SetConfig+0xf2>
 8002244:	e0c7      	b.n	80023d6 <UART_SetConfig+0x282>
 8002246:	2b01      	cmp	r3, #1
 8002248:	d100      	bne.n	800224c <UART_SetConfig+0xf8>
 800224a:	e0c7      	b.n	80023dc <UART_SetConfig+0x288>
 800224c:	2b02      	cmp	r3, #2
 800224e:	d100      	bne.n	8002252 <UART_SetConfig+0xfe>
 8002250:	e0c8      	b.n	80023e4 <UART_SetConfig+0x290>
 8002252:	2b03      	cmp	r3, #3
 8002254:	d100      	bne.n	8002258 <UART_SetConfig+0x104>
 8002256:	e0c8      	b.n	80023ea <UART_SetConfig+0x296>
 8002258:	2b04      	cmp	r3, #4
 800225a:	d100      	bne.n	800225e <UART_SetConfig+0x10a>
 800225c:	e0c7      	b.n	80023ee <UART_SetConfig+0x29a>
 800225e:	2b05      	cmp	r3, #5
 8002260:	d100      	bne.n	8002264 <UART_SetConfig+0x110>
 8002262:	e0c7      	b.n	80023f4 <UART_SetConfig+0x2a0>
 8002264:	2b06      	cmp	r3, #6
 8002266:	d100      	bne.n	800226a <UART_SetConfig+0x116>
 8002268:	e0c6      	b.n	80023f8 <UART_SetConfig+0x2a4>
 800226a:	2180      	movs	r1, #128	; 0x80
 800226c:	2b07      	cmp	r3, #7
 800226e:	d100      	bne.n	8002272 <UART_SetConfig+0x11e>
 8002270:	e0c4      	b.n	80023fc <UART_SetConfig+0x2a8>
 8002272:	2b08      	cmp	r3, #8
 8002274:	d100      	bne.n	8002278 <UART_SetConfig+0x124>
 8002276:	e0f7      	b.n	8002468 <UART_SetConfig+0x314>
 8002278:	2b09      	cmp	r3, #9
 800227a:	d100      	bne.n	800227e <UART_SetConfig+0x12a>
 800227c:	e0f6      	b.n	800246c <UART_SetConfig+0x318>
 800227e:	2b0a      	cmp	r3, #10
 8002280:	d100      	bne.n	8002284 <UART_SetConfig+0x130>
 8002282:	e0f5      	b.n	8002470 <UART_SetConfig+0x31c>
 8002284:	2b0b      	cmp	r3, #11
 8002286:	d000      	beq.n	800228a <UART_SetConfig+0x136>
 8002288:	e0a6      	b.n	80023d8 <UART_SetConfig+0x284>
 800228a:	3b03      	subs	r3, #3
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800228c:	2003      	movs	r0, #3
 800228e:	6862      	ldr	r2, [r4, #4]
 8002290:	4350      	muls	r0, r2
 8002292:	4288      	cmp	r0, r1
 8002294:	d8c2      	bhi.n	800221c <UART_SetConfig+0xc8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002296:	0310      	lsls	r0, r2, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002298:	4288      	cmp	r0, r1
 800229a:	d3bf      	bcc.n	800221c <UART_SetConfig+0xc8>
        switch (clocksource)
 800229c:	2b08      	cmp	r3, #8
 800229e:	d900      	bls.n	80022a2 <UART_SetConfig+0x14e>
 80022a0:	e1a9      	b.n	80025f6 <UART_SetConfig+0x4a2>
 80022a2:	0018      	movs	r0, r3
 80022a4:	f7fd ff40 	bl	8000128 <__gnu_thumb1_case_uhi>
 80022a8:	01a700e6 	.word	0x01a700e6
 80022ac:	01a70138 	.word	0x01a70138
 80022b0:	01a7016e 	.word	0x01a7016e
 80022b4:	01a701a7 	.word	0x01a701a7
 80022b8:	0171      	.short	0x0171
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80022ba:	f7ff f9f9 	bl	80016b0 <HAL_RCC_GetPCLK1Freq>
 80022be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022c0:	2101      	movs	r1, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d021      	beq.n	800230a <UART_SetConfig+0x1b6>
 80022c6:	1849      	adds	r1, r1, r1
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d01e      	beq.n	800230a <UART_SetConfig+0x1b6>
 80022cc:	3102      	adds	r1, #2
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d01b      	beq.n	800230a <UART_SetConfig+0x1b6>
 80022d2:	3102      	adds	r1, #2
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d018      	beq.n	800230a <UART_SetConfig+0x1b6>
 80022d8:	3102      	adds	r1, #2
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d015      	beq.n	800230a <UART_SetConfig+0x1b6>
 80022de:	3102      	adds	r1, #2
 80022e0:	2b05      	cmp	r3, #5
 80022e2:	d012      	beq.n	800230a <UART_SetConfig+0x1b6>
 80022e4:	3102      	adds	r1, #2
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d00f      	beq.n	800230a <UART_SetConfig+0x1b6>
 80022ea:	3104      	adds	r1, #4
 80022ec:	2b07      	cmp	r3, #7
 80022ee:	d00c      	beq.n	800230a <UART_SetConfig+0x1b6>
 80022f0:	3110      	adds	r1, #16
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d009      	beq.n	800230a <UART_SetConfig+0x1b6>
 80022f6:	3120      	adds	r1, #32
 80022f8:	2b09      	cmp	r3, #9
 80022fa:	d006      	beq.n	800230a <UART_SetConfig+0x1b6>
 80022fc:	3140      	adds	r1, #64	; 0x40
 80022fe:	2b0a      	cmp	r3, #10
 8002300:	d003      	beq.n	800230a <UART_SetConfig+0x1b6>
 8002302:	397f      	subs	r1, #127	; 0x7f
 8002304:	2b0b      	cmp	r3, #11
 8002306:	d100      	bne.n	800230a <UART_SetConfig+0x1b6>
 8002308:	31ff      	adds	r1, #255	; 0xff
 800230a:	f7fd ff17 	bl	800013c <__udivsi3>
        break;
 800230e:	2300      	movs	r3, #0
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002310:	0001      	movs	r1, r0
 8002312:	2200      	movs	r2, #0
    if (lpuart_ker_ck_pres != 0U)
 8002314:	4291      	cmp	r1, r2
 8002316:	d1b9      	bne.n	800228c <UART_SetConfig+0x138>
 8002318:	e781      	b.n	800221e <UART_SetConfig+0xca>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800231a:	2b00      	cmp	r3, #0
 800231c:	d059      	beq.n	80023d2 <UART_SetConfig+0x27e>
 800231e:	2b01      	cmp	r3, #1
 8002320:	d043      	beq.n	80023aa <UART_SetConfig+0x256>
 8002322:	2b02      	cmp	r3, #2
 8002324:	d043      	beq.n	80023ae <UART_SetConfig+0x25a>
 8002326:	2b03      	cmp	r3, #3
 8002328:	d043      	beq.n	80023b2 <UART_SetConfig+0x25e>
 800232a:	2b04      	cmp	r3, #4
 800232c:	d043      	beq.n	80023b6 <UART_SetConfig+0x262>
 800232e:	2b05      	cmp	r3, #5
 8002330:	d043      	beq.n	80023ba <UART_SetConfig+0x266>
 8002332:	2b06      	cmp	r3, #6
 8002334:	d043      	beq.n	80023be <UART_SetConfig+0x26a>
 8002336:	2b07      	cmp	r3, #7
 8002338:	d043      	beq.n	80023c2 <UART_SetConfig+0x26e>
 800233a:	2b08      	cmp	r3, #8
 800233c:	d043      	beq.n	80023c6 <UART_SetConfig+0x272>
 800233e:	2b09      	cmp	r3, #9
 8002340:	d043      	beq.n	80023ca <UART_SetConfig+0x276>
 8002342:	2b0a      	cmp	r3, #10
 8002344:	d043      	beq.n	80023ce <UART_SetConfig+0x27a>
 8002346:	2b0b      	cmp	r3, #11
 8002348:	d143      	bne.n	80023d2 <UART_SetConfig+0x27e>
 800234a:	4938      	ldr	r1, [pc, #224]	; (800242c <UART_SetConfig+0x2d8>)
 800234c:	2302      	movs	r3, #2
 800234e:	e79d      	b.n	800228c <UART_SetConfig+0x138>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002350:	f7ff f8ba 	bl	80014c8 <HAL_RCC_GetSysClockFreq>
 8002354:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002356:	2101      	movs	r1, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d021      	beq.n	80023a0 <UART_SetConfig+0x24c>
 800235c:	1849      	adds	r1, r1, r1
 800235e:	2b01      	cmp	r3, #1
 8002360:	d01e      	beq.n	80023a0 <UART_SetConfig+0x24c>
 8002362:	3102      	adds	r1, #2
 8002364:	2b02      	cmp	r3, #2
 8002366:	d01b      	beq.n	80023a0 <UART_SetConfig+0x24c>
 8002368:	3102      	adds	r1, #2
 800236a:	2b03      	cmp	r3, #3
 800236c:	d018      	beq.n	80023a0 <UART_SetConfig+0x24c>
 800236e:	3102      	adds	r1, #2
 8002370:	2b04      	cmp	r3, #4
 8002372:	d015      	beq.n	80023a0 <UART_SetConfig+0x24c>
 8002374:	3102      	adds	r1, #2
 8002376:	2b05      	cmp	r3, #5
 8002378:	d012      	beq.n	80023a0 <UART_SetConfig+0x24c>
 800237a:	3102      	adds	r1, #2
 800237c:	2b06      	cmp	r3, #6
 800237e:	d00f      	beq.n	80023a0 <UART_SetConfig+0x24c>
 8002380:	3104      	adds	r1, #4
 8002382:	2b07      	cmp	r3, #7
 8002384:	d00c      	beq.n	80023a0 <UART_SetConfig+0x24c>
 8002386:	3110      	adds	r1, #16
 8002388:	2b08      	cmp	r3, #8
 800238a:	d009      	beq.n	80023a0 <UART_SetConfig+0x24c>
 800238c:	3120      	adds	r1, #32
 800238e:	2b09      	cmp	r3, #9
 8002390:	d006      	beq.n	80023a0 <UART_SetConfig+0x24c>
 8002392:	3140      	adds	r1, #64	; 0x40
 8002394:	2b0a      	cmp	r3, #10
 8002396:	d003      	beq.n	80023a0 <UART_SetConfig+0x24c>
 8002398:	397f      	subs	r1, #127	; 0x7f
 800239a:	2b0b      	cmp	r3, #11
 800239c:	d100      	bne.n	80023a0 <UART_SetConfig+0x24c>
 800239e:	31ff      	adds	r1, #255	; 0xff
 80023a0:	f7fd fecc 	bl	800013c <__udivsi3>
        break;
 80023a4:	2304      	movs	r3, #4
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80023a6:	0001      	movs	r1, r0
        break;
 80023a8:	e7b3      	b.n	8002312 <UART_SetConfig+0x1be>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80023aa:	4921      	ldr	r1, [pc, #132]	; (8002430 <UART_SetConfig+0x2dc>)
 80023ac:	e7ce      	b.n	800234c <UART_SetConfig+0x1f8>
 80023ae:	4921      	ldr	r1, [pc, #132]	; (8002434 <UART_SetConfig+0x2e0>)
 80023b0:	e76c      	b.n	800228c <UART_SetConfig+0x138>
 80023b2:	4921      	ldr	r1, [pc, #132]	; (8002438 <UART_SetConfig+0x2e4>)
 80023b4:	e7ca      	b.n	800234c <UART_SetConfig+0x1f8>
 80023b6:	4921      	ldr	r1, [pc, #132]	; (800243c <UART_SetConfig+0x2e8>)
 80023b8:	e7c8      	b.n	800234c <UART_SetConfig+0x1f8>
 80023ba:	4921      	ldr	r1, [pc, #132]	; (8002440 <UART_SetConfig+0x2ec>)
 80023bc:	e7c6      	b.n	800234c <UART_SetConfig+0x1f8>
 80023be:	4921      	ldr	r1, [pc, #132]	; (8002444 <UART_SetConfig+0x2f0>)
 80023c0:	e7c4      	b.n	800234c <UART_SetConfig+0x1f8>
 80023c2:	4921      	ldr	r1, [pc, #132]	; (8002448 <UART_SetConfig+0x2f4>)
 80023c4:	e7c2      	b.n	800234c <UART_SetConfig+0x1f8>
 80023c6:	4921      	ldr	r1, [pc, #132]	; (800244c <UART_SetConfig+0x2f8>)
 80023c8:	e7c0      	b.n	800234c <UART_SetConfig+0x1f8>
 80023ca:	4921      	ldr	r1, [pc, #132]	; (8002450 <UART_SetConfig+0x2fc>)
 80023cc:	e7be      	b.n	800234c <UART_SetConfig+0x1f8>
 80023ce:	4921      	ldr	r1, [pc, #132]	; (8002454 <UART_SetConfig+0x300>)
 80023d0:	e7bc      	b.n	800234c <UART_SetConfig+0x1f8>
 80023d2:	4921      	ldr	r1, [pc, #132]	; (8002458 <UART_SetConfig+0x304>)
 80023d4:	e7ba      	b.n	800234c <UART_SetConfig+0x1f8>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80023d6:	2180      	movs	r1, #128	; 0x80
 80023d8:	0209      	lsls	r1, r1, #8
 80023da:	e001      	b.n	80023e0 <UART_SetConfig+0x28c>
 80023dc:	2180      	movs	r1, #128	; 0x80
 80023de:	01c9      	lsls	r1, r1, #7
 80023e0:	2308      	movs	r3, #8
 80023e2:	e753      	b.n	800228c <UART_SetConfig+0x138>
 80023e4:	2180      	movs	r1, #128	; 0x80
 80023e6:	0189      	lsls	r1, r1, #6
 80023e8:	e7fa      	b.n	80023e0 <UART_SetConfig+0x28c>
 80023ea:	491c      	ldr	r1, [pc, #112]	; (800245c <UART_SetConfig+0x308>)
 80023ec:	e7f8      	b.n	80023e0 <UART_SetConfig+0x28c>
 80023ee:	2180      	movs	r1, #128	; 0x80
 80023f0:	0149      	lsls	r1, r1, #5
 80023f2:	e7f5      	b.n	80023e0 <UART_SetConfig+0x28c>
 80023f4:	491a      	ldr	r1, [pc, #104]	; (8002460 <UART_SetConfig+0x30c>)
 80023f6:	e7f3      	b.n	80023e0 <UART_SetConfig+0x28c>
 80023f8:	491a      	ldr	r1, [pc, #104]	; (8002464 <UART_SetConfig+0x310>)
 80023fa:	e7f1      	b.n	80023e0 <UART_SetConfig+0x28c>
 80023fc:	0109      	lsls	r1, r1, #4
 80023fe:	e7ef      	b.n	80023e0 <UART_SetConfig+0x28c>
 8002400:	cfff69f3 	.word	0xcfff69f3
 8002404:	ffffcfff 	.word	0xffffcfff
 8002408:	40008000 	.word	0x40008000
 800240c:	11fff4ff 	.word	0x11fff4ff
 8002410:	40013800 	.word	0x40013800
 8002414:	40021000 	.word	0x40021000
 8002418:	08003830 	.word	0x08003830
 800241c:	40004400 	.word	0x40004400
 8002420:	08003834 	.word	0x08003834
 8002424:	40004800 	.word	0x40004800
 8002428:	40004c00 	.word	0x40004c00
 800242c:	0000f424 	.word	0x0000f424
 8002430:	007a1200 	.word	0x007a1200
 8002434:	003d0900 	.word	0x003d0900
 8002438:	0028b0aa 	.word	0x0028b0aa
 800243c:	001e8480 	.word	0x001e8480
 8002440:	00186a00 	.word	0x00186a00
 8002444:	00145855 	.word	0x00145855
 8002448:	000f4240 	.word	0x000f4240
 800244c:	0007a120 	.word	0x0007a120
 8002450:	0003d090 	.word	0x0003d090
 8002454:	0001e848 	.word	0x0001e848
 8002458:	00f42400 	.word	0x00f42400
 800245c:	00001555 	.word	0x00001555
 8002460:	00000ccc 	.word	0x00000ccc
 8002464:	00000aaa 	.word	0x00000aaa
 8002468:	00c9      	lsls	r1, r1, #3
 800246a:	e70f      	b.n	800228c <UART_SetConfig+0x138>
 800246c:	0089      	lsls	r1, r1, #2
 800246e:	e7b7      	b.n	80023e0 <UART_SetConfig+0x28c>
 8002470:	0049      	lsls	r1, r1, #1
 8002472:	e7b5      	b.n	80023e0 <UART_SetConfig+0x28c>
            pclk = HAL_RCC_GetPCLK1Freq();
 8002474:	f7ff f91c 	bl	80016b0 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002478:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800247a:	2201      	movs	r2, #1
 800247c:	2300      	movs	r3, #0
 800247e:	2900      	cmp	r1, #0
 8002480:	d02e      	beq.n	80024e0 <UART_SetConfig+0x38c>
 8002482:	2202      	movs	r2, #2
 8002484:	2300      	movs	r3, #0
 8002486:	2901      	cmp	r1, #1
 8002488:	d02a      	beq.n	80024e0 <UART_SetConfig+0x38c>
 800248a:	2204      	movs	r2, #4
 800248c:	2300      	movs	r3, #0
 800248e:	2902      	cmp	r1, #2
 8002490:	d026      	beq.n	80024e0 <UART_SetConfig+0x38c>
 8002492:	2206      	movs	r2, #6
 8002494:	2300      	movs	r3, #0
 8002496:	2903      	cmp	r1, #3
 8002498:	d022      	beq.n	80024e0 <UART_SetConfig+0x38c>
 800249a:	2208      	movs	r2, #8
 800249c:	2300      	movs	r3, #0
 800249e:	2904      	cmp	r1, #4
 80024a0:	d01e      	beq.n	80024e0 <UART_SetConfig+0x38c>
 80024a2:	220a      	movs	r2, #10
 80024a4:	2300      	movs	r3, #0
 80024a6:	2905      	cmp	r1, #5
 80024a8:	d01a      	beq.n	80024e0 <UART_SetConfig+0x38c>
 80024aa:	220c      	movs	r2, #12
 80024ac:	2300      	movs	r3, #0
 80024ae:	2906      	cmp	r1, #6
 80024b0:	d016      	beq.n	80024e0 <UART_SetConfig+0x38c>
 80024b2:	2210      	movs	r2, #16
 80024b4:	2300      	movs	r3, #0
 80024b6:	2907      	cmp	r1, #7
 80024b8:	d012      	beq.n	80024e0 <UART_SetConfig+0x38c>
 80024ba:	2220      	movs	r2, #32
 80024bc:	2300      	movs	r3, #0
 80024be:	2908      	cmp	r1, #8
 80024c0:	d00e      	beq.n	80024e0 <UART_SetConfig+0x38c>
 80024c2:	2240      	movs	r2, #64	; 0x40
 80024c4:	2300      	movs	r3, #0
 80024c6:	2909      	cmp	r1, #9
 80024c8:	d00a      	beq.n	80024e0 <UART_SetConfig+0x38c>
 80024ca:	2280      	movs	r2, #128	; 0x80
 80024cc:	2300      	movs	r3, #0
 80024ce:	290a      	cmp	r1, #10
 80024d0:	d006      	beq.n	80024e0 <UART_SetConfig+0x38c>
 80024d2:	2201      	movs	r2, #1
 80024d4:	2300      	movs	r3, #0
 80024d6:	290b      	cmp	r1, #11
 80024d8:	d102      	bne.n	80024e0 <UART_SetConfig+0x38c>
 80024da:	2280      	movs	r2, #128	; 0x80
 80024dc:	2300      	movs	r3, #0
 80024de:	0052      	lsls	r2, r2, #1
 80024e0:	2100      	movs	r1, #0
 80024e2:	f7fd ffa1 	bl	8000428 <__aeabi_uldivmod>
 80024e6:	2700      	movs	r7, #0
 80024e8:	6865      	ldr	r5, [r4, #4]
 80024ea:	0e06      	lsrs	r6, r0, #24
 80024ec:	020b      	lsls	r3, r1, #8
 80024ee:	4333      	orrs	r3, r6
 80024f0:	0202      	lsls	r2, r0, #8
 80024f2:	086e      	lsrs	r6, r5, #1
 80024f4:	1992      	adds	r2, r2, r6
 80024f6:	417b      	adcs	r3, r7
 80024f8:	0010      	movs	r0, r2
 80024fa:	0019      	movs	r1, r3
 80024fc:	002a      	movs	r2, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80024fe:	003b      	movs	r3, r7
 8002500:	f7fd ff92 	bl	8000428 <__aeabi_uldivmod>
            break;
 8002504:	003a      	movs	r2, r7
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002506:	4b96      	ldr	r3, [pc, #600]	; (8002760 <UART_SetConfig+0x60c>)
 8002508:	4996      	ldr	r1, [pc, #600]	; (8002764 <UART_SetConfig+0x610>)
 800250a:	18c3      	adds	r3, r0, r3
 800250c:	428b      	cmp	r3, r1
 800250e:	d900      	bls.n	8002512 <UART_SetConfig+0x3be>
 8002510:	e684      	b.n	800221c <UART_SetConfig+0xc8>
          huart->Instance->BRR = usartdiv;
 8002512:	6823      	ldr	r3, [r4, #0]
 8002514:	60d8      	str	r0, [r3, #12]
 8002516:	e682      	b.n	800221e <UART_SetConfig+0xca>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002518:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800251a:	2b00      	cmp	r3, #0
 800251c:	d030      	beq.n	8002580 <UART_SetConfig+0x42c>
 800251e:	2b01      	cmp	r3, #1
 8002520:	d01a      	beq.n	8002558 <UART_SetConfig+0x404>
 8002522:	2b02      	cmp	r3, #2
 8002524:	d01a      	beq.n	800255c <UART_SetConfig+0x408>
 8002526:	2b03      	cmp	r3, #3
 8002528:	d01a      	beq.n	8002560 <UART_SetConfig+0x40c>
 800252a:	2b04      	cmp	r3, #4
 800252c:	d01a      	beq.n	8002564 <UART_SetConfig+0x410>
 800252e:	2b05      	cmp	r3, #5
 8002530:	d01a      	beq.n	8002568 <UART_SetConfig+0x414>
 8002532:	2b06      	cmp	r3, #6
 8002534:	d01a      	beq.n	800256c <UART_SetConfig+0x418>
 8002536:	2b07      	cmp	r3, #7
 8002538:	d01a      	beq.n	8002570 <UART_SetConfig+0x41c>
 800253a:	2b08      	cmp	r3, #8
 800253c:	d01a      	beq.n	8002574 <UART_SetConfig+0x420>
 800253e:	2b09      	cmp	r3, #9
 8002540:	d01a      	beq.n	8002578 <UART_SetConfig+0x424>
 8002542:	2b0a      	cmp	r3, #10
 8002544:	d01a      	beq.n	800257c <UART_SetConfig+0x428>
 8002546:	2b0b      	cmp	r3, #11
 8002548:	d11a      	bne.n	8002580 <UART_SetConfig+0x42c>
 800254a:	4887      	ldr	r0, [pc, #540]	; (8002768 <UART_SetConfig+0x614>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800254c:	2100      	movs	r1, #0
 800254e:	2700      	movs	r7, #0
 8002550:	0856      	lsrs	r6, r2, #1
 8002552:	1980      	adds	r0, r0, r6
 8002554:	4179      	adcs	r1, r7
 8002556:	e7d2      	b.n	80024fe <UART_SetConfig+0x3aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002558:	4884      	ldr	r0, [pc, #528]	; (800276c <UART_SetConfig+0x618>)
 800255a:	e7f7      	b.n	800254c <UART_SetConfig+0x3f8>
 800255c:	4884      	ldr	r0, [pc, #528]	; (8002770 <UART_SetConfig+0x61c>)
 800255e:	e7f5      	b.n	800254c <UART_SetConfig+0x3f8>
 8002560:	4884      	ldr	r0, [pc, #528]	; (8002774 <UART_SetConfig+0x620>)
 8002562:	e7f3      	b.n	800254c <UART_SetConfig+0x3f8>
 8002564:	4884      	ldr	r0, [pc, #528]	; (8002778 <UART_SetConfig+0x624>)
 8002566:	e7f1      	b.n	800254c <UART_SetConfig+0x3f8>
 8002568:	4884      	ldr	r0, [pc, #528]	; (800277c <UART_SetConfig+0x628>)
 800256a:	e7ef      	b.n	800254c <UART_SetConfig+0x3f8>
 800256c:	4884      	ldr	r0, [pc, #528]	; (8002780 <UART_SetConfig+0x62c>)
 800256e:	e7ed      	b.n	800254c <UART_SetConfig+0x3f8>
 8002570:	4884      	ldr	r0, [pc, #528]	; (8002784 <UART_SetConfig+0x630>)
 8002572:	e7eb      	b.n	800254c <UART_SetConfig+0x3f8>
 8002574:	4884      	ldr	r0, [pc, #528]	; (8002788 <UART_SetConfig+0x634>)
 8002576:	e7e9      	b.n	800254c <UART_SetConfig+0x3f8>
 8002578:	4884      	ldr	r0, [pc, #528]	; (800278c <UART_SetConfig+0x638>)
 800257a:	e7e7      	b.n	800254c <UART_SetConfig+0x3f8>
 800257c:	4884      	ldr	r0, [pc, #528]	; (8002790 <UART_SetConfig+0x63c>)
 800257e:	e7e5      	b.n	800254c <UART_SetConfig+0x3f8>
 8002580:	4884      	ldr	r0, [pc, #528]	; (8002794 <UART_SetConfig+0x640>)
 8002582:	e7e3      	b.n	800254c <UART_SetConfig+0x3f8>
            pclk = HAL_RCC_GetSysClockFreq();
 8002584:	f7fe ffa0 	bl	80014c8 <HAL_RCC_GetSysClockFreq>
 8002588:	e776      	b.n	8002478 <UART_SetConfig+0x324>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800258a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800258c:	2b00      	cmp	r3, #0
 800258e:	d018      	beq.n	80025c2 <UART_SetConfig+0x46e>
 8002590:	2b01      	cmp	r3, #1
 8002592:	d019      	beq.n	80025c8 <UART_SetConfig+0x474>
 8002594:	2b02      	cmp	r3, #2
 8002596:	d01a      	beq.n	80025ce <UART_SetConfig+0x47a>
 8002598:	2b03      	cmp	r3, #3
 800259a:	d01b      	beq.n	80025d4 <UART_SetConfig+0x480>
 800259c:	2b04      	cmp	r3, #4
 800259e:	d01b      	beq.n	80025d8 <UART_SetConfig+0x484>
 80025a0:	2b05      	cmp	r3, #5
 80025a2:	d01c      	beq.n	80025de <UART_SetConfig+0x48a>
 80025a4:	2b06      	cmp	r3, #6
 80025a6:	d01c      	beq.n	80025e2 <UART_SetConfig+0x48e>
 80025a8:	2080      	movs	r0, #128	; 0x80
 80025aa:	2b07      	cmp	r3, #7
 80025ac:	d01b      	beq.n	80025e6 <UART_SetConfig+0x492>
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d01b      	beq.n	80025ea <UART_SetConfig+0x496>
 80025b2:	2b09      	cmp	r3, #9
 80025b4:	d01b      	beq.n	80025ee <UART_SetConfig+0x49a>
 80025b6:	2b0a      	cmp	r3, #10
 80025b8:	d01b      	beq.n	80025f2 <UART_SetConfig+0x49e>
 80025ba:	2b0b      	cmp	r3, #11
 80025bc:	d102      	bne.n	80025c4 <UART_SetConfig+0x470>
 80025be:	0200      	lsls	r0, r0, #8
 80025c0:	e7c4      	b.n	800254c <UART_SetConfig+0x3f8>
 80025c2:	2080      	movs	r0, #128	; 0x80
 80025c4:	0400      	lsls	r0, r0, #16
 80025c6:	e7c1      	b.n	800254c <UART_SetConfig+0x3f8>
 80025c8:	2080      	movs	r0, #128	; 0x80
 80025ca:	03c0      	lsls	r0, r0, #15
 80025cc:	e7be      	b.n	800254c <UART_SetConfig+0x3f8>
 80025ce:	2080      	movs	r0, #128	; 0x80
 80025d0:	0380      	lsls	r0, r0, #14
 80025d2:	e7bb      	b.n	800254c <UART_SetConfig+0x3f8>
 80025d4:	4870      	ldr	r0, [pc, #448]	; (8002798 <UART_SetConfig+0x644>)
 80025d6:	e7b9      	b.n	800254c <UART_SetConfig+0x3f8>
 80025d8:	2080      	movs	r0, #128	; 0x80
 80025da:	0340      	lsls	r0, r0, #13
 80025dc:	e7b6      	b.n	800254c <UART_SetConfig+0x3f8>
 80025de:	486f      	ldr	r0, [pc, #444]	; (800279c <UART_SetConfig+0x648>)
 80025e0:	e7b4      	b.n	800254c <UART_SetConfig+0x3f8>
 80025e2:	486f      	ldr	r0, [pc, #444]	; (80027a0 <UART_SetConfig+0x64c>)
 80025e4:	e7b2      	b.n	800254c <UART_SetConfig+0x3f8>
 80025e6:	0300      	lsls	r0, r0, #12
 80025e8:	e7b0      	b.n	800254c <UART_SetConfig+0x3f8>
 80025ea:	02c0      	lsls	r0, r0, #11
 80025ec:	e7ae      	b.n	800254c <UART_SetConfig+0x3f8>
 80025ee:	0280      	lsls	r0, r0, #10
 80025f0:	e7ac      	b.n	800254c <UART_SetConfig+0x3f8>
 80025f2:	0240      	lsls	r0, r0, #9
 80025f4:	e7aa      	b.n	800254c <UART_SetConfig+0x3f8>
            ret = HAL_ERROR;
 80025f6:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80025f8:	2000      	movs	r0, #0
 80025fa:	e784      	b.n	8002506 <UART_SetConfig+0x3b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d02f      	beq.n	8002660 <UART_SetConfig+0x50c>
 8002600:	2b01      	cmp	r3, #1
 8002602:	d019      	beq.n	8002638 <UART_SetConfig+0x4e4>
 8002604:	2b02      	cmp	r3, #2
 8002606:	d019      	beq.n	800263c <UART_SetConfig+0x4e8>
 8002608:	2b03      	cmp	r3, #3
 800260a:	d019      	beq.n	8002640 <UART_SetConfig+0x4ec>
 800260c:	2b04      	cmp	r3, #4
 800260e:	d019      	beq.n	8002644 <UART_SetConfig+0x4f0>
 8002610:	2b05      	cmp	r3, #5
 8002612:	d019      	beq.n	8002648 <UART_SetConfig+0x4f4>
 8002614:	2b06      	cmp	r3, #6
 8002616:	d019      	beq.n	800264c <UART_SetConfig+0x4f8>
 8002618:	2b07      	cmp	r3, #7
 800261a:	d019      	beq.n	8002650 <UART_SetConfig+0x4fc>
 800261c:	2b08      	cmp	r3, #8
 800261e:	d019      	beq.n	8002654 <UART_SetConfig+0x500>
 8002620:	2b09      	cmp	r3, #9
 8002622:	d019      	beq.n	8002658 <UART_SetConfig+0x504>
 8002624:	2b0a      	cmp	r3, #10
 8002626:	d019      	beq.n	800265c <UART_SetConfig+0x508>
 8002628:	2b0b      	cmp	r3, #11
 800262a:	d119      	bne.n	8002660 <UART_SetConfig+0x50c>
 800262c:	485d      	ldr	r0, [pc, #372]	; (80027a4 <UART_SetConfig+0x650>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800262e:	6863      	ldr	r3, [r4, #4]
 8002630:	6861      	ldr	r1, [r4, #4]
 8002632:	085b      	lsrs	r3, r3, #1
 8002634:	1818      	adds	r0, r3, r0
 8002636:	e173      	b.n	8002920 <UART_SetConfig+0x7cc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002638:	484b      	ldr	r0, [pc, #300]	; (8002768 <UART_SetConfig+0x614>)
 800263a:	e7f8      	b.n	800262e <UART_SetConfig+0x4da>
 800263c:	485a      	ldr	r0, [pc, #360]	; (80027a8 <UART_SetConfig+0x654>)
 800263e:	e7f6      	b.n	800262e <UART_SetConfig+0x4da>
 8002640:	485a      	ldr	r0, [pc, #360]	; (80027ac <UART_SetConfig+0x658>)
 8002642:	e7f4      	b.n	800262e <UART_SetConfig+0x4da>
 8002644:	485a      	ldr	r0, [pc, #360]	; (80027b0 <UART_SetConfig+0x65c>)
 8002646:	e7f2      	b.n	800262e <UART_SetConfig+0x4da>
 8002648:	485a      	ldr	r0, [pc, #360]	; (80027b4 <UART_SetConfig+0x660>)
 800264a:	e7f0      	b.n	800262e <UART_SetConfig+0x4da>
 800264c:	485a      	ldr	r0, [pc, #360]	; (80027b8 <UART_SetConfig+0x664>)
 800264e:	e7ee      	b.n	800262e <UART_SetConfig+0x4da>
 8002650:	485a      	ldr	r0, [pc, #360]	; (80027bc <UART_SetConfig+0x668>)
 8002652:	e7ec      	b.n	800262e <UART_SetConfig+0x4da>
 8002654:	485a      	ldr	r0, [pc, #360]	; (80027c0 <UART_SetConfig+0x66c>)
 8002656:	e7ea      	b.n	800262e <UART_SetConfig+0x4da>
 8002658:	485a      	ldr	r0, [pc, #360]	; (80027c4 <UART_SetConfig+0x670>)
 800265a:	e7e8      	b.n	800262e <UART_SetConfig+0x4da>
 800265c:	485a      	ldr	r0, [pc, #360]	; (80027c8 <UART_SetConfig+0x674>)
 800265e:	e7e6      	b.n	800262e <UART_SetConfig+0x4da>
 8002660:	484b      	ldr	r0, [pc, #300]	; (8002790 <UART_SetConfig+0x63c>)
 8002662:	e7e4      	b.n	800262e <UART_SetConfig+0x4da>
        pclk = HAL_RCC_GetSysClockFreq();
 8002664:	f7fe ff30 	bl	80014c8 <HAL_RCC_GetSysClockFreq>
 8002668:	e12d      	b.n	80028c6 <UART_SetConfig+0x772>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800266a:	2b00      	cmp	r3, #0
 800266c:	d018      	beq.n	80026a0 <UART_SetConfig+0x54c>
 800266e:	2b01      	cmp	r3, #1
 8002670:	d019      	beq.n	80026a6 <UART_SetConfig+0x552>
 8002672:	2b02      	cmp	r3, #2
 8002674:	d01a      	beq.n	80026ac <UART_SetConfig+0x558>
 8002676:	2b03      	cmp	r3, #3
 8002678:	d01b      	beq.n	80026b2 <UART_SetConfig+0x55e>
 800267a:	2b04      	cmp	r3, #4
 800267c:	d01b      	beq.n	80026b6 <UART_SetConfig+0x562>
 800267e:	2b05      	cmp	r3, #5
 8002680:	d01c      	beq.n	80026bc <UART_SetConfig+0x568>
 8002682:	2b06      	cmp	r3, #6
 8002684:	d01c      	beq.n	80026c0 <UART_SetConfig+0x56c>
 8002686:	2080      	movs	r0, #128	; 0x80
 8002688:	2b07      	cmp	r3, #7
 800268a:	d01b      	beq.n	80026c4 <UART_SetConfig+0x570>
 800268c:	2b08      	cmp	r3, #8
 800268e:	d01b      	beq.n	80026c8 <UART_SetConfig+0x574>
 8002690:	2b09      	cmp	r3, #9
 8002692:	d01b      	beq.n	80026cc <UART_SetConfig+0x578>
 8002694:	2b0a      	cmp	r3, #10
 8002696:	d01b      	beq.n	80026d0 <UART_SetConfig+0x57c>
 8002698:	2b0b      	cmp	r3, #11
 800269a:	d102      	bne.n	80026a2 <UART_SetConfig+0x54e>
 800269c:	0040      	lsls	r0, r0, #1
 800269e:	e7c6      	b.n	800262e <UART_SetConfig+0x4da>
 80026a0:	2080      	movs	r0, #128	; 0x80
 80026a2:	0240      	lsls	r0, r0, #9
 80026a4:	e7c3      	b.n	800262e <UART_SetConfig+0x4da>
 80026a6:	2080      	movs	r0, #128	; 0x80
 80026a8:	0200      	lsls	r0, r0, #8
 80026aa:	e7c0      	b.n	800262e <UART_SetConfig+0x4da>
 80026ac:	2080      	movs	r0, #128	; 0x80
 80026ae:	01c0      	lsls	r0, r0, #7
 80026b0:	e7bd      	b.n	800262e <UART_SetConfig+0x4da>
 80026b2:	4846      	ldr	r0, [pc, #280]	; (80027cc <UART_SetConfig+0x678>)
 80026b4:	e7bb      	b.n	800262e <UART_SetConfig+0x4da>
 80026b6:	2080      	movs	r0, #128	; 0x80
 80026b8:	0180      	lsls	r0, r0, #6
 80026ba:	e7b8      	b.n	800262e <UART_SetConfig+0x4da>
 80026bc:	4844      	ldr	r0, [pc, #272]	; (80027d0 <UART_SetConfig+0x67c>)
 80026be:	e7b6      	b.n	800262e <UART_SetConfig+0x4da>
 80026c0:	4844      	ldr	r0, [pc, #272]	; (80027d4 <UART_SetConfig+0x680>)
 80026c2:	e7b4      	b.n	800262e <UART_SetConfig+0x4da>
 80026c4:	0140      	lsls	r0, r0, #5
 80026c6:	e7b2      	b.n	800262e <UART_SetConfig+0x4da>
 80026c8:	0100      	lsls	r0, r0, #4
 80026ca:	e7b0      	b.n	800262e <UART_SetConfig+0x4da>
 80026cc:	00c0      	lsls	r0, r0, #3
 80026ce:	e7ae      	b.n	800262e <UART_SetConfig+0x4da>
 80026d0:	0080      	lsls	r0, r0, #2
 80026d2:	e7ac      	b.n	800262e <UART_SetConfig+0x4da>
    switch (clocksource)
 80026d4:	2808      	cmp	r0, #8
 80026d6:	d900      	bls.n	80026da <UART_SetConfig+0x586>
 80026d8:	e0eb      	b.n	80028b2 <UART_SetConfig+0x75e>
 80026da:	f7fd fd1b 	bl	8000114 <__gnu_thumb1_case_uqi>
 80026de:	ea05      	.short	0xea05
 80026e0:	eab3ea7f 	.word	0xeab3ea7f
 80026e4:	eaea      	.short	0xeaea
 80026e6:	b6          	.byte	0xb6
 80026e7:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 80026e8:	f7fe ffe2 	bl	80016b0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026ee:	2101      	movs	r1, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d021      	beq.n	8002738 <UART_SetConfig+0x5e4>
 80026f4:	1849      	adds	r1, r1, r1
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d01e      	beq.n	8002738 <UART_SetConfig+0x5e4>
 80026fa:	3102      	adds	r1, #2
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d01b      	beq.n	8002738 <UART_SetConfig+0x5e4>
 8002700:	3102      	adds	r1, #2
 8002702:	2b03      	cmp	r3, #3
 8002704:	d018      	beq.n	8002738 <UART_SetConfig+0x5e4>
 8002706:	3102      	adds	r1, #2
 8002708:	2b04      	cmp	r3, #4
 800270a:	d015      	beq.n	8002738 <UART_SetConfig+0x5e4>
 800270c:	3102      	adds	r1, #2
 800270e:	2b05      	cmp	r3, #5
 8002710:	d012      	beq.n	8002738 <UART_SetConfig+0x5e4>
 8002712:	3102      	adds	r1, #2
 8002714:	2b06      	cmp	r3, #6
 8002716:	d00f      	beq.n	8002738 <UART_SetConfig+0x5e4>
 8002718:	3104      	adds	r1, #4
 800271a:	2b07      	cmp	r3, #7
 800271c:	d00c      	beq.n	8002738 <UART_SetConfig+0x5e4>
 800271e:	3110      	adds	r1, #16
 8002720:	2b08      	cmp	r3, #8
 8002722:	d009      	beq.n	8002738 <UART_SetConfig+0x5e4>
 8002724:	3120      	adds	r1, #32
 8002726:	2b09      	cmp	r3, #9
 8002728:	d006      	beq.n	8002738 <UART_SetConfig+0x5e4>
 800272a:	3140      	adds	r1, #64	; 0x40
 800272c:	2b0a      	cmp	r3, #10
 800272e:	d003      	beq.n	8002738 <UART_SetConfig+0x5e4>
 8002730:	397f      	subs	r1, #127	; 0x7f
 8002732:	2b0b      	cmp	r3, #11
 8002734:	d100      	bne.n	8002738 <UART_SetConfig+0x5e4>
 8002736:	31ff      	adds	r1, #255	; 0xff
 8002738:	6865      	ldr	r5, [r4, #4]
 800273a:	f7fd fcff 	bl	800013c <__udivsi3>
 800273e:	0029      	movs	r1, r5
 8002740:	086b      	lsrs	r3, r5, #1
 8002742:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002744:	f7fd fcfa 	bl	800013c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8002748:	2200      	movs	r2, #0
 800274a:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800274c:	0019      	movs	r1, r3
 800274e:	4822      	ldr	r0, [pc, #136]	; (80027d8 <UART_SetConfig+0x684>)
 8002750:	3910      	subs	r1, #16
 8002752:	4281      	cmp	r1, r0
 8002754:	d900      	bls.n	8002758 <UART_SetConfig+0x604>
 8002756:	e561      	b.n	800221c <UART_SetConfig+0xc8>
      huart->Instance->BRR = usartdiv;
 8002758:	6821      	ldr	r1, [r4, #0]
 800275a:	60cb      	str	r3, [r1, #12]
 800275c:	e55f      	b.n	800221e <UART_SetConfig+0xca>
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	fffffd00 	.word	0xfffffd00
 8002764:	000ffcff 	.word	0x000ffcff
 8002768:	00f42400 	.word	0x00f42400
 800276c:	7a120000 	.word	0x7a120000
 8002770:	3d090000 	.word	0x3d090000
 8002774:	28b0aa00 	.word	0x28b0aa00
 8002778:	1e848000 	.word	0x1e848000
 800277c:	186a0000 	.word	0x186a0000
 8002780:	14585500 	.word	0x14585500
 8002784:	0f424000 	.word	0x0f424000
 8002788:	07a12000 	.word	0x07a12000
 800278c:	03d09000 	.word	0x03d09000
 8002790:	01e84800 	.word	0x01e84800
 8002794:	f4240000 	.word	0xf4240000
 8002798:	00155500 	.word	0x00155500
 800279c:	000ccc00 	.word	0x000ccc00
 80027a0:	000aaa00 	.word	0x000aaa00
 80027a4:	0001e848 	.word	0x0001e848
 80027a8:	007a1200 	.word	0x007a1200
 80027ac:	00516154 	.word	0x00516154
 80027b0:	003d0900 	.word	0x003d0900
 80027b4:	0030d400 	.word	0x0030d400
 80027b8:	0028b0aa 	.word	0x0028b0aa
 80027bc:	001e8480 	.word	0x001e8480
 80027c0:	000f4240 	.word	0x000f4240
 80027c4:	0007a120 	.word	0x0007a120
 80027c8:	0003d090 	.word	0x0003d090
 80027cc:	00002aaa 	.word	0x00002aaa
 80027d0:	00001998 	.word	0x00001998
 80027d4:	00001554 	.word	0x00001554
 80027d8:	0000ffef 	.word	0x0000ffef
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d02f      	beq.n	8002840 <UART_SetConfig+0x6ec>
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d019      	beq.n	8002818 <UART_SetConfig+0x6c4>
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d019      	beq.n	800281c <UART_SetConfig+0x6c8>
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d019      	beq.n	8002820 <UART_SetConfig+0x6cc>
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d019      	beq.n	8002824 <UART_SetConfig+0x6d0>
 80027f0:	2b05      	cmp	r3, #5
 80027f2:	d019      	beq.n	8002828 <UART_SetConfig+0x6d4>
 80027f4:	2b06      	cmp	r3, #6
 80027f6:	d019      	beq.n	800282c <UART_SetConfig+0x6d8>
 80027f8:	2b07      	cmp	r3, #7
 80027fa:	d019      	beq.n	8002830 <UART_SetConfig+0x6dc>
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d019      	beq.n	8002834 <UART_SetConfig+0x6e0>
 8002800:	2b09      	cmp	r3, #9
 8002802:	d019      	beq.n	8002838 <UART_SetConfig+0x6e4>
 8002804:	2b0a      	cmp	r3, #10
 8002806:	d019      	beq.n	800283c <UART_SetConfig+0x6e8>
 8002808:	2b0b      	cmp	r3, #11
 800280a:	d119      	bne.n	8002840 <UART_SetConfig+0x6ec>
 800280c:	484e      	ldr	r0, [pc, #312]	; (8002948 <UART_SetConfig+0x7f4>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800280e:	6863      	ldr	r3, [r4, #4]
 8002810:	6861      	ldr	r1, [r4, #4]
 8002812:	085b      	lsrs	r3, r3, #1
 8002814:	1818      	adds	r0, r3, r0
 8002816:	e795      	b.n	8002744 <UART_SetConfig+0x5f0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002818:	484c      	ldr	r0, [pc, #304]	; (800294c <UART_SetConfig+0x7f8>)
 800281a:	e7f8      	b.n	800280e <UART_SetConfig+0x6ba>
 800281c:	484c      	ldr	r0, [pc, #304]	; (8002950 <UART_SetConfig+0x7fc>)
 800281e:	e7f6      	b.n	800280e <UART_SetConfig+0x6ba>
 8002820:	484c      	ldr	r0, [pc, #304]	; (8002954 <UART_SetConfig+0x800>)
 8002822:	e7f4      	b.n	800280e <UART_SetConfig+0x6ba>
 8002824:	484c      	ldr	r0, [pc, #304]	; (8002958 <UART_SetConfig+0x804>)
 8002826:	e7f2      	b.n	800280e <UART_SetConfig+0x6ba>
 8002828:	484c      	ldr	r0, [pc, #304]	; (800295c <UART_SetConfig+0x808>)
 800282a:	e7f0      	b.n	800280e <UART_SetConfig+0x6ba>
 800282c:	484c      	ldr	r0, [pc, #304]	; (8002960 <UART_SetConfig+0x80c>)
 800282e:	e7ee      	b.n	800280e <UART_SetConfig+0x6ba>
 8002830:	484c      	ldr	r0, [pc, #304]	; (8002964 <UART_SetConfig+0x810>)
 8002832:	e7ec      	b.n	800280e <UART_SetConfig+0x6ba>
 8002834:	484c      	ldr	r0, [pc, #304]	; (8002968 <UART_SetConfig+0x814>)
 8002836:	e7ea      	b.n	800280e <UART_SetConfig+0x6ba>
 8002838:	484c      	ldr	r0, [pc, #304]	; (800296c <UART_SetConfig+0x818>)
 800283a:	e7e8      	b.n	800280e <UART_SetConfig+0x6ba>
 800283c:	484c      	ldr	r0, [pc, #304]	; (8002970 <UART_SetConfig+0x81c>)
 800283e:	e7e6      	b.n	800280e <UART_SetConfig+0x6ba>
 8002840:	484c      	ldr	r0, [pc, #304]	; (8002974 <UART_SetConfig+0x820>)
 8002842:	e7e4      	b.n	800280e <UART_SetConfig+0x6ba>
        pclk = HAL_RCC_GetSysClockFreq();
 8002844:	f7fe fe40 	bl	80014c8 <HAL_RCC_GetSysClockFreq>
 8002848:	e750      	b.n	80026ec <UART_SetConfig+0x598>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800284a:	2b00      	cmp	r3, #0
 800284c:	d018      	beq.n	8002880 <UART_SetConfig+0x72c>
 800284e:	2b01      	cmp	r3, #1
 8002850:	d018      	beq.n	8002884 <UART_SetConfig+0x730>
 8002852:	2b02      	cmp	r3, #2
 8002854:	d019      	beq.n	800288a <UART_SetConfig+0x736>
 8002856:	2b03      	cmp	r3, #3
 8002858:	d01a      	beq.n	8002890 <UART_SetConfig+0x73c>
 800285a:	2b04      	cmp	r3, #4
 800285c:	d01a      	beq.n	8002894 <UART_SetConfig+0x740>
 800285e:	2b05      	cmp	r3, #5
 8002860:	d01b      	beq.n	800289a <UART_SetConfig+0x746>
 8002862:	2b06      	cmp	r3, #6
 8002864:	d01b      	beq.n	800289e <UART_SetConfig+0x74a>
 8002866:	2080      	movs	r0, #128	; 0x80
 8002868:	2b07      	cmp	r3, #7
 800286a:	d01a      	beq.n	80028a2 <UART_SetConfig+0x74e>
 800286c:	2b08      	cmp	r3, #8
 800286e:	d01a      	beq.n	80028a6 <UART_SetConfig+0x752>
 8002870:	2b09      	cmp	r3, #9
 8002872:	d01a      	beq.n	80028aa <UART_SetConfig+0x756>
 8002874:	2b0a      	cmp	r3, #10
 8002876:	d01a      	beq.n	80028ae <UART_SetConfig+0x75a>
 8002878:	2b0b      	cmp	r3, #11
 800287a:	d0c8      	beq.n	800280e <UART_SetConfig+0x6ba>
 800287c:	0200      	lsls	r0, r0, #8
 800287e:	e7c6      	b.n	800280e <UART_SetConfig+0x6ba>
 8002880:	2080      	movs	r0, #128	; 0x80
 8002882:	e7fb      	b.n	800287c <UART_SetConfig+0x728>
 8002884:	2080      	movs	r0, #128	; 0x80
 8002886:	01c0      	lsls	r0, r0, #7
 8002888:	e7c1      	b.n	800280e <UART_SetConfig+0x6ba>
 800288a:	2080      	movs	r0, #128	; 0x80
 800288c:	0180      	lsls	r0, r0, #6
 800288e:	e7be      	b.n	800280e <UART_SetConfig+0x6ba>
 8002890:	4839      	ldr	r0, [pc, #228]	; (8002978 <UART_SetConfig+0x824>)
 8002892:	e7bc      	b.n	800280e <UART_SetConfig+0x6ba>
 8002894:	2080      	movs	r0, #128	; 0x80
 8002896:	0140      	lsls	r0, r0, #5
 8002898:	e7b9      	b.n	800280e <UART_SetConfig+0x6ba>
 800289a:	4838      	ldr	r0, [pc, #224]	; (800297c <UART_SetConfig+0x828>)
 800289c:	e7b7      	b.n	800280e <UART_SetConfig+0x6ba>
 800289e:	4838      	ldr	r0, [pc, #224]	; (8002980 <UART_SetConfig+0x82c>)
 80028a0:	e7b5      	b.n	800280e <UART_SetConfig+0x6ba>
 80028a2:	0100      	lsls	r0, r0, #4
 80028a4:	e7b3      	b.n	800280e <UART_SetConfig+0x6ba>
 80028a6:	00c0      	lsls	r0, r0, #3
 80028a8:	e7b1      	b.n	800280e <UART_SetConfig+0x6ba>
 80028aa:	0080      	lsls	r0, r0, #2
 80028ac:	e7af      	b.n	800280e <UART_SetConfig+0x6ba>
 80028ae:	0040      	lsls	r0, r0, #1
 80028b0:	e7ad      	b.n	800280e <UART_SetConfig+0x6ba>
        ret = HAL_ERROR;
 80028b2:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	e749      	b.n	800274c <UART_SetConfig+0x5f8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	021b      	lsls	r3, r3, #8
 80028bc:	4299      	cmp	r1, r3
 80028be:	d000      	beq.n	80028c2 <UART_SetConfig+0x76e>
 80028c0:	e712      	b.n	80026e8 <UART_SetConfig+0x594>
        pclk = HAL_RCC_GetPCLK1Freq();
 80028c2:	f7fe fef5 	bl	80016b0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80028c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028c8:	2101      	movs	r1, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d021      	beq.n	8002912 <UART_SetConfig+0x7be>
 80028ce:	1849      	adds	r1, r1, r1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d01e      	beq.n	8002912 <UART_SetConfig+0x7be>
 80028d4:	3102      	adds	r1, #2
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d01b      	beq.n	8002912 <UART_SetConfig+0x7be>
 80028da:	3102      	adds	r1, #2
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d018      	beq.n	8002912 <UART_SetConfig+0x7be>
 80028e0:	3102      	adds	r1, #2
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d015      	beq.n	8002912 <UART_SetConfig+0x7be>
 80028e6:	3102      	adds	r1, #2
 80028e8:	2b05      	cmp	r3, #5
 80028ea:	d012      	beq.n	8002912 <UART_SetConfig+0x7be>
 80028ec:	3102      	adds	r1, #2
 80028ee:	2b06      	cmp	r3, #6
 80028f0:	d00f      	beq.n	8002912 <UART_SetConfig+0x7be>
 80028f2:	3104      	adds	r1, #4
 80028f4:	2b07      	cmp	r3, #7
 80028f6:	d00c      	beq.n	8002912 <UART_SetConfig+0x7be>
 80028f8:	3110      	adds	r1, #16
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d009      	beq.n	8002912 <UART_SetConfig+0x7be>
 80028fe:	3120      	adds	r1, #32
 8002900:	2b09      	cmp	r3, #9
 8002902:	d006      	beq.n	8002912 <UART_SetConfig+0x7be>
 8002904:	3140      	adds	r1, #64	; 0x40
 8002906:	2b0a      	cmp	r3, #10
 8002908:	d003      	beq.n	8002912 <UART_SetConfig+0x7be>
 800290a:	397f      	subs	r1, #127	; 0x7f
 800290c:	2b0b      	cmp	r3, #11
 800290e:	d100      	bne.n	8002912 <UART_SetConfig+0x7be>
 8002910:	31ff      	adds	r1, #255	; 0xff
 8002912:	f7fd fc13 	bl	800013c <__udivsi3>
 8002916:	6865      	ldr	r5, [r4, #4]
 8002918:	0040      	lsls	r0, r0, #1
 800291a:	0029      	movs	r1, r5
 800291c:	086b      	lsrs	r3, r5, #1
 800291e:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002920:	f7fd fc0c 	bl	800013c <__udivsi3>
 8002924:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002926:	0003      	movs	r3, r0
 8002928:	4a16      	ldr	r2, [pc, #88]	; (8002984 <UART_SetConfig+0x830>)
 800292a:	3b10      	subs	r3, #16
 800292c:	4293      	cmp	r3, r2
 800292e:	d900      	bls.n	8002932 <UART_SetConfig+0x7de>
 8002930:	e474      	b.n	800221c <UART_SetConfig+0xc8>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002932:	230f      	movs	r3, #15
 8002934:	0002      	movs	r2, r0
 8002936:	439a      	bics	r2, r3
 8002938:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800293a:	0700      	lsls	r0, r0, #28
      huart->Instance->BRR = brrtemp;
 800293c:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800293e:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 8002940:	4318      	orrs	r0, r3
 8002942:	60d0      	str	r0, [r2, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	e46a      	b.n	800221e <UART_SetConfig+0xca>
 8002948:	0000f424 	.word	0x0000f424
 800294c:	007a1200 	.word	0x007a1200
 8002950:	003d0900 	.word	0x003d0900
 8002954:	0028b0aa 	.word	0x0028b0aa
 8002958:	001e8480 	.word	0x001e8480
 800295c:	00186a00 	.word	0x00186a00
 8002960:	00145855 	.word	0x00145855
 8002964:	000f4240 	.word	0x000f4240
 8002968:	0007a120 	.word	0x0007a120
 800296c:	0003d090 	.word	0x0003d090
 8002970:	0001e848 	.word	0x0001e848
 8002974:	00f42400 	.word	0x00f42400
 8002978:	00001555 	.word	0x00001555
 800297c:	00000ccc 	.word	0x00000ccc
 8002980:	00000aaa 	.word	0x00000aaa
 8002984:	0000ffef 	.word	0x0000ffef

08002988 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002988:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 800298a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800298c:	07da      	lsls	r2, r3, #31
 800298e:	d506      	bpl.n	800299e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002990:	6801      	ldr	r1, [r0, #0]
 8002992:	4c28      	ldr	r4, [pc, #160]	; (8002a34 <UART_AdvFeatureConfig+0xac>)
 8002994:	684a      	ldr	r2, [r1, #4]
 8002996:	4022      	ands	r2, r4
 8002998:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800299a:	4322      	orrs	r2, r4
 800299c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800299e:	079a      	lsls	r2, r3, #30
 80029a0:	d506      	bpl.n	80029b0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029a2:	6801      	ldr	r1, [r0, #0]
 80029a4:	4c24      	ldr	r4, [pc, #144]	; (8002a38 <UART_AdvFeatureConfig+0xb0>)
 80029a6:	684a      	ldr	r2, [r1, #4]
 80029a8:	4022      	ands	r2, r4
 80029aa:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80029ac:	4322      	orrs	r2, r4
 80029ae:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029b0:	075a      	lsls	r2, r3, #29
 80029b2:	d506      	bpl.n	80029c2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029b4:	6801      	ldr	r1, [r0, #0]
 80029b6:	4c21      	ldr	r4, [pc, #132]	; (8002a3c <UART_AdvFeatureConfig+0xb4>)
 80029b8:	684a      	ldr	r2, [r1, #4]
 80029ba:	4022      	ands	r2, r4
 80029bc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80029be:	4322      	orrs	r2, r4
 80029c0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029c2:	071a      	lsls	r2, r3, #28
 80029c4:	d506      	bpl.n	80029d4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029c6:	6801      	ldr	r1, [r0, #0]
 80029c8:	4c1d      	ldr	r4, [pc, #116]	; (8002a40 <UART_AdvFeatureConfig+0xb8>)
 80029ca:	684a      	ldr	r2, [r1, #4]
 80029cc:	4022      	ands	r2, r4
 80029ce:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80029d0:	4322      	orrs	r2, r4
 80029d2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029d4:	06da      	lsls	r2, r3, #27
 80029d6:	d506      	bpl.n	80029e6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029d8:	6801      	ldr	r1, [r0, #0]
 80029da:	4c1a      	ldr	r4, [pc, #104]	; (8002a44 <UART_AdvFeatureConfig+0xbc>)
 80029dc:	688a      	ldr	r2, [r1, #8]
 80029de:	4022      	ands	r2, r4
 80029e0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80029e2:	4322      	orrs	r2, r4
 80029e4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029e6:	069a      	lsls	r2, r3, #26
 80029e8:	d506      	bpl.n	80029f8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029ea:	6801      	ldr	r1, [r0, #0]
 80029ec:	4c16      	ldr	r4, [pc, #88]	; (8002a48 <UART_AdvFeatureConfig+0xc0>)
 80029ee:	688a      	ldr	r2, [r1, #8]
 80029f0:	4022      	ands	r2, r4
 80029f2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80029f4:	4322      	orrs	r2, r4
 80029f6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80029f8:	065a      	lsls	r2, r3, #25
 80029fa:	d510      	bpl.n	8002a1e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80029fc:	6801      	ldr	r1, [r0, #0]
 80029fe:	4d13      	ldr	r5, [pc, #76]	; (8002a4c <UART_AdvFeatureConfig+0xc4>)
 8002a00:	684a      	ldr	r2, [r1, #4]
 8002a02:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002a04:	402a      	ands	r2, r5
 8002a06:	4322      	orrs	r2, r4
 8002a08:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a0a:	2280      	movs	r2, #128	; 0x80
 8002a0c:	0352      	lsls	r2, r2, #13
 8002a0e:	4294      	cmp	r4, r2
 8002a10:	d105      	bne.n	8002a1e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a12:	684a      	ldr	r2, [r1, #4]
 8002a14:	4c0e      	ldr	r4, [pc, #56]	; (8002a50 <UART_AdvFeatureConfig+0xc8>)
 8002a16:	4022      	ands	r2, r4
 8002a18:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8002a1a:	4322      	orrs	r2, r4
 8002a1c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a1e:	061b      	lsls	r3, r3, #24
 8002a20:	d506      	bpl.n	8002a30 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a22:	6802      	ldr	r2, [r0, #0]
 8002a24:	490b      	ldr	r1, [pc, #44]	; (8002a54 <UART_AdvFeatureConfig+0xcc>)
 8002a26:	6853      	ldr	r3, [r2, #4]
 8002a28:	400b      	ands	r3, r1
 8002a2a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	6053      	str	r3, [r2, #4]
}
 8002a30:	bd30      	pop	{r4, r5, pc}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	fffdffff 	.word	0xfffdffff
 8002a38:	fffeffff 	.word	0xfffeffff
 8002a3c:	fffbffff 	.word	0xfffbffff
 8002a40:	ffff7fff 	.word	0xffff7fff
 8002a44:	ffffefff 	.word	0xffffefff
 8002a48:	ffffdfff 	.word	0xffffdfff
 8002a4c:	ffefffff 	.word	0xffefffff
 8002a50:	ff9fffff 	.word	0xff9fffff
 8002a54:	fff7ffff 	.word	0xfff7ffff

08002a58 <UART_WaitOnFlagUntilTimeout>:
{
 8002a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5a:	0004      	movs	r4, r0
 8002a5c:	000e      	movs	r6, r1
 8002a5e:	0015      	movs	r5, r2
 8002a60:	001f      	movs	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a62:	6822      	ldr	r2, [r4, #0]
 8002a64:	69d3      	ldr	r3, [r2, #28]
 8002a66:	4033      	ands	r3, r6
 8002a68:	1b9b      	subs	r3, r3, r6
 8002a6a:	4259      	negs	r1, r3
 8002a6c:	414b      	adcs	r3, r1
 8002a6e:	42ab      	cmp	r3, r5
 8002a70:	d001      	beq.n	8002a76 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8002a72:	2000      	movs	r0, #0
 8002a74:	e01e      	b.n	8002ab4 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8002a76:	9b06      	ldr	r3, [sp, #24]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	d0f3      	beq.n	8002a64 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7c:	f7fd fe26 	bl	80006cc <HAL_GetTick>
 8002a80:	9b06      	ldr	r3, [sp, #24]
 8002a82:	1bc0      	subs	r0, r0, r7
 8002a84:	4283      	cmp	r3, r0
 8002a86:	d301      	bcc.n	8002a8c <UART_WaitOnFlagUntilTimeout+0x34>
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1ea      	bne.n	8002a62 <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002a8c:	0022      	movs	r2, r4
 8002a8e:	ca08      	ldmia	r2!, {r3}
 8002a90:	4809      	ldr	r0, [pc, #36]	; (8002ab8 <UART_WaitOnFlagUntilTimeout+0x60>)
 8002a92:	6819      	ldr	r1, [r3, #0]
 8002a94:	4001      	ands	r1, r0
 8002a96:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a98:	6899      	ldr	r1, [r3, #8]
 8002a9a:	30a3      	adds	r0, #163	; 0xa3
 8002a9c:	30ff      	adds	r0, #255	; 0xff
 8002a9e:	4381      	bics	r1, r0
 8002aa0:	6099      	str	r1, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002aa2:	2320      	movs	r3, #32
 8002aa4:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002aa6:	0022      	movs	r2, r4
 8002aa8:	3208      	adds	r2, #8
 8002aaa:	67d3      	str	r3, [r2, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8002aac:	2300      	movs	r3, #0
 8002aae:	347c      	adds	r4, #124	; 0x7c
 8002ab0:	7023      	strb	r3, [r4, #0]
 8002ab2:	3002      	adds	r0, #2
}
 8002ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	fffffe5f 	.word	0xfffffe5f

08002abc <HAL_UART_Transmit>:
{
 8002abc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8002abe:	1d07      	adds	r7, r0, #4
{
 8002ac0:	b087      	sub	sp, #28
 8002ac2:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8002ac4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
{
 8002ac6:	0004      	movs	r4, r0
 8002ac8:	000d      	movs	r5, r1
 8002aca:	0016      	movs	r6, r2
    return HAL_BUSY;
 8002acc:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8002ace:	2b20      	cmp	r3, #32
 8002ad0:	d14a      	bne.n	8002b68 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 8002ad2:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8002ad4:	2900      	cmp	r1, #0
 8002ad6:	d047      	beq.n	8002b68 <HAL_UART_Transmit+0xac>
 8002ad8:	2a00      	cmp	r2, #0
 8002ada:	d045      	beq.n	8002b68 <HAL_UART_Transmit+0xac>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	68a2      	ldr	r2, [r4, #8]
 8002ae0:	015b      	lsls	r3, r3, #5
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d104      	bne.n	8002af0 <HAL_UART_Transmit+0x34>
 8002ae6:	6923      	ldr	r3, [r4, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_UART_Transmit+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002aec:	4201      	tst	r1, r0
 8002aee:	d13b      	bne.n	8002b68 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8002af0:	0023      	movs	r3, r4
 8002af2:	337c      	adds	r3, #124	; 0x7c
 8002af4:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8002af6:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8002af8:	2a01      	cmp	r2, #1
 8002afa:	d035      	beq.n	8002b68 <HAL_UART_Transmit+0xac>
 8002afc:	2201      	movs	r2, #1
 8002afe:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b00:	2200      	movs	r2, #0
 8002b02:	60da      	str	r2, [r3, #12]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b04:	2321      	movs	r3, #33	; 0x21
 8002b06:	67fb      	str	r3, [r7, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8002b08:	f7fd fde0 	bl	80006cc <HAL_GetTick>
    huart->TxXferSize  = Size;
 8002b0c:	0023      	movs	r3, r4
 8002b0e:	3354      	adds	r3, #84	; 0x54
 8002b10:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8002b12:	3302      	adds	r3, #2
 8002b14:	801e      	strh	r6, [r3, #0]
 8002b16:	9303      	str	r3, [sp, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8002b1c:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b1e:	015b      	lsls	r3, r3, #5
      pdata16bits = NULL;
 8002b20:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d104      	bne.n	8002b30 <HAL_UART_Transmit+0x74>
 8002b26:	6923      	ldr	r3, [r4, #16]
 8002b28:	42b3      	cmp	r3, r6
 8002b2a:	d101      	bne.n	8002b30 <HAL_UART_Transmit+0x74>
 8002b2c:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8002b2e:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8002b30:	0023      	movs	r3, r4
 8002b32:	3356      	adds	r3, #86	; 0x56
 8002b34:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b36:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 8002b38:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 8002b3e:	2a00      	cmp	r2, #0
 8002b40:	d10a      	bne.n	8002b58 <HAL_UART_Transmit+0x9c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b42:	2140      	movs	r1, #64	; 0x40
 8002b44:	0020      	movs	r0, r4
 8002b46:	f7ff ff87 	bl	8002a58 <UART_WaitOnFlagUntilTimeout>
 8002b4a:	2800      	cmp	r0, #0
 8002b4c:	d10b      	bne.n	8002b66 <HAL_UART_Transmit+0xaa>
    huart->gState = HAL_UART_STATE_READY;
 8002b4e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002b50:	347c      	adds	r4, #124	; 0x7c
    huart->gState = HAL_UART_STATE_READY;
 8002b52:	67fb      	str	r3, [r7, #124]	; 0x7c
    __HAL_UNLOCK(huart);
 8002b54:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002b56:	e007      	b.n	8002b68 <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2180      	movs	r1, #128	; 0x80
 8002b5c:	0020      	movs	r0, r4
 8002b5e:	f7ff ff7b 	bl	8002a58 <UART_WaitOnFlagUntilTimeout>
 8002b62:	2800      	cmp	r0, #0
 8002b64:	d002      	beq.n	8002b6c <HAL_UART_Transmit+0xb0>
        return HAL_TIMEOUT;
 8002b66:	2003      	movs	r0, #3
}
 8002b68:	b007      	add	sp, #28
 8002b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b6c:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002b6e:	2d00      	cmp	r5, #0
 8002b70:	d10b      	bne.n	8002b8a <HAL_UART_Transmit+0xce>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b72:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8002b74:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b76:	05db      	lsls	r3, r3, #23
 8002b78:	0ddb      	lsrs	r3, r3, #23
 8002b7a:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002b7c:	9b03      	ldr	r3, [sp, #12]
 8002b7e:	9a03      	ldr	r2, [sp, #12]
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	8013      	strh	r3, [r2, #0]
 8002b88:	e7d2      	b.n	8002b30 <HAL_UART_Transmit+0x74>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b8a:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8002b8c:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b8e:	6293      	str	r3, [r2, #40]	; 0x28
 8002b90:	e7f4      	b.n	8002b7c <HAL_UART_Transmit+0xc0>
	...

08002b94 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b94:	0003      	movs	r3, r0
{
 8002b96:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b98:	2600      	movs	r6, #0
{
 8002b9a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b9c:	3388      	adds	r3, #136	; 0x88
 8002b9e:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8002ba0:	f7fd fd94 	bl	80006cc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ba4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002ba6:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	071b      	lsls	r3, r3, #28
 8002bac:	d417      	bmi.n	8002bde <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bae:	6823      	ldr	r3, [r4, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	075b      	lsls	r3, r3, #29
 8002bb4:	d50a      	bpl.n	8002bcc <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bb6:	2180      	movs	r1, #128	; 0x80
 8002bb8:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <UART_CheckIdleState+0x64>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	03c9      	lsls	r1, r1, #15
 8002bc0:	002b      	movs	r3, r5
 8002bc2:	0020      	movs	r0, r4
 8002bc4:	f7ff ff48 	bl	8002a58 <UART_WaitOnFlagUntilTimeout>
 8002bc8:	2800      	cmp	r0, #0
 8002bca:	d113      	bne.n	8002bf4 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8002bcc:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002bce:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002bd0:	1d22      	adds	r2, r4, #4
 8002bd2:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8002bd4:	347c      	adds	r4, #124	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002bd6:	3204      	adds	r2, #4
 8002bd8:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8002bda:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8002bdc:	e00b      	b.n	8002bf6 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bde:	2180      	movs	r1, #128	; 0x80
 8002be0:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <UART_CheckIdleState+0x64>)
 8002be2:	0032      	movs	r2, r6
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	0389      	lsls	r1, r1, #14
 8002be8:	0003      	movs	r3, r0
 8002bea:	0020      	movs	r0, r4
 8002bec:	f7ff ff34 	bl	8002a58 <UART_WaitOnFlagUntilTimeout>
 8002bf0:	2800      	cmp	r0, #0
 8002bf2:	d0dc      	beq.n	8002bae <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002bf4:	2003      	movs	r0, #3
}
 8002bf6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002bf8:	01ffffff 	.word	0x01ffffff

08002bfc <HAL_UART_Init>:
{
 8002bfc:	b570      	push	{r4, r5, r6, lr}
 8002bfe:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002c00:	d101      	bne.n	8002c06 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002c02:	2001      	movs	r0, #1
}
 8002c04:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8002c06:	1d05      	adds	r5, r0, #4
 8002c08:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d104      	bne.n	8002c18 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8002c0e:	0002      	movs	r2, r0
 8002c10:	327c      	adds	r2, #124	; 0x7c
 8002c12:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002c14:	f000 fd18 	bl	8003648 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002c18:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002c1e:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8002c20:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c22:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8002c24:	438b      	bics	r3, r1
 8002c26:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c28:	f7ff fa94 	bl	8002154 <UART_SetConfig>
 8002c2c:	2801      	cmp	r0, #1
 8002c2e:	d0e8      	beq.n	8002c02 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <HAL_UART_Init+0x40>
    UART_AdvFeatureConfig(huart);
 8002c36:	0020      	movs	r0, r4
 8002c38:	f7ff fea6 	bl	8002988 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c3c:	6823      	ldr	r3, [r4, #0]
 8002c3e:	4908      	ldr	r1, [pc, #32]	; (8002c60 <HAL_UART_Init+0x64>)
 8002c40:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002c42:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c44:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c46:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c48:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	438a      	bics	r2, r1
 8002c4e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002c50:	2201      	movs	r2, #1
 8002c52:	6819      	ldr	r1, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002c58:	f7ff ff9c 	bl	8002b94 <UART_CheckIdleState>
 8002c5c:	e7d2      	b.n	8002c04 <HAL_UART_Init+0x8>
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	ffffb7ff 	.word	0xffffb7ff

08002c64 <UARTEx_SetNbDataToProcess>:
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002c64:	2301      	movs	r3, #1
{
 8002c66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c68:	b087      	sub	sp, #28
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002c6a:	aa02      	add	r2, sp, #8
 8002c6c:	7013      	strb	r3, [r2, #0]
 8002c6e:	7053      	strb	r3, [r2, #1]
 8002c70:	7093      	strb	r3, [r2, #2]
 8002c72:	2203      	movs	r2, #3
 8002c74:	a902      	add	r1, sp, #8
 8002c76:	70ca      	strb	r2, [r1, #3]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002c78:	2502      	movs	r5, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2607      	movs	r6, #7
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002c7e:	ac04      	add	r4, sp, #16
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002c80:	718a      	strb	r2, [r1, #6]
 8002c82:	71ca      	strb	r2, [r1, #7]
 8002c84:	710e      	strb	r6, [r1, #4]
 8002c86:	714b      	strb	r3, [r1, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002c88:	70a5      	strb	r5, [r4, #2]
 8002c8a:	2104      	movs	r1, #4
 8002c8c:	0007      	movs	r7, r0
 8002c8e:	0005      	movs	r5, r0
 8002c90:	3208      	adds	r2, #8
 8002c92:	7022      	strb	r2, [r4, #0]
 8002c94:	7122      	strb	r2, [r4, #4]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002c96:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002c98:	7061      	strb	r1, [r4, #1]
 8002c9a:	70e1      	strb	r1, [r4, #3]
 8002c9c:	7163      	strb	r3, [r4, #5]
 8002c9e:	71a3      	strb	r3, [r4, #6]
 8002ca0:	71e3      	strb	r3, [r4, #7]
 8002ca2:	376a      	adds	r7, #106	; 0x6a
 8002ca4:	3568      	adds	r5, #104	; 0x68
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002ca6:	2a00      	cmp	r2, #0
 8002ca8:	d103      	bne.n	8002cb2 <UARTEx_SetNbDataToProcess+0x4e>
  {
    huart->NbTxDataToProcess = 1U;
 8002caa:	803b      	strh	r3, [r7, #0]
    huart->NbRxDataToProcess = 1U;
 8002cac:	802b      	strh	r3, [r5, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002cae:	b007      	add	sp, #28
 8002cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002cb2:	6803      	ldr	r3, [r0, #0]
 8002cb4:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002cb6:	689b      	ldr	r3, [r3, #8]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002cb8:	9201      	str	r2, [sp, #4]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002cba:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8002cbc:	aa02      	add	r2, sp, #8
 8002cbe:	5cd0      	ldrb	r0, [r2, r3]
 8002cc0:	5ce1      	ldrb	r1, [r4, r3]
 8002cc2:	00c0      	lsls	r0, r0, #3
 8002cc4:	f7fd fac4 	bl	8000250 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002cc8:	9b01      	ldr	r3, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8002cca:	8038      	strh	r0, [r7, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002ccc:	0e5b      	lsrs	r3, r3, #25
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002cce:	401e      	ands	r6, r3
 8002cd0:	ab02      	add	r3, sp, #8
 8002cd2:	5d98      	ldrb	r0, [r3, r6]
 8002cd4:	5da1      	ldrb	r1, [r4, r6]
 8002cd6:	00c0      	lsls	r0, r0, #3
 8002cd8:	f7fd faba 	bl	8000250 <__divsi3>
 8002cdc:	8028      	strh	r0, [r5, #0]
}
 8002cde:	e7e6      	b.n	8002cae <UARTEx_SetNbDataToProcess+0x4a>

08002ce0 <HAL_UARTEx_DisableFifoMode>:
{
 8002ce0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8002ce2:	0004      	movs	r4, r0
 8002ce4:	347c      	adds	r4, #124	; 0x7c
 8002ce6:	7822      	ldrb	r2, [r4, #0]
 8002ce8:	2302      	movs	r3, #2
 8002cea:	2a01      	cmp	r2, #1
 8002cec:	d010      	beq.n	8002d10 <HAL_UARTEx_DisableFifoMode+0x30>
  __HAL_UART_DISABLE(huart);
 8002cee:	2601      	movs	r6, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002cf0:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002cf2:	1d05      	adds	r5, r0, #4
 8002cf4:	3322      	adds	r3, #34	; 0x22
 8002cf6:	67eb      	str	r3, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002cf8:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8002cfa:	6813      	ldr	r3, [r2, #0]
 8002cfc:	43b3      	bics	r3, r6
 8002cfe:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002d00:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <HAL_UARTEx_DisableFifoMode+0x34>)
 8002d02:	4019      	ands	r1, r3
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002d04:	2300      	movs	r3, #0
 8002d06:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d08:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	67ea      	str	r2, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8002d0e:	7023      	strb	r3, [r4, #0]
}
 8002d10:	0018      	movs	r0, r3
 8002d12:	bd70      	pop	{r4, r5, r6, pc}
 8002d14:	dfffffff 	.word	0xdfffffff

08002d18 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8002d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8002d1a:	0005      	movs	r5, r0
 8002d1c:	357c      	adds	r5, #124	; 0x7c
 8002d1e:	782b      	ldrb	r3, [r5, #0]
{
 8002d20:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 8002d22:	2002      	movs	r0, #2
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d017      	beq.n	8002d58 <HAL_UARTEx_SetTxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 8002d28:	2324      	movs	r3, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d2a:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(huart);
 8002d2c:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8002d2e:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 8002d30:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002d32:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d34:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8002d36:	6813      	ldr	r3, [r2, #0]
 8002d38:	4383      	bics	r3, r0
 8002d3a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002d3c:	6893      	ldr	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002d3e:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	08db      	lsrs	r3, r3, #3
 8002d44:	4319      	orrs	r1, r3
 8002d46:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002d48:	f7ff ff8c 	bl	8002c64 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d4c:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8002d4e:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d50:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002d52:	2320      	movs	r3, #32
 8002d54:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8002d56:	7028      	strb	r0, [r5, #0]
}
 8002d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d5c <HAL_UARTEx_SetRxFifoThreshold>:
{
 8002d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8002d5e:	0005      	movs	r5, r0
 8002d60:	357c      	adds	r5, #124	; 0x7c
 8002d62:	782b      	ldrb	r3, [r5, #0]
{
 8002d64:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 8002d66:	2002      	movs	r0, #2
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d017      	beq.n	8002d9c <HAL_UARTEx_SetRxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 8002d6c:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8002d6e:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8002d70:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 8002d72:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002d74:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d76:	6823      	ldr	r3, [r4, #0]
 8002d78:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4382      	bics	r2, r0
 8002d7e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	4807      	ldr	r0, [pc, #28]	; (8002da0 <HAL_UARTEx_SetRxFifoThreshold+0x44>)
 8002d84:	4002      	ands	r2, r0
 8002d86:	4311      	orrs	r1, r2
 8002d88:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002d8a:	0020      	movs	r0, r4
 8002d8c:	f7ff ff6a 	bl	8002c64 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d90:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8002d92:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d94:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002d96:	2320      	movs	r3, #32
 8002d98:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8002d9a:	7028      	strb	r0, [r5, #0]
}
 8002d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	f1ffffff 	.word	0xf1ffffff

08002da4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002da4:	b510      	push	{r4, lr}
 8002da6:	b0a0      	sub	sp, #128	; 0x80
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002da8:	2238      	movs	r2, #56	; 0x38
 8002daa:	2100      	movs	r1, #0
 8002dac:	a812      	add	r0, sp, #72	; 0x48
 8002dae:	f000 fd1a 	bl	80037e6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002db2:	2210      	movs	r2, #16
 8002db4:	2100      	movs	r1, #0
 8002db6:	a801      	add	r0, sp, #4
 8002db8:	f000 fd15 	bl	80037e6 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8002dbc:	2234      	movs	r2, #52	; 0x34
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	a805      	add	r0, sp, #20
 8002dc2:	f000 fd10 	bl	80037e6 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dc6:	2080      	movs	r0, #128	; 0x80
 8002dc8:	0080      	lsls	r0, r0, #2
 8002dca:	f7fe f929 	bl	8001020 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002dce:	2302      	movs	r3, #2
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002dd0:	2400      	movs	r4, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002dd2:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002dd4:	33fe      	adds	r3, #254	; 0xfe
 8002dd6:	9315      	str	r3, [sp, #84]	; 0x54
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002dd8:	a812      	add	r0, sp, #72	; 0x48
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002dda:	3bc0      	subs	r3, #192	; 0xc0
 8002ddc:	9317      	str	r3, [sp, #92]	; 0x5c
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002dde:	9416      	str	r4, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002de0:	9419      	str	r4, [sp, #100]	; 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002de2:	f7fe f947 	bl	8001074 <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002de6:	2307      	movs	r3, #7
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002de8:	0021      	movs	r1, r4
 8002dea:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002dec:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002dee:	9402      	str	r4, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002df0:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002df2:	9404      	str	r4, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002df4:	f7fe fbae 	bl	8001554 <HAL_RCC_ClockConfig>
		Error_Handler();
	}
	/** Initializes the peripherals clocks
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8002df8:	2343      	movs	r3, #67	; 0x43
			| RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002dfa:	a805      	add	r0, sp, #20
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8002dfc:	9305      	str	r3, [sp, #20]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002dfe:	9406      	str	r4, [sp, #24]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e00:	9407      	str	r4, [sp, #28]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002e02:	9409      	str	r4, [sp, #36]	; 0x24
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002e04:	f7fe fc68 	bl	80016d8 <HAL_RCCEx_PeriphCLKConfig>
		Error_Handler();
	}
}
 8002e08:	b020      	add	sp, #128	; 0x80
 8002e0a:	bd10      	pop	{r4, pc}

08002e0c <fn_fprint>:

}

/* USER CODE BEGIN 4 */
//print on uart
void fn_fprint(char *data) {
 8002e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	0005      	movs	r5, r0
	int tamanho = strlen(data);
 8002e12:	f7fd f977 	bl	8000104 <strlen>
	char new_command[tamanho];
 8002e16:	466a      	mov	r2, sp
 8002e18:	1dc3      	adds	r3, r0, #7
 8002e1a:	08db      	lsrs	r3, r3, #3
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	469d      	mov	sp, r3
	strcpy(new_command, data);
 8002e22:	0029      	movs	r1, r5
	int tamanho = strlen(data);
 8002e24:	0004      	movs	r4, r0
	strcpy(new_command, data);
 8002e26:	4668      	mov	r0, sp
 8002e28:	f000 fce5 	bl	80037f6 <strcpy>
 8002e2c:	466e      	mov	r6, sp
	char new_com[1]; // (uint8_t*)new_command;
	for (int var = 0; var < tamanho; ++var) {
 8002e2e:	466d      	mov	r5, sp
 8002e30:	1bab      	subs	r3, r5, r6
 8002e32:	429c      	cmp	r4, r3
 8002e34:	dc01      	bgt.n	8002e3a <fn_fprint+0x2e>
		new_com[0] = new_command[var];
		HAL_UART_Transmit(&huart1, (uint8_t*) new_com, 1, 10);
	}
}
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		new_com[0] = new_command[var];
 8002e3a:	782b      	ldrb	r3, [r5, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) new_com, 1, 10);
 8002e3c:	2201      	movs	r2, #1
		new_com[0] = new_command[var];
 8002e3e:	713b      	strb	r3, [r7, #4]
		HAL_UART_Transmit(&huart1, (uint8_t*) new_com, 1, 10);
 8002e40:	1d39      	adds	r1, r7, #4
 8002e42:	230a      	movs	r3, #10
 8002e44:	4802      	ldr	r0, [pc, #8]	; (8002e50 <fn_fprint+0x44>)
 8002e46:	f7ff fe39 	bl	8002abc <HAL_UART_Transmit>
 8002e4a:	3501      	adds	r5, #1
 8002e4c:	e7f0      	b.n	8002e30 <fn_fprint+0x24>
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	200000c4 	.word	0x200000c4

08002e54 <blink>:
//blink led
void blink(uint8_t sec) {
 8002e54:	b570      	push	{r4, r5, r6, lr}
	for (int var = 0; var < sec; ++var) {
		LED_ON
 8002e56:	25a0      	movs	r5, #160	; 0xa0
void blink(uint8_t sec) {
 8002e58:	0006      	movs	r6, r0
	for (int var = 0; var < sec; ++var) {
 8002e5a:	2400      	movs	r4, #0
		LED_ON
 8002e5c:	05ed      	lsls	r5, r5, #23
	for (int var = 0; var < sec; ++var) {
 8002e5e:	42b4      	cmp	r4, r6
 8002e60:	db00      	blt.n	8002e64 <blink+0x10>
		HAL_Delay(25);
		LED_OFF
		HAL_Delay(25);
	}

}
 8002e62:	bd70      	pop	{r4, r5, r6, pc}
		LED_ON
 8002e64:	2201      	movs	r2, #1
 8002e66:	2120      	movs	r1, #32
 8002e68:	0028      	movs	r0, r5
 8002e6a:	f7fd fd83 	bl	8000974 <HAL_GPIO_WritePin>
		HAL_Delay(25);
 8002e6e:	2019      	movs	r0, #25
 8002e70:	f7fd fc32 	bl	80006d8 <HAL_Delay>
		LED_OFF
 8002e74:	2200      	movs	r2, #0
 8002e76:	2120      	movs	r1, #32
 8002e78:	0028      	movs	r0, r5
 8002e7a:	f7fd fd7b 	bl	8000974 <HAL_GPIO_WritePin>
		HAL_Delay(25);
 8002e7e:	2019      	movs	r0, #25
 8002e80:	f7fd fc2a 	bl	80006d8 <HAL_Delay>
	for (int var = 0; var < sec; ++var) {
 8002e84:	3401      	adds	r4, #1
 8002e86:	e7ea      	b.n	8002e5e <blink+0xa>

08002e88 <char_to_hex>:
	if (rxBuffer[data] < 58) number = number+(rxBuffer[data]-48); else number = number+(rxBuffer[data]-55);
	return number;
}

// char number to string hex (FF) (Only big letters!)
void char_to_hex(uint8_t data) {
 8002e88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002e8a:	0004      	movs	r4, r0
	uint8_t digits[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
 8002e8c:	2210      	movs	r2, #16
 8002e8e:	490a      	ldr	r1, [pc, #40]	; (8002eb8 <char_to_hex+0x30>)
 8002e90:	4668      	mov	r0, sp
 8002e92:	f000 fc9f 	bl	80037d4 <memcpy>
 8002e96:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <char_to_hex+0x34>)

	if (data < 16) {
 8002e98:	2c0f      	cmp	r4, #15
 8002e9a:	d805      	bhi.n	8002ea8 <char_to_hex+0x20>
		retstr[0] = '0';
 8002e9c:	2230      	movs	r2, #48	; 0x30
 8002e9e:	701a      	strb	r2, [r3, #0]
		retstr[1] = digits[data];
	} else {
		retstr[0] = digits[(data & 0xF0)>>4];
		retstr[1] = digits[(data & 0x0F)];
 8002ea0:	466a      	mov	r2, sp
 8002ea2:	5d12      	ldrb	r2, [r2, r4]
 8002ea4:	705a      	strb	r2, [r3, #1]
	}
}
 8002ea6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
		retstr[0] = digits[(data & 0xF0)>>4];
 8002ea8:	4669      	mov	r1, sp
 8002eaa:	0922      	lsrs	r2, r4, #4
 8002eac:	5c8a      	ldrb	r2, [r1, r2]
 8002eae:	701a      	strb	r2, [r3, #0]
		retstr[1] = digits[(data & 0x0F)];
 8002eb0:	220f      	movs	r2, #15
 8002eb2:	4014      	ands	r4, r2
 8002eb4:	e7f4      	b.n	8002ea0 <char_to_hex+0x18>
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	08003820 	.word	0x08003820
 8002ebc:	200000b1 	.word	0x200000b1

08002ec0 <main>:
int main(void) {
 8002ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ec2:	b08b      	sub	sp, #44	; 0x2c
	HAL_Init();
 8002ec4:	f7fd fbe2 	bl	800068c <HAL_Init>
	SystemClock_Config();
 8002ec8:	f7ff ff6c 	bl	8002da4 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002ecc:	2214      	movs	r2, #20
 8002ece:	2100      	movs	r1, #0
 8002ed0:	a805      	add	r0, sp, #20
 8002ed2:	f000 fc88 	bl	80037e6 <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002ed6:	2004      	movs	r0, #4
 8002ed8:	4bcc      	ldr	r3, [pc, #816]	; (800320c <main+0x34c>)
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8002eda:	2701      	movs	r7, #1
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002edc:	6b59      	ldr	r1, [r3, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ede:	2400      	movs	r4, #0
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002ee0:	4301      	orrs	r1, r0
 8002ee2:	6359      	str	r1, [r3, #52]	; 0x34
 8002ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	hspi1.Init.CRCPolynomial = 10;
 8002ee6:	260a      	movs	r6, #10
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002ee8:	4002      	ands	r2, r0
 8002eea:	9201      	str	r2, [sp, #4]
 8002eec:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOF_CLK_ENABLE()
 8002eee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ef0:	301c      	adds	r0, #28
 8002ef2:	4301      	orrs	r1, r0
 8002ef4:	6359      	str	r1, [r3, #52]	; 0x34
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002ef6:	2102      	movs	r1, #2
	__HAL_RCC_GPIOF_CLK_ENABLE()
 8002ef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002efa:	4002      	ands	r2, r0
	HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin | LED_Pin, GPIO_PIN_RESET);
 8002efc:	20a0      	movs	r0, #160	; 0xa0
	__HAL_RCC_GPIOF_CLK_ENABLE()
 8002efe:	9202      	str	r2, [sp, #8]
 8002f00:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8002f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin | LED_Pin, GPIO_PIN_RESET);
 8002f04:	05c0      	lsls	r0, r0, #23
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8002f06:	433a      	orrs	r2, r7
 8002f08:	635a      	str	r2, [r3, #52]	; 0x34
 8002f0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f0c:	403a      	ands	r2, r7
 8002f0e:	9203      	str	r2, [sp, #12]
 8002f10:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002f12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f14:	430a      	orrs	r2, r1
 8002f16:	635a      	str	r2, [r3, #52]	; 0x34
 8002f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin | LED_Pin, GPIO_PIN_RESET);
 8002f1a:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002f1c:	400b      	ands	r3, r1
 8002f1e:	9304      	str	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin | LED_Pin, GPIO_PIN_RESET);
 8002f20:	312e      	adds	r1, #46	; 0x2e
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002f22:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin | LED_Pin, GPIO_PIN_RESET);
 8002f24:	f7fd fd26 	bl	8000974 <HAL_GPIO_WritePin>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f28:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Pin = SPI1_CS_Pin | LED_Pin;
 8002f2a:	2330      	movs	r3, #48	; 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2c:	a905      	add	r1, sp, #20
 8002f2e:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = SPI1_CS_Pin | LED_Pin;
 8002f30:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f32:	9706      	str	r7, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f36:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f38:	f7fd fc74 	bl	8000824 <HAL_GPIO_Init>
	huart2.Instance = USART2;
 8002f3c:	4db4      	ldr	r5, [pc, #720]	; (8003210 <main+0x350>)
 8002f3e:	4bb5      	ldr	r3, [pc, #724]	; (8003214 <main+0x354>)
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002f40:	0028      	movs	r0, r5
	huart2.Instance = USART2;
 8002f42:	602b      	str	r3, [r5, #0]
	huart2.Init.BaudRate = 115200;
 8002f44:	23e1      	movs	r3, #225	; 0xe1
 8002f46:	025b      	lsls	r3, r3, #9
 8002f48:	606b      	str	r3, [r5, #4]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002f4a:	230c      	movs	r3, #12
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f4c:	60ac      	str	r4, [r5, #8]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002f4e:	616b      	str	r3, [r5, #20]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002f50:	60ec      	str	r4, [r5, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002f52:	612c      	str	r4, [r5, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f54:	61ac      	str	r4, [r5, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f56:	61ec      	str	r4, [r5, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f58:	622c      	str	r4, [r5, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f5a:	626c      	str	r4, [r5, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f5c:	62ac      	str	r4, [r5, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002f5e:	f7ff fe4d 	bl	8002bfc <HAL_UART_Init>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8002f62:	0021      	movs	r1, r4
 8002f64:	0028      	movs	r0, r5
 8002f66:	f7ff fed7 	bl	8002d18 <HAL_UARTEx_SetTxFifoThreshold>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8002f6a:	0021      	movs	r1, r4
 8002f6c:	0028      	movs	r0, r5
 8002f6e:	f7ff fef5 	bl	8002d5c <HAL_UARTEx_SetRxFifoThreshold>
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8002f72:	0028      	movs	r0, r5
 8002f74:	f7ff feb4 	bl	8002ce0 <HAL_UARTEx_DisableFifoMode>
	hi2c1.Instance = I2C1;
 8002f78:	4da7      	ldr	r5, [pc, #668]	; (8003218 <main+0x358>)
 8002f7a:	4ba8      	ldr	r3, [pc, #672]	; (800321c <main+0x35c>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002f7c:	0028      	movs	r0, r5
	hi2c1.Instance = I2C1;
 8002f7e:	602b      	str	r3, [r5, #0]
	hi2c1.Init.Timing = 0x0010061A;
 8002f80:	4ba7      	ldr	r3, [pc, #668]	; (8003220 <main+0x360>)
	hi2c1.Init.OwnAddress1 = 0;
 8002f82:	60ac      	str	r4, [r5, #8]
	hi2c1.Init.Timing = 0x0010061A;
 8002f84:	606b      	str	r3, [r5, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f86:	60ef      	str	r7, [r5, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f88:	612c      	str	r4, [r5, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8002f8a:	616c      	str	r4, [r5, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f8c:	61ac      	str	r4, [r5, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f8e:	61ec      	str	r4, [r5, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f90:	622c      	str	r4, [r5, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002f92:	f7fd fd33 	bl	80009fc <HAL_I2C_Init>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8002f96:	0021      	movs	r1, r4
 8002f98:	0028      	movs	r0, r5
 8002f9a:	f7fd fff7 	bl	8000f8c <HAL_I2CEx_ConfigAnalogFilter>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8002f9e:	0021      	movs	r1, r4
 8002fa0:	0028      	movs	r0, r5
 8002fa2:	f7fe f819 	bl	8000fd8 <HAL_I2CEx_ConfigDigitalFilter>
	hspi1.Instance = SPI1;
 8002fa6:	489f      	ldr	r0, [pc, #636]	; (8003224 <main+0x364>)
 8002fa8:	4b9f      	ldr	r3, [pc, #636]	; (8003228 <main+0x368>)
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002faa:	6084      	str	r4, [r0, #8]
	hspi1.Instance = SPI1;
 8002fac:	6003      	str	r3, [r0, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fae:	2382      	movs	r3, #130	; 0x82
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	6043      	str	r3, [r0, #4]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fb4:	23e0      	movs	r3, #224	; 0xe0
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	60c3      	str	r3, [r0, #12]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002fba:	2380      	movs	r3, #128	; 0x80
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	6183      	str	r3, [r0, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002fc0:	3be9      	subs	r3, #233	; 0xe9
 8002fc2:	3bff      	subs	r3, #255	; 0xff
 8002fc4:	61c3      	str	r3, [r0, #28]
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002fc6:	3b10      	subs	r3, #16
 8002fc8:	6343      	str	r3, [r0, #52]	; 0x34
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fca:	6104      	str	r4, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fcc:	6144      	str	r4, [r0, #20]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fce:	6204      	str	r4, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fd0:	6244      	str	r4, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fd2:	6284      	str	r4, [r0, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002fd4:	62c6      	str	r6, [r0, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002fd6:	6304      	str	r4, [r0, #48]	; 0x30
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002fd8:	f7fe fd02 	bl	80019e0 <HAL_SPI_Init>
	huart1.Instance = USART1;
 8002fdc:	4d93      	ldr	r5, [pc, #588]	; (800322c <main+0x36c>)
 8002fde:	4b94      	ldr	r3, [pc, #592]	; (8003230 <main+0x370>)
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002fe0:	0028      	movs	r0, r5
	huart1.Instance = USART1;
 8002fe2:	602b      	str	r3, [r5, #0]
	huart1.Init.BaudRate = 9600;
 8002fe4:	2396      	movs	r3, #150	; 0x96
 8002fe6:	019b      	lsls	r3, r3, #6
 8002fe8:	606b      	str	r3, [r5, #4]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002fea:	230c      	movs	r3, #12
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fec:	60ac      	str	r4, [r5, #8]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002fee:	616b      	str	r3, [r5, #20]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002ff0:	60ec      	str	r4, [r5, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002ff2:	612c      	str	r4, [r5, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ff4:	61ac      	str	r4, [r5, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ff6:	61ec      	str	r4, [r5, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ff8:	622c      	str	r4, [r5, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ffa:	626c      	str	r4, [r5, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ffc:	62ac      	str	r4, [r5, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002ffe:	f7ff fdfd 	bl	8002bfc <HAL_UART_Init>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8003002:	0021      	movs	r1, r4
 8003004:	0028      	movs	r0, r5
 8003006:	f7ff fe87 	bl	8002d18 <HAL_UARTEx_SetTxFifoThreshold>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 800300a:	0021      	movs	r1, r4
 800300c:	0028      	movs	r0, r5
 800300e:	f7ff fea5 	bl	8002d5c <HAL_UARTEx_SetRxFifoThreshold>
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8003012:	0028      	movs	r0, r5
 8003014:	f7ff fe64 	bl	8002ce0 <HAL_UARTEx_DisableFifoMode>
	blink(10);
 8003018:	0030      	movs	r0, r6
 800301a:	f7ff ff1b 	bl	8002e54 <blink>
	fn_fprint("Start Program");
 800301e:	4885      	ldr	r0, [pc, #532]	; (8003234 <main+0x374>)
 8003020:	f7ff fef4 	bl	8002e0c <fn_fprint>
	fn_fprint("\r\n");
 8003024:	4884      	ldr	r0, [pc, #528]	; (8003238 <main+0x378>)
 8003026:	f7ff fef1 	bl	8002e0c <fn_fprint>
	cs_set
 800302a:	20a0      	movs	r0, #160	; 0xa0
 800302c:	003a      	movs	r2, r7
 800302e:	2110      	movs	r1, #16
 8003030:	05c0      	lsls	r0, r0, #23
 8003032:	f7fd fc9f 	bl	8000974 <HAL_GPIO_WritePin>
	MFRC522_Init();
 8003036:	f000 fa53 	bl	80034e0 <MFRC522_Init>
	fn_fprint("MFRC522_Init");
 800303a:	4880      	ldr	r0, [pc, #512]	; (800323c <main+0x37c>)
 800303c:	f7ff fee6 	bl	8002e0c <fn_fprint>
	fn_fprint("\r\n");
 8003040:	487d      	ldr	r0, [pc, #500]	; (8003238 <main+0x378>)
 8003042:	f7ff fee3 	bl	8002e0c <fn_fprint>
		if (!MFRC522_Request(PICC_REQIDL, str)) {
 8003046:	4e7e      	ldr	r6, [pc, #504]	; (8003240 <main+0x380>)
 8003048:	2026      	movs	r0, #38	; 0x26
 800304a:	0031      	movs	r1, r6
 800304c:	f000 f9f8 	bl	8003440 <MFRC522_Request>
 8003050:	2800      	cmp	r0, #0
 8003052:	d156      	bne.n	8003102 <main+0x242>
			if (!MFRC522_Anticoll(str)) {
 8003054:	0030      	movs	r0, r6
 8003056:	f000 fa0e 	bl	8003476 <MFRC522_Anticoll>
 800305a:	2800      	cmp	r0, #0
 800305c:	d151      	bne.n	8003102 <main+0x242>
				b = 9;
 800305e:	2109      	movs	r1, #9
				q = 0;
 8003060:	4b78      	ldr	r3, [pc, #480]	; (8003244 <main+0x384>)
				for (i = 0; i < 4; i++)
 8003062:	4684      	mov	ip, r0
				q = 0;
 8003064:	7018      	strb	r0, [r3, #0]
				b = 9;
 8003066:	4b78      	ldr	r3, [pc, #480]	; (8003248 <main+0x388>)
				for (i = 0; i < 4; i++)
 8003068:	0004      	movs	r4, r0
				b = 9;
 800306a:	7019      	strb	r1, [r3, #0]
				en = 1;
 800306c:	4b77      	ldr	r3, [pc, #476]	; (800324c <main+0x38c>)
 800306e:	3908      	subs	r1, #8
 8003070:	7019      	strb	r1, [r3, #0]
				for (i = 0; i < 4; i++)
 8003072:	4b77      	ldr	r3, [pc, #476]	; (8003250 <main+0x390>)
				j = 0;
 8003074:	4a77      	ldr	r2, [pc, #476]	; (8003254 <main+0x394>)
				for (i = 0; i < 4; i++)
 8003076:	7018      	strb	r0, [r3, #0]
 8003078:	0003      	movs	r3, r0
				j = 0;
 800307a:	7010      	strb	r0, [r2, #0]
				for (i = 0; i < 4; i++)
 800307c:	b2d9      	uxtb	r1, r3
 800307e:	2904      	cmp	r1, #4
 8003080:	d16c      	bne.n	800315c <main+0x29c>
 8003082:	2c00      	cmp	r4, #0
 8003084:	d001      	beq.n	800308a <main+0x1ca>
 8003086:	4b72      	ldr	r3, [pc, #456]	; (8003250 <main+0x390>)
 8003088:	7019      	strb	r1, [r3, #0]
 800308a:	4663      	mov	r3, ip
 800308c:	2b00      	cmp	r3, #0
 800308e:	d000      	beq.n	8003092 <main+0x1d2>
 8003090:	7010      	strb	r0, [r2, #0]
				if (j && en) {
 8003092:	7813      	ldrb	r3, [r2, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d031      	beq.n	80030fc <main+0x23c>
					en = 0;
 8003098:	2300      	movs	r3, #0
 800309a:	4a6c      	ldr	r2, [pc, #432]	; (800324c <main+0x38c>)
						lastID[i] = str[i];
 800309c:	486e      	ldr	r0, [pc, #440]	; (8003258 <main+0x398>)
					en = 0;
 800309e:	7013      	strb	r3, [r2, #0]
					for (i = 0; i < 4; i++)
 80030a0:	4a6b      	ldr	r2, [pc, #428]	; (8003250 <main+0x390>)
 80030a2:	7013      	strb	r3, [r2, #0]
 80030a4:	b2d9      	uxtb	r1, r3
 80030a6:	2904      	cmp	r1, #4
 80030a8:	d162      	bne.n	8003170 <main+0x2b0>
					for (i = 0; i < 4; i++) {
 80030aa:	2300      	movs	r3, #0
 80030ac:	7013      	strb	r3, [r2, #0]
 80030ae:	4c68      	ldr	r4, [pc, #416]	; (8003250 <main+0x390>)
 80030b0:	7823      	ldrb	r3, [r4, #0]
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	d960      	bls.n	8003178 <main+0x2b8>
					HAL_UART_Transmit(&huart1, txBuffer, 18, 100);
 80030b6:	4e69      	ldr	r6, [pc, #420]	; (800325c <main+0x39c>)
 80030b8:	2364      	movs	r3, #100	; 0x64
 80030ba:	2212      	movs	r2, #18
 80030bc:	0031      	movs	r1, r6
 80030be:	0028      	movs	r0, r5
 80030c0:	f7ff fcfc 	bl	8002abc <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 10);
 80030c4:	230a      	movs	r3, #10
 80030c6:	2202      	movs	r2, #2
 80030c8:	495b      	ldr	r1, [pc, #364]	; (8003238 <main+0x378>)
 80030ca:	0028      	movs	r0, r5
 80030cc:	f7ff fcf6 	bl	8002abc <HAL_UART_Transmit>
					ok = 1;
 80030d0:	2201      	movs	r2, #1
 80030d2:	4b63      	ldr	r3, [pc, #396]	; (8003260 <main+0x3a0>)
 80030d4:	701a      	strb	r2, [r3, #0]
					for (i = 0; i < 8; i++) {
 80030d6:	2300      	movs	r3, #0
 80030d8:	003a      	movs	r2, r7
 80030da:	0019      	movs	r1, r3
 80030dc:	469c      	mov	ip, r3
 80030de:	7023      	strb	r3, [r4, #0]
 80030e0:	b2d8      	uxtb	r0, r3
 80030e2:	2808      	cmp	r0, #8
 80030e4:	d15f      	bne.n	80031a6 <main+0x2e6>
 80030e6:	4663      	mov	r3, ip
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d000      	beq.n	80030ee <main+0x22e>
 80030ec:	7020      	strb	r0, [r4, #0]
 80030ee:	2900      	cmp	r1, #0
 80030f0:	d001      	beq.n	80030f6 <main+0x236>
 80030f2:	4b5b      	ldr	r3, [pc, #364]	; (8003260 <main+0x3a0>)
 80030f4:	701a      	strb	r2, [r3, #0]
					blink(1);
 80030f6:	2001      	movs	r0, #1
 80030f8:	f7ff feac 	bl	8002e54 <blink>
				blink(1);
 80030fc:	2001      	movs	r0, #1
 80030fe:	f7ff fea9 	bl	8002e54 <blink>
		if (ok == 1) {
 8003102:	4c57      	ldr	r4, [pc, #348]	; (8003260 <main+0x3a0>)
 8003104:	7823      	ldrb	r3, [r4, #0]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d059      	beq.n	80031be <main+0x2fe>
		if (huart1.RxXferCount == 0) {
 800310a:	002b      	movs	r3, r5
 800310c:	335e      	adds	r3, #94	; 0x5e
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d116      	bne.n	8003142 <main+0x282>
			blink(1);
 8003114:	2001      	movs	r0, #1
 8003116:	f7ff fe9d 	bl	8002e54 <blink>
			comand = rxBuffer[0];
 800311a:	4c52      	ldr	r4, [pc, #328]	; (8003264 <main+0x3a4>)
 800311c:	4a52      	ldr	r2, [pc, #328]	; (8003268 <main+0x3a8>)
 800311e:	7823      	ldrb	r3, [r4, #0]
 8003120:	7013      	strb	r3, [r2, #0]
			if (comand == '1') {
 8003122:	2b31      	cmp	r3, #49	; 0x31
 8003124:	d108      	bne.n	8003138 <main+0x278>
				blink(1);
 8003126:	2001      	movs	r0, #1
 8003128:	f7ff fe94 	bl	8002e54 <blink>
				HAL_UART_Transmit(&huart1, txBuffer, 18, 100);
 800312c:	2364      	movs	r3, #100	; 0x64
 800312e:	2212      	movs	r2, #18
 8003130:	494a      	ldr	r1, [pc, #296]	; (800325c <main+0x39c>)
 8003132:	0028      	movs	r0, r5
 8003134:	f7ff fcc2 	bl	8002abc <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart1, (uint8_t*) rxBuffer, 1);
 8003138:	2201      	movs	r2, #1
 800313a:	0021      	movs	r1, r4
 800313c:	0028      	movs	r0, r5
 800313e:	f7fe fe6f 	bl	8001e20 <HAL_UART_Receive_IT>
			en = 1;									// Delay against scan kode
 8003142:	2201      	movs	r2, #1
 8003144:	4b41      	ldr	r3, [pc, #260]	; (800324c <main+0x38c>)
		HAL_Delay(1);
 8003146:	0038      	movs	r0, r7
			en = 1;									// Delay against scan kode
 8003148:	701a      	strb	r2, [r3, #0]
				lastID[0] = 0;				// Delay reading the same card 3s
 800314a:	2200      	movs	r2, #0
 800314c:	4b42      	ldr	r3, [pc, #264]	; (8003258 <main+0x398>)
 800314e:	701a      	strb	r2, [r3, #0]
				lastID[1] = 0;
 8003150:	705a      	strb	r2, [r3, #1]
				lastID[2] = 0;
 8003152:	709a      	strb	r2, [r3, #2]
				lastID[3] = 0;
 8003154:	70da      	strb	r2, [r3, #3]
		HAL_Delay(1);
 8003156:	f7fd fabf 	bl	80006d8 <HAL_Delay>
		if (!MFRC522_Request(PICC_REQIDL, str)) {
 800315a:	e774      	b.n	8003046 <main+0x186>
					if (lastID[i] != str[i])
 800315c:	493e      	ldr	r1, [pc, #248]	; (8003258 <main+0x398>)
 800315e:	5ccc      	ldrb	r4, [r1, r3]
 8003160:	5cf1      	ldrb	r1, [r6, r3]
 8003162:	428c      	cmp	r4, r1
 8003164:	d001      	beq.n	800316a <main+0x2aa>
 8003166:	46bc      	mov	ip, r7
						j = 1;
 8003168:	0038      	movs	r0, r7
 800316a:	3301      	adds	r3, #1
 800316c:	003c      	movs	r4, r7
 800316e:	e785      	b.n	800307c <main+0x1bc>
						lastID[i] = str[i];
 8003170:	5cf1      	ldrb	r1, [r6, r3]
 8003172:	54c1      	strb	r1, [r0, r3]
 8003174:	3301      	adds	r3, #1
 8003176:	e795      	b.n	80030a4 <main+0x1e4>
						char_to_hex(str[i]);
 8003178:	5cf0      	ldrb	r0, [r6, r3]
 800317a:	f7ff fe85 	bl	8002e88 <char_to_hex>
						txBuffer[b] = retstr[0];
 800317e:	4a3b      	ldr	r2, [pc, #236]	; (800326c <main+0x3ac>)
 8003180:	4b31      	ldr	r3, [pc, #196]	; (8003248 <main+0x388>)
 8003182:	4694      	mov	ip, r2
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	7812      	ldrb	r2, [r2, #0]
 8003188:	4834      	ldr	r0, [pc, #208]	; (800325c <main+0x39c>)
 800318a:	54c2      	strb	r2, [r0, r3]
						b++;
 800318c:	1c5a      	adds	r2, r3, #1
						txBuffer[b] = retstr[1];
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	0011      	movs	r1, r2
 8003192:	4662      	mov	r2, ip
 8003194:	7852      	ldrb	r2, [r2, #1]
						b++;
 8003196:	3302      	adds	r3, #2
						txBuffer[b] = retstr[1];
 8003198:	5442      	strb	r2, [r0, r1]
						b++;
 800319a:	4a2b      	ldr	r2, [pc, #172]	; (8003248 <main+0x388>)
 800319c:	7013      	strb	r3, [r2, #0]
					for (i = 0; i < 4; i++) {
 800319e:	7823      	ldrb	r3, [r4, #0]
 80031a0:	3301      	adds	r3, #1
 80031a2:	7023      	strb	r3, [r4, #0]
 80031a4:	e783      	b.n	80030ae <main+0x1ee>
						if (txBuffer[9 + i] != memID[i])
 80031a6:	18f0      	adds	r0, r6, r3
 80031a8:	7a40      	ldrb	r0, [r0, #9]
 80031aa:	4684      	mov	ip, r0
 80031ac:	4830      	ldr	r0, [pc, #192]	; (8003270 <main+0x3b0>)
 80031ae:	5c18      	ldrb	r0, [r3, r0]
 80031b0:	4584      	cmp	ip, r0
 80031b2:	d001      	beq.n	80031b8 <main+0x2f8>
							ok = 0;
 80031b4:	2200      	movs	r2, #0
						if (txBuffer[9 + i] != memID[i])
 80031b6:	0039      	movs	r1, r7
 80031b8:	3301      	adds	r3, #1
 80031ba:	46bc      	mov	ip, r7
 80031bc:	e790      	b.n	80030e0 <main+0x220>
			HAL_UART_Transmit(&huart1, memIDtext, 18, 100);
 80031be:	2364      	movs	r3, #100	; 0x64
 80031c0:	2212      	movs	r2, #18
 80031c2:	492c      	ldr	r1, [pc, #176]	; (8003274 <main+0x3b4>)
 80031c4:	0028      	movs	r0, r5
 80031c6:	f7ff fc79 	bl	8002abc <HAL_UART_Transmit>
			HAL_Delay(200);
 80031ca:	20c8      	movs	r0, #200	; 0xc8
 80031cc:	f7fd fa84 	bl	80006d8 <HAL_Delay>
			ok = 0;
 80031d0:	2300      	movs	r3, #0
				LED_ON
 80031d2:	26a0      	movs	r6, #160	; 0xa0
			ok = 0;
 80031d4:	7023      	strb	r3, [r4, #0]
			for (i = 0; i < 10; i++) {
 80031d6:	4c1e      	ldr	r4, [pc, #120]	; (8003250 <main+0x390>)
				LED_ON
 80031d8:	05f6      	lsls	r6, r6, #23
			for (i = 0; i < 10; i++) {
 80031da:	7023      	strb	r3, [r4, #0]
 80031dc:	7823      	ldrb	r3, [r4, #0]
 80031de:	2b09      	cmp	r3, #9
 80031e0:	d893      	bhi.n	800310a <main+0x24a>
				LED_ON
 80031e2:	2201      	movs	r2, #1
 80031e4:	2120      	movs	r1, #32
 80031e6:	0030      	movs	r0, r6
 80031e8:	f7fd fbc4 	bl	8000974 <HAL_GPIO_WritePin>
				HAL_Delay(50);
 80031ec:	2032      	movs	r0, #50	; 0x32
 80031ee:	f7fd fa73 	bl	80006d8 <HAL_Delay>
				LED_OFF
 80031f2:	2200      	movs	r2, #0
 80031f4:	2120      	movs	r1, #32
 80031f6:	0030      	movs	r0, r6
 80031f8:	f7fd fbbc 	bl	8000974 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 80031fc:	2064      	movs	r0, #100	; 0x64
 80031fe:	f7fd fa6b 	bl	80006d8 <HAL_Delay>
			for (i = 0; i < 10; i++) {
 8003202:	7823      	ldrb	r3, [r4, #0]
 8003204:	3301      	adds	r3, #1
 8003206:	7023      	strb	r3, [r4, #0]
 8003208:	e7e8      	b.n	80031dc <main+0x31c>
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	40021000 	.word	0x40021000
 8003210:	20000244 	.word	0x20000244
 8003214:	40004400 	.word	0x40004400
 8003218:	20000064 	.word	0x20000064
 800321c:	40005400 	.word	0x40005400
 8003220:	0010061a 	.word	0x0010061a
 8003224:	200001e0 	.word	0x200001e0
 8003228:	40013000 	.word	0x40013000
 800322c:	200000c4 	.word	0x200000c4
 8003230:	40013800 	.word	0x40013800
 8003234:	08003841 	.word	0x08003841
 8003238:	0800384f 	.word	0x0800384f
 800323c:	08003852 	.word	0x08003852
 8003240:	200002d0 	.word	0x200002d0
 8003244:	200002e0 	.word	0x200002e0
 8003248:	20000060 	.word	0x20000060
 800324c:	200000bb 	.word	0x200000bb
 8003250:	200000bc 	.word	0x200000bc
 8003254:	20000061 	.word	0x20000061
 8003258:	200000bd 	.word	0x200000bd
 800325c:	2000002a 	.word	0x2000002a
 8003260:	200001dd 	.word	0x200001dd
 8003264:	20000022 	.word	0x20000022
 8003268:	200001dc 	.word	0x200001dc
 800326c:	200000b1 	.word	0x200000b1
 8003270:	20000008 	.word	0x20000008
 8003274:	20000010 	.word	0x20000010

08003278 <SPI1SendByte>:
extern void MFRC522_Reset(void);
extern void MFRC522_AntennaOn(void);
extern void MFRC522_AntennaOff(void);
extern void MFRC522_Halt(void);

uint8_t SPI1SendByte(uint8_t data) {
 8003278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	unsigned char writeCommand[1];
	unsigned char readValue[1];

	writeCommand[0] = data;
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 800327a:	230a      	movs	r3, #10
	writeCommand[0] = data;
 800327c:	a902      	add	r1, sp, #8
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 800327e:	ac03      	add	r4, sp, #12
	writeCommand[0] = data;
 8003280:	7008      	strb	r0, [r1, #0]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 8003282:	0022      	movs	r2, r4
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	4803      	ldr	r0, [pc, #12]	; (8003294 <SPI1SendByte+0x1c>)
 8003288:	3b09      	subs	r3, #9
 800328a:	f7fe fc07 	bl	8001a9c <HAL_SPI_TransmitReceive>
	return readValue[0];
 800328e:	7820      	ldrb	r0, [r4, #0]
}
 8003290:	b004      	add	sp, #16
 8003292:	bd10      	pop	{r4, pc}
 8003294:	200001e0 	.word	0x200001e0

08003298 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8003298:	b570      	push	{r4, r5, r6, lr}
	cs_reset
 800329a:	24a0      	movs	r4, #160	; 0xa0
void SPI1_WriteReg(uint8_t address, uint8_t value) {
 800329c:	0006      	movs	r6, r0
 800329e:	000d      	movs	r5, r1
	cs_reset
 80032a0:	05e4      	lsls	r4, r4, #23
 80032a2:	2200      	movs	r2, #0
 80032a4:	2110      	movs	r1, #16
 80032a6:	0020      	movs	r0, r4
 80032a8:	f7fd fb64 	bl	8000974 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 80032ac:	0030      	movs	r0, r6
 80032ae:	f7ff ffe3 	bl	8003278 <SPI1SendByte>
	SPI1SendByte(value);
 80032b2:	0028      	movs	r0, r5
 80032b4:	f7ff ffe0 	bl	8003278 <SPI1SendByte>
	cs_set
 80032b8:	2201      	movs	r2, #1
 80032ba:	2110      	movs	r1, #16
 80032bc:	0020      	movs	r0, r4
 80032be:	f7fd fb59 	bl	8000974 <HAL_GPIO_WritePin>
}
 80032c2:	bd70      	pop	{r4, r5, r6, pc}

080032c4 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 80032c4:	b570      	push	{r4, r5, r6, lr}
	uint8_t	val;

	cs_reset
 80032c6:	24a0      	movs	r4, #160	; 0xa0
uint8_t SPI1_ReadReg(uint8_t address) {
 80032c8:	0005      	movs	r5, r0
	cs_reset
 80032ca:	05e4      	lsls	r4, r4, #23
 80032cc:	2200      	movs	r2, #0
 80032ce:	2110      	movs	r1, #16
 80032d0:	0020      	movs	r0, r4
 80032d2:	f7fd fb4f 	bl	8000974 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 80032d6:	0028      	movs	r0, r5
 80032d8:	f7ff ffce 	bl	8003278 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 80032dc:	2000      	movs	r0, #0
 80032de:	f7ff ffcb 	bl	8003278 <SPI1SendByte>
 80032e2:	0005      	movs	r5, r0
	cs_set
 80032e4:	2201      	movs	r2, #1
 80032e6:	0020      	movs	r0, r4
 80032e8:	2110      	movs	r1, #16
 80032ea:	f7fd fb43 	bl	8000974 <HAL_GPIO_WritePin>
	return val;
}
 80032ee:	0028      	movs	r0, r5
 80032f0:	bd70      	pop	{r4, r5, r6, pc}

080032f2 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
	addr = (addr << 1) & 0x7E;								// Address format: 0XXXXXX0
  SPI1_WriteReg(addr, val);
 80032f2:	237e      	movs	r3, #126	; 0x7e
void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 80032f4:	b510      	push	{r4, lr}
	addr = (addr << 1) & 0x7E;								// Address format: 0XXXXXX0
 80032f6:	0040      	lsls	r0, r0, #1
  SPI1_WriteReg(addr, val);
 80032f8:	4018      	ands	r0, r3
 80032fa:	f7ff ffcd 	bl	8003298 <SPI1_WriteReg>
}
 80032fe:	bd10      	pop	{r4, pc}

08003300 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8003300:	237e      	movs	r3, #126	; 0x7e
uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8003302:	b510      	push	{r4, lr}
	addr = ((addr << 1) & 0x7E) | 0x80;
 8003304:	0040      	lsls	r0, r0, #1
 8003306:	4018      	ands	r0, r3
 8003308:	3302      	adds	r3, #2
	val = SPI1_ReadReg(addr);
 800330a:	4318      	orrs	r0, r3
 800330c:	f7ff ffda 	bl	80032c4 <SPI1_ReadReg>
	return val;
}
 8003310:	bd10      	pop	{r4, pc}

08003312 <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8003312:	b570      	push	{r4, r5, r6, lr}
 8003314:	000d      	movs	r5, r1
 8003316:	0004      	movs	r4, r0
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8003318:	f7ff fff2 	bl	8003300 <MFRC522_ReadRegister>
 800331c:	4328      	orrs	r0, r5
 800331e:	b2c1      	uxtb	r1, r0
 8003320:	0020      	movs	r0, r4
 8003322:	f7ff ffe6 	bl	80032f2 <MFRC522_WriteRegister>
}
 8003326:	bd70      	pop	{r4, r5, r6, pc}

08003328 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8003328:	b570      	push	{r4, r5, r6, lr}
 800332a:	000d      	movs	r5, r1
 800332c:	0004      	movs	r4, r0
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 800332e:	f7ff ffe7 	bl	8003300 <MFRC522_ReadRegister>
 8003332:	43a8      	bics	r0, r5
 8003334:	b2c1      	uxtb	r1, r0
 8003336:	0020      	movs	r0, r4
 8003338:	f7ff ffdb 	bl	80032f2 <MFRC522_WriteRegister>
}
 800333c:	bd70      	pop	{r4, r5, r6, pc}

0800333e <MFRC522_ToCard>:
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
	return status;
}

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 800333e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003340:	0007      	movs	r7, r0
 8003342:	000c      	movs	r4, r1
 8003344:	0016      	movs	r6, r2
 8003346:	9301      	str	r3, [sp, #4]
	uint8_t waitIRq = 0x00;
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8003348:	280c      	cmp	r0, #12
 800334a:	d03a      	beq.n	80033c2 <MFRC522_ToCard+0x84>
 800334c:	280e      	cmp	r0, #14
 800334e:	d03c      	beq.n	80033ca <MFRC522_ToCard+0x8c>
	uint8_t waitIRq = 0x00;
 8003350:	2300      	movs	r3, #0
	uint8_t irqEn = 0x00;
 8003352:	001d      	movs	r5, r3
	uint8_t waitIRq = 0x00;
 8003354:	9300      	str	r3, [sp, #0]
		}
		default:
		break;
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8003356:	2180      	movs	r1, #128	; 0x80
  SPI1_WriteReg(addr, val);
 8003358:	2004      	movs	r0, #4
 800335a:	4329      	orrs	r1, r5
 800335c:	f7ff ff9c 	bl	8003298 <SPI1_WriteReg>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8003360:	2180      	movs	r1, #128	; 0x80
 8003362:	2004      	movs	r0, #4
 8003364:	f7ff ffe0 	bl	8003328 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8003368:	2180      	movs	r1, #128	; 0x80
 800336a:	200a      	movs	r0, #10
 800336c:	f7ff ffd1 	bl	8003312 <MFRC522_SetBitMask>
  SPI1_WriteReg(addr, val);
 8003370:	2100      	movs	r1, #0
 8003372:	2002      	movs	r0, #2
 8003374:	f7ff ff90 	bl	8003298 <SPI1_WriteReg>
 8003378:	19a6      	adds	r6, r4, r6
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 800337a:	42a6      	cmp	r6, r4
 800337c:	d129      	bne.n	80033d2 <MFRC522_ToCard+0x94>
  SPI1_WriteReg(addr, val);
 800337e:	0039      	movs	r1, r7
 8003380:	2002      	movs	r0, #2
 8003382:	f7ff ff89 	bl	8003298 <SPI1_WriteReg>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);
 8003386:	2f0c      	cmp	r7, #12
 8003388:	d103      	bne.n	8003392 <MFRC522_ToCard+0x54>
 800338a:	2180      	movs	r1, #128	; 0x80
 800338c:	200d      	movs	r0, #13
 800338e:	f7ff ffc0 	bl	8003312 <MFRC522_SetBitMask>
	uint8_t irqEn = 0x00;
 8003392:	24fa      	movs	r4, #250	; 0xfa
 8003394:	00e4      	lsls	r4, r4, #3
	val = SPI1_ReadReg(addr);
 8003396:	2088      	movs	r0, #136	; 0x88
 8003398:	f7ff ff94 	bl	80032c4 <SPI1_ReadReg>

	i = 2000;	//
	do {

		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
		i--;
 800339c:	3c01      	subs	r4, #1
 800339e:	b2a4      	uxth	r4, r4
	val = SPI1_ReadReg(addr);
 80033a0:	0006      	movs	r6, r0
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80033a2:	2c00      	cmp	r4, #0
 80033a4:	d004      	beq.n	80033b0 <MFRC522_ToCard+0x72>
 80033a6:	2301      	movs	r3, #1
 80033a8:	9a00      	ldr	r2, [sp, #0]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	4203      	tst	r3, r0
 80033ae:	d0f2      	beq.n	8003396 <MFRC522_ToCard+0x58>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 80033b0:	2180      	movs	r1, #128	; 0x80
 80033b2:	200d      	movs	r0, #13
 80033b4:	f7ff ffb8 	bl	8003328 <MFRC522_ClearBitMask>

	if (i != 0)  {
 80033b8:	2c00      	cmp	r4, #0
 80033ba:	d110      	bne.n	80033de <MFRC522_ToCard+0xa0>
	uint8_t status = MI_ERR;
 80033bc:	2602      	movs	r6, #2
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
			}
		} else status = MI_ERR;
	}
	return status;
}
 80033be:	0030      	movs	r0, r6
 80033c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			waitIRq = 0x30;
 80033c2:	2330      	movs	r3, #48	; 0x30
			irqEn = 0x77;
 80033c4:	2577      	movs	r5, #119	; 0x77
			waitIRq = 0x30;
 80033c6:	9300      	str	r3, [sp, #0]
			break;
 80033c8:	e7c5      	b.n	8003356 <MFRC522_ToCard+0x18>
			waitIRq = 0x10;
 80033ca:	2310      	movs	r3, #16
			irqEn = 0x12;
 80033cc:	2512      	movs	r5, #18
			waitIRq = 0x10;
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	e7c1      	b.n	8003356 <MFRC522_ToCard+0x18>
  SPI1_WriteReg(addr, val);
 80033d2:	7821      	ldrb	r1, [r4, #0]
 80033d4:	2012      	movs	r0, #18
 80033d6:	f7ff ff5f 	bl	8003298 <SPI1_WriteReg>
 80033da:	3401      	adds	r4, #1
 80033dc:	e7cd      	b.n	800337a <MFRC522_ToCard+0x3c>
	val = SPI1_ReadReg(addr);
 80033de:	208c      	movs	r0, #140	; 0x8c
 80033e0:	f7ff ff70 	bl	80032c4 <SPI1_ReadReg>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 80033e4:	231b      	movs	r3, #27
 80033e6:	4218      	tst	r0, r3
 80033e8:	d1e8      	bne.n	80033bc <MFRC522_ToCard+0x7e>
			status = MI_OK;
 80033ea:	3b1a      	subs	r3, #26
 80033ec:	402b      	ands	r3, r5
 80033ee:	401e      	ands	r6, r3
			if (command == PCD_TRANSCEIVE) {
 80033f0:	2f0c      	cmp	r7, #12
 80033f2:	d1e4      	bne.n	80033be <MFRC522_ToCard+0x80>
	val = SPI1_ReadReg(addr);
 80033f4:	2094      	movs	r0, #148	; 0x94
 80033f6:	f7ff ff65 	bl	80032c4 <SPI1_ReadReg>
 80033fa:	0004      	movs	r4, r0
 80033fc:	2098      	movs	r0, #152	; 0x98
 80033fe:	f7ff ff61 	bl	80032c4 <SPI1_ReadReg>
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8003402:	2307      	movs	r3, #7
 8003404:	4003      	ands	r3, r0
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8003406:	d017      	beq.n	8003438 <MFRC522_ToCard+0xfa>
 8003408:	1e60      	subs	r0, r4, #1
 800340a:	00c0      	lsls	r0, r0, #3
 800340c:	18c0      	adds	r0, r0, r3
 800340e:	9b08      	ldr	r3, [sp, #32]
 8003410:	8018      	strh	r0, [r3, #0]
				if (n == 0) n = 1;
 8003412:	2301      	movs	r3, #1
 8003414:	2c00      	cmp	r4, #0
 8003416:	d005      	beq.n	8003424 <MFRC522_ToCard+0xe6>
 8003418:	1c23      	adds	r3, r4, #0
 800341a:	b2e4      	uxtb	r4, r4
 800341c:	2c10      	cmp	r4, #16
 800341e:	d900      	bls.n	8003422 <MFRC522_ToCard+0xe4>
 8003420:	2310      	movs	r3, #16
 8003422:	b2db      	uxtb	r3, r3
 8003424:	9d01      	ldr	r5, [sp, #4]
 8003426:	18ec      	adds	r4, r5, r3
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8003428:	42ac      	cmp	r4, r5
 800342a:	d0c8      	beq.n	80033be <MFRC522_ToCard+0x80>
	val = SPI1_ReadReg(addr);
 800342c:	2092      	movs	r0, #146	; 0x92
 800342e:	f7ff ff49 	bl	80032c4 <SPI1_ReadReg>
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8003432:	7028      	strb	r0, [r5, #0]
 8003434:	3501      	adds	r5, #1
 8003436:	e7f7      	b.n	8003428 <MFRC522_ToCard+0xea>
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8003438:	9a08      	ldr	r2, [sp, #32]
 800343a:	00e3      	lsls	r3, r4, #3
 800343c:	8013      	strh	r3, [r2, #0]
 800343e:	e7e8      	b.n	8003412 <MFRC522_ToCard+0xd4>

08003440 <MFRC522_Request>:
uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8003440:	b530      	push	{r4, r5, lr}
 8003442:	000c      	movs	r4, r1
 8003444:	0005      	movs	r5, r0
 8003446:	b085      	sub	sp, #20
  SPI1_WriteReg(addr, val);
 8003448:	2107      	movs	r1, #7
 800344a:	201a      	movs	r0, #26
 800344c:	f7ff ff24 	bl	8003298 <SPI1_WriteReg>
	TagType[0] = reqMode;
 8003450:	7025      	strb	r5, [r4, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8003452:	250e      	movs	r5, #14
 8003454:	446d      	add	r5, sp
 8003456:	9500      	str	r5, [sp, #0]
 8003458:	0023      	movs	r3, r4
 800345a:	2201      	movs	r2, #1
 800345c:	0021      	movs	r1, r4
 800345e:	200c      	movs	r0, #12
 8003460:	f7ff ff6d 	bl	800333e <MFRC522_ToCard>
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8003464:	2800      	cmp	r0, #0
 8003466:	d104      	bne.n	8003472 <MFRC522_Request+0x32>
 8003468:	882b      	ldrh	r3, [r5, #0]
 800346a:	2b10      	cmp	r3, #16
 800346c:	d101      	bne.n	8003472 <MFRC522_Request+0x32>
}
 800346e:	b005      	add	sp, #20
 8003470:	bd30      	pop	{r4, r5, pc}
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8003472:	2002      	movs	r0, #2
 8003474:	e7fb      	b.n	800346e <MFRC522_Request+0x2e>

08003476 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8003476:	b530      	push	{r4, r5, lr}
  SPI1_WriteReg(addr, val);
 8003478:	2100      	movs	r1, #0
uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 800347a:	0004      	movs	r4, r0
 800347c:	b085      	sub	sp, #20
  SPI1_WriteReg(addr, val);
 800347e:	201a      	movs	r0, #26
 8003480:	f7ff ff0a 	bl	8003298 <SPI1_WriteReg>
	uint8_t i;
	uint8_t serNumCheck = 0;
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
	serNum[0] = PICC_ANTICOLL;
 8003484:	2393      	movs	r3, #147	; 0x93
 8003486:	7023      	strb	r3, [r4, #0]
	serNum[1] = 0x20;
 8003488:	3b73      	subs	r3, #115	; 0x73
 800348a:	7063      	strb	r3, [r4, #1]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800348c:	3b12      	subs	r3, #18
 800348e:	446b      	add	r3, sp
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	2202      	movs	r2, #2
 8003494:	0023      	movs	r3, r4
 8003496:	0021      	movs	r1, r4
 8003498:	200c      	movs	r0, #12
 800349a:	f7ff ff50 	bl	800333e <MFRC522_ToCard>
	if (status == MI_OK) {
 800349e:	2800      	cmp	r0, #0
 80034a0:	d10b      	bne.n	80034ba <MFRC522_Anticoll+0x44>
 80034a2:	0023      	movs	r3, r4
 80034a4:	0002      	movs	r2, r0
 80034a6:	1d21      	adds	r1, r4, #4
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 80034a8:	781d      	ldrb	r5, [r3, #0]
 80034aa:	3301      	adds	r3, #1
 80034ac:	406a      	eors	r2, r5
 80034ae:	428b      	cmp	r3, r1
 80034b0:	d1fa      	bne.n	80034a8 <MFRC522_Anticoll+0x32>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 80034b2:	7923      	ldrb	r3, [r4, #4]
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d000      	beq.n	80034ba <MFRC522_Anticoll+0x44>
 80034b8:	2002      	movs	r0, #2
	}
	return status;
}
 80034ba:	b005      	add	sp, #20
 80034bc:	bd30      	pop	{r4, r5, pc}

080034be <MFRC522_Reset>:
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
	MFRC522_AntennaOn();																		// Open the antenna
}

void MFRC522_Reset(void) {
 80034be:	b510      	push	{r4, lr}
  SPI1_WriteReg(addr, val);
 80034c0:	210f      	movs	r1, #15
 80034c2:	2002      	movs	r0, #2
 80034c4:	f7ff fee8 	bl	8003298 <SPI1_WriteReg>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
}
 80034c8:	bd10      	pop	{r4, pc}

080034ca <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 80034ca:	b510      	push	{r4, lr}
	val = SPI1_ReadReg(addr);
 80034cc:	20a8      	movs	r0, #168	; 0xa8
 80034ce:	f7ff fef9 	bl	80032c4 <SPI1_ReadReg>
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 80034d2:	2103      	movs	r1, #3
 80034d4:	4208      	tst	r0, r1
 80034d6:	d102      	bne.n	80034de <MFRC522_AntennaOn+0x14>
 80034d8:	2014      	movs	r0, #20
 80034da:	f7ff ff1a 	bl	8003312 <MFRC522_SetBitMask>
}
 80034de:	bd10      	pop	{r4, pc}

080034e0 <MFRC522_Init>:
void MFRC522_Init(void) {
 80034e0:	b510      	push	{r4, lr}
	MFRC522_Reset();
 80034e2:	f7ff ffec 	bl	80034be <MFRC522_Reset>
  SPI1_WriteReg(addr, val);
 80034e6:	218d      	movs	r1, #141	; 0x8d
 80034e8:	2054      	movs	r0, #84	; 0x54
 80034ea:	f7ff fed5 	bl	8003298 <SPI1_WriteReg>
 80034ee:	213e      	movs	r1, #62	; 0x3e
 80034f0:	2056      	movs	r0, #86	; 0x56
 80034f2:	f7ff fed1 	bl	8003298 <SPI1_WriteReg>
 80034f6:	211e      	movs	r1, #30
 80034f8:	205a      	movs	r0, #90	; 0x5a
 80034fa:	f7ff fecd 	bl	8003298 <SPI1_WriteReg>
 80034fe:	2100      	movs	r1, #0
 8003500:	2058      	movs	r0, #88	; 0x58
 8003502:	f7ff fec9 	bl	8003298 <SPI1_WriteReg>
 8003506:	2170      	movs	r1, #112	; 0x70
 8003508:	204c      	movs	r0, #76	; 0x4c
 800350a:	f7ff fec5 	bl	8003298 <SPI1_WriteReg>
 800350e:	2140      	movs	r1, #64	; 0x40
 8003510:	202a      	movs	r0, #42	; 0x2a
 8003512:	f7ff fec1 	bl	8003298 <SPI1_WriteReg>
 8003516:	213d      	movs	r1, #61	; 0x3d
 8003518:	2022      	movs	r0, #34	; 0x22
 800351a:	f7ff febd 	bl	8003298 <SPI1_WriteReg>
	MFRC522_AntennaOn();																		// Open the antenna
 800351e:	f7ff ffd4 	bl	80034ca <MFRC522_AntennaOn>
}
 8003522:	bd10      	pop	{r4, pc}

08003524 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003524:	2001      	movs	r0, #1
 8003526:	4b0d      	ldr	r3, [pc, #52]	; (800355c <HAL_MspInit+0x38>)
{
 8003528:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800352a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800352c:	4301      	orrs	r1, r0
 800352e:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8003530:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003532:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8003534:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003536:	4002      	ands	r2, r0
 8003538:	9200      	str	r2, [sp, #0]
 800353a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800353c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800353e:	430a      	orrs	r2, r1
 8003540:	63da      	str	r2, [r3, #60]	; 0x3c
 8003542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 8003544:	4a06      	ldr	r2, [pc, #24]	; (8003560 <HAL_MspInit+0x3c>)
 8003546:	400b      	ands	r3, r1
 8003548:	9301      	str	r3, [sp, #4]
 800354a:	9b01      	ldr	r3, [sp, #4]
 800354c:	23c0      	movs	r3, #192	; 0xc0
 800354e:	6811      	ldr	r1, [r2, #0]
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	430b      	orrs	r3, r1
 8003554:	6013      	str	r3, [r2, #0]
  LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD1_STROBE | LL_SYSCFG_UCPD2_STROBE);

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003556:	b002      	add	sp, #8
 8003558:	4770      	bx	lr
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	40021000 	.word	0x40021000
 8003560:	40010000 	.word	0x40010000

08003564 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003564:	b510      	push	{r4, lr}
 8003566:	0004      	movs	r4, r0
 8003568:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800356a:	2214      	movs	r2, #20
 800356c:	2100      	movs	r1, #0
 800356e:	a803      	add	r0, sp, #12
 8003570:	f000 f939 	bl	80037e6 <memset>
  if(hi2c->Instance==I2C1)
 8003574:	4b16      	ldr	r3, [pc, #88]	; (80035d0 <HAL_I2C_MspInit+0x6c>)
 8003576:	6822      	ldr	r2, [r4, #0]
 8003578:	429a      	cmp	r2, r3
 800357a:	d126      	bne.n	80035ca <HAL_I2C_MspInit+0x66>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800357c:	2102      	movs	r1, #2
 800357e:	4c15      	ldr	r4, [pc, #84]	; (80035d4 <HAL_I2C_MspInit+0x70>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003580:	4815      	ldr	r0, [pc, #84]	; (80035d8 <HAL_I2C_MspInit+0x74>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003582:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003584:	430a      	orrs	r2, r1
 8003586:	6362      	str	r2, [r4, #52]	; 0x34
 8003588:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800358a:	400b      	ands	r3, r1
 800358c:	9301      	str	r3, [sp, #4]
 800358e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003590:	23c0      	movs	r3, #192	; 0xc0
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003596:	2312      	movs	r3, #18
 8003598:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800359a:	3b11      	subs	r3, #17
 800359c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800359e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80035a0:	3305      	adds	r3, #5
 80035a2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035a4:	f7fd f93e 	bl	8000824 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035a8:	2180      	movs	r1, #128	; 0x80
 80035aa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80035ac:	0389      	lsls	r1, r1, #14
 80035ae:	430a      	orrs	r2, r1
 80035b0:	63e2      	str	r2, [r4, #60]	; 0x3c
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80035b2:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80035b6:	2017      	movs	r0, #23
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035b8:	400b      	ands	r3, r1
 80035ba:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80035bc:	0011      	movs	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035be:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80035c0:	f7fd f89c 	bl	80006fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80035c4:	2017      	movs	r0, #23
 80035c6:	f7fd f8c9 	bl	800075c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80035ca:	b008      	add	sp, #32
 80035cc:	bd10      	pop	{r4, pc}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	40005400 	.word	0x40005400
 80035d4:	40021000 	.word	0x40021000
 80035d8:	50000400 	.word	0x50000400

080035dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035dc:	b510      	push	{r4, lr}
 80035de:	0004      	movs	r4, r0
 80035e0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e2:	2214      	movs	r2, #20
 80035e4:	2100      	movs	r1, #0
 80035e6:	a803      	add	r0, sp, #12
 80035e8:	f000 f8fd 	bl	80037e6 <memset>
  if(hspi->Instance==SPI1)
 80035ec:	4b14      	ldr	r3, [pc, #80]	; (8003640 <HAL_SPI_MspInit+0x64>)
 80035ee:	6822      	ldr	r2, [r4, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d122      	bne.n	800363a <HAL_SPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035f4:	2080      	movs	r0, #128	; 0x80
 80035f6:	4b13      	ldr	r3, [pc, #76]	; (8003644 <HAL_SPI_MspInit+0x68>)
 80035f8:	0140      	lsls	r0, r0, #5
 80035fa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80035fc:	4301      	orrs	r1, r0
 80035fe:	6419      	str	r1, [r3, #64]	; 0x40
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003600:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003602:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003604:	4002      	ands	r2, r0
 8003606:	9201      	str	r2, [sp, #4]
 8003608:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800360a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800360c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800360e:	430a      	orrs	r2, r1
 8003610:	635a      	str	r2, [r3, #52]	; 0x34
 8003612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003614:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003616:	400b      	ands	r3, r1
 8003618:	9302      	str	r3, [sp, #8]
 800361a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800361c:	23c2      	movs	r3, #194	; 0xc2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800361e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8003620:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003622:	3bc0      	subs	r3, #192	; 0xc0
 8003624:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003626:	f7fd f8fd 	bl	8000824 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800362a:	2200      	movs	r2, #0
 800362c:	2019      	movs	r0, #25
 800362e:	0011      	movs	r1, r2
 8003630:	f7fd f864 	bl	80006fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003634:	2019      	movs	r0, #25
 8003636:	f7fd f891 	bl	800075c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800363a:	b008      	add	sp, #32
 800363c:	bd10      	pop	{r4, pc}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	40013000 	.word	0x40013000
 8003644:	40021000 	.word	0x40021000

08003648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003648:	b510      	push	{r4, lr}
 800364a:	0004      	movs	r4, r0
 800364c:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800364e:	2214      	movs	r2, #20
 8003650:	2100      	movs	r1, #0
 8003652:	a805      	add	r0, sp, #20
 8003654:	f000 f8c7 	bl	80037e6 <memset>
  if(huart->Instance==USART1)
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	4a1f      	ldr	r2, [pc, #124]	; (80036d8 <HAL_UART_MspInit+0x90>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d11d      	bne.n	800369c <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003660:	2080      	movs	r0, #128	; 0x80
 8003662:	4b1e      	ldr	r3, [pc, #120]	; (80036dc <HAL_UART_MspInit+0x94>)
 8003664:	01c0      	lsls	r0, r0, #7
 8003666:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003668:	4301      	orrs	r1, r0
 800366a:	6419      	str	r1, [r3, #64]	; 0x40
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800366c:	2104      	movs	r1, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 800366e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003670:	4002      	ands	r2, r0
 8003672:	9201      	str	r2, [sp, #4]
 8003674:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003678:	4819      	ldr	r0, [pc, #100]	; (80036e0 <HAL_UART_MspInit+0x98>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800367a:	430a      	orrs	r2, r1
 800367c:	635a      	str	r2, [r3, #52]	; 0x34
 800367e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003680:	400b      	ands	r3, r1
 8003682:	9302      	str	r3, [sp, #8]
 8003684:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003686:	2330      	movs	r3, #48	; 0x30
 8003688:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368a:	3b2e      	subs	r3, #46	; 0x2e
 800368c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800368e:	3b01      	subs	r3, #1
 8003690:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003692:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003694:	f7fd f8c6 	bl	8000824 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003698:	b00a      	add	sp, #40	; 0x28
 800369a:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 800369c:	4a11      	ldr	r2, [pc, #68]	; (80036e4 <HAL_UART_MspInit+0x9c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d1fa      	bne.n	8003698 <HAL_UART_MspInit+0x50>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036a2:	2080      	movs	r0, #128	; 0x80
 80036a4:	4b0d      	ldr	r3, [pc, #52]	; (80036dc <HAL_UART_MspInit+0x94>)
 80036a6:	0280      	lsls	r0, r0, #10
 80036a8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80036aa:	4301      	orrs	r1, r0
 80036ac:	63d9      	str	r1, [r3, #60]	; 0x3c
 80036ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036b0:	4002      	ands	r2, r0
 80036b2:	9203      	str	r2, [sp, #12]
 80036b4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b6:	2201      	movs	r2, #1
 80036b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ba:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036bc:	4311      	orrs	r1, r2
 80036be:	6359      	str	r1, [r3, #52]	; 0x34
 80036c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c2:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c4:	4013      	ands	r3, r2
 80036c6:	9304      	str	r3, [sp, #16]
 80036c8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80036ca:	230c      	movs	r3, #12
 80036cc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ce:	3b0a      	subs	r3, #10
 80036d0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80036d2:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d4:	05c0      	lsls	r0, r0, #23
 80036d6:	e7dd      	b.n	8003694 <HAL_UART_MspInit+0x4c>
 80036d8:	40013800 	.word	0x40013800
 80036dc:	40021000 	.word	0x40021000
 80036e0:	50000800 	.word	0x50000800
 80036e4:	40004400 	.word	0x40004400

080036e8 <NMI_Handler>:
 80036e8:	4770      	bx	lr

080036ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036ea:	e7fe      	b.n	80036ea <HardFault_Handler>

080036ec <SVC_Handler>:
 80036ec:	4770      	bx	lr

080036ee <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036ee:	4770      	bx	lr

080036f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036f0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036f2:	f7fc ffdf 	bl	80006b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036f6:	bd10      	pop	{r4, pc}

080036f8 <I2C1_IRQHandler>:
void I2C1_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80036f8:	4806      	ldr	r0, [pc, #24]	; (8003714 <I2C1_IRQHandler+0x1c>)
{
 80036fa:	b510      	push	{r4, lr}
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80036fc:	6803      	ldr	r3, [r0, #0]
 80036fe:	699a      	ldr	r2, [r3, #24]
 8003700:	23e0      	movs	r3, #224	; 0xe0
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	421a      	tst	r2, r3
 8003706:	d002      	beq.n	800370e <I2C1_IRQHandler+0x16>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8003708:	f7fd fc00 	bl	8000f0c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800370c:	bd10      	pop	{r4, pc}
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800370e:	f7fd f9cb 	bl	8000aa8 <HAL_I2C_EV_IRQHandler>
}
 8003712:	e7fb      	b.n	800370c <I2C1_IRQHandler+0x14>
 8003714:	20000064 	.word	0x20000064

08003718 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003718:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800371a:	4802      	ldr	r0, [pc, #8]	; (8003724 <SPI1_IRQHandler+0xc>)
 800371c:	f7fe faf2 	bl	8001d04 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003720:	bd10      	pop	{r4, pc}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	200001e0 	.word	0x200001e0

08003728 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003728:	2280      	movs	r2, #128	; 0x80
 800372a:	4b02      	ldr	r3, [pc, #8]	; (8003734 <SystemInit+0xc>)
 800372c:	0512      	lsls	r2, r2, #20
 800372e:	609a      	str	r2, [r3, #8]
#endif
}
 8003730:	4770      	bx	lr
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003738:	480d      	ldr	r0, [pc, #52]	; (8003770 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800373a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800373c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800373e:	e003      	b.n	8003748 <LoopCopyDataInit>

08003740 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003740:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8003742:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003744:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003746:	3104      	adds	r1, #4

08003748 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003748:	480b      	ldr	r0, [pc, #44]	; (8003778 <LoopForever+0xa>)
  ldr r3, =_edata
 800374a:	4b0c      	ldr	r3, [pc, #48]	; (800377c <LoopForever+0xe>)
  adds r2, r0, r1
 800374c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800374e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003750:	d3f6      	bcc.n	8003740 <CopyDataInit>
  ldr r2, =_sbss
 8003752:	4a0b      	ldr	r2, [pc, #44]	; (8003780 <LoopForever+0x12>)
  b LoopFillZerobss
 8003754:	e002      	b.n	800375c <LoopFillZerobss>

08003756 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003756:	2300      	movs	r3, #0
  str  r3, [r2]
 8003758:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800375a:	3204      	adds	r2, #4

0800375c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800375c:	4b09      	ldr	r3, [pc, #36]	; (8003784 <LoopForever+0x16>)
  cmp r2, r3
 800375e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003760:	d3f9      	bcc.n	8003756 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003762:	f7ff ffe1 	bl	8003728 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003766:	f000 f811 	bl	800378c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800376a:	f7ff fba9 	bl	8002ec0 <main>

0800376e <LoopForever>:

LoopForever:
    b LoopForever
 800376e:	e7fe      	b.n	800376e <LoopForever>
  ldr   r0, =_estack
 8003770:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8003774:	080038d0 	.word	0x080038d0
  ldr r0, =_sdata
 8003778:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800377c:	20000040 	.word	0x20000040
  ldr r2, =_sbss
 8003780:	20000040 	.word	0x20000040
  ldr r3, = _ebss
 8003784:	200002e4 	.word	0x200002e4

08003788 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003788:	e7fe      	b.n	8003788 <ADC1_COMP_IRQHandler>
	...

0800378c <__libc_init_array>:
 800378c:	b570      	push	{r4, r5, r6, lr}
 800378e:	2600      	movs	r6, #0
 8003790:	4d0c      	ldr	r5, [pc, #48]	; (80037c4 <__libc_init_array+0x38>)
 8003792:	4c0d      	ldr	r4, [pc, #52]	; (80037c8 <__libc_init_array+0x3c>)
 8003794:	1b64      	subs	r4, r4, r5
 8003796:	10a4      	asrs	r4, r4, #2
 8003798:	42a6      	cmp	r6, r4
 800379a:	d109      	bne.n	80037b0 <__libc_init_array+0x24>
 800379c:	2600      	movs	r6, #0
 800379e:	f000 f833 	bl	8003808 <_init>
 80037a2:	4d0a      	ldr	r5, [pc, #40]	; (80037cc <__libc_init_array+0x40>)
 80037a4:	4c0a      	ldr	r4, [pc, #40]	; (80037d0 <__libc_init_array+0x44>)
 80037a6:	1b64      	subs	r4, r4, r5
 80037a8:	10a4      	asrs	r4, r4, #2
 80037aa:	42a6      	cmp	r6, r4
 80037ac:	d105      	bne.n	80037ba <__libc_init_array+0x2e>
 80037ae:	bd70      	pop	{r4, r5, r6, pc}
 80037b0:	00b3      	lsls	r3, r6, #2
 80037b2:	58eb      	ldr	r3, [r5, r3]
 80037b4:	4798      	blx	r3
 80037b6:	3601      	adds	r6, #1
 80037b8:	e7ee      	b.n	8003798 <__libc_init_array+0xc>
 80037ba:	00b3      	lsls	r3, r6, #2
 80037bc:	58eb      	ldr	r3, [r5, r3]
 80037be:	4798      	blx	r3
 80037c0:	3601      	adds	r6, #1
 80037c2:	e7f2      	b.n	80037aa <__libc_init_array+0x1e>
 80037c4:	080038c8 	.word	0x080038c8
 80037c8:	080038c8 	.word	0x080038c8
 80037cc:	080038c8 	.word	0x080038c8
 80037d0:	080038cc 	.word	0x080038cc

080037d4 <memcpy>:
 80037d4:	2300      	movs	r3, #0
 80037d6:	b510      	push	{r4, lr}
 80037d8:	429a      	cmp	r2, r3
 80037da:	d100      	bne.n	80037de <memcpy+0xa>
 80037dc:	bd10      	pop	{r4, pc}
 80037de:	5ccc      	ldrb	r4, [r1, r3]
 80037e0:	54c4      	strb	r4, [r0, r3]
 80037e2:	3301      	adds	r3, #1
 80037e4:	e7f8      	b.n	80037d8 <memcpy+0x4>

080037e6 <memset>:
 80037e6:	0003      	movs	r3, r0
 80037e8:	1882      	adds	r2, r0, r2
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d100      	bne.n	80037f0 <memset+0xa>
 80037ee:	4770      	bx	lr
 80037f0:	7019      	strb	r1, [r3, #0]
 80037f2:	3301      	adds	r3, #1
 80037f4:	e7f9      	b.n	80037ea <memset+0x4>

080037f6 <strcpy>:
 80037f6:	1c03      	adds	r3, r0, #0
 80037f8:	780a      	ldrb	r2, [r1, #0]
 80037fa:	3101      	adds	r1, #1
 80037fc:	701a      	strb	r2, [r3, #0]
 80037fe:	3301      	adds	r3, #1
 8003800:	2a00      	cmp	r2, #0
 8003802:	d1f9      	bne.n	80037f8 <strcpy+0x2>
 8003804:	4770      	bx	lr
	...

08003808 <_init>:
 8003808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800380e:	bc08      	pop	{r3}
 8003810:	469e      	mov	lr, r3
 8003812:	4770      	bx	lr

08003814 <_fini>:
 8003814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800381a:	bc08      	pop	{r3}
 800381c:	469e      	mov	lr, r3
 800381e:	4770      	bx	lr
